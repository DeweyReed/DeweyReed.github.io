[{"title":"Android Animation","url":"/2018/12/11/android-animation/","content":"整理自Get Animated (Android Dev Summit ‘18)，解释那复杂的Android动画框架和工具。\n\n\n\nandroid.view.animation：过时的动画\n 过时了，不好用了。包括创建在R.anim.中的资源（考虑使用R.animator.）。\n 当且仅当处理Window Animation时或Fragment Transition的自定义动画需确保View已经measured不得不使用这个，\n &lt;item name=&quot;android:windowEnterAnimation&quot;&gt;@anim/foo&lt;/item&gt;\nandroid.animation：从API 11开始的Animator\n 来自R.animator.的资源。\n Animator =&gt; ValueAnimator =&gt; ObjectAnimator\n\nValueAniamtor\n ValueAnimator.ofFloat(1f, 0f).apply &#123;    addUpdateListener &#123; ... &#125;&#125;.start()\nObjectAniamtor\n ObjectAnimator.ofFloat(view, View.ALPHA, 1f, 0f).start()\n\n PropertyValueHolder是ValueAnimator的内部实现\n ObjectAnimator.ofPropertyValueHolder(    view,    PropertyValueHolder.ofFloat(View.ALPHA, 1f, 0f),    PropertyValueHolder.ofFloat(View.SCALE_X, 1f, 0f)).start()\nAnimatorSet：属于Aniamtor，管理多个动画\n\nViewPropertyAnimator：使用了ValueAnimator，但效率更高\n view.animate()....start()\n\n\nTransitions：在布局间中切换\n 用于Shared Element Transition、Window Content Transition、模块化动画。\n TransitionManager.beginDelayedTransition(viewGroup)\n 调用后，修改View，自动启动动画。\n\nAnimatedVectorDrawable: VectorDrawable + Animator\n 用于Icon Animation、一次性动画、性能要求高的情况。\n val avd = AppCompatResources.getDrawable(context, R.drawable.avd) as AnimatedVectorDrawableimageView.drawable = avdavd.start()\nPhycisc-based Animation：强交互时提供流畅体验\n\nMotionLayout：饼，真香。\n\n\n","categories":["Android"]},{"title":"Android Animated Vector Drawable搜集","url":"/2019/11/27/android-animated_vector_drawables/","content":"各种会动的图标，性能好，免费用。随缘更新，找到了就丢在这里。\n\n\n\nStylingAndroid/AnimatedIcons\n  \n  \n  \n  \n  \n  \n  \n\n\n\n\n\n\n","categories":["Android"]},{"title":"Android AppCompat 1.1.0渐隐式切换夜间模式","url":"/2019/09/07/android-appcompt110-fading-dark/","content":"2020年5月7日更新，原方案有误，废弃，给我移步2020年5月的深色模式的新文章\n\n","categories":["Android"]},{"title":"Android自动切换深色主题","url":"/2018/10/04/android-auto-night/","content":"2020年8月26日新方案，乖乖穷举\n2020年6月1日我发现还有问题！\n2020年5月22日新方案又来了，希望能结束这个问题\n2020年4月21日还有Bug，正在修。反正也没人看，估计也没坑到什么人\n2020年1月27日憋出了新方案，似乎修好了\n2019年11月4日现在的实现有Bug，正在研究\n2019年10月18日更新AppCompat 1.1.0的使用说明\n2019年8月18日更新增强版\n网上搜怎么实现自动切换深色主题都没资料的，全是实现，只能自己想办法了。\n最终解决的方案倒是很简单，不过走了很多、很多、很多、很多弯路。脑子不是很好使了我好菜啊。\n\n\n已有数据：上一次的启动时间、本次的启动时间（就是现在）、自动启动深色模式的几点几分开始和几点几分结束。\n举个例子，设置八点自动进入深色主题，九点退出深色主题，我们需要满足：1. 上一次启动是在今天八点前。2. 本次启动在今天八点后。3.本次启动在今天九点前。4. 现在是浅色主题。退出深色主题同理。\n下述方案储存几点几分是把小时和分钟分开储存的，另外一种方案是只储存一个值：60 * 小时 + 分钟。\n代码：\n /**  * @return True if we should revert the current dark.  */fun calculateAutoDarkChange(    currentIsDark: Boolean,    nowMilli: Long,    lastLaunchMilli: Long): Boolean &#123;    val lastLaunch =        LocalDateTime.ofInstant(Instant.ofEpochMilli(lastLaunchMilli), ZoneId.systemDefault())    val now = LocalDateTime.ofInstant(Instant.ofEpochMilli(nowMilli), ZoneId.systemDefault())    val today = LocalDate.now()    val nightRange = scheduleRange    val nightStart =        LocalDateTime.of(today, LocalTime.of(nightRange.fromHour, nightRange.fromMinute))    val nightEnd =        LocalDateTime.of(today, LocalTime.of(nightRange.toHour, nightRange.toMinute))    fun isEnteringTheSpanFirst(from: LocalDateTime, to: LocalDateTime): Boolean &#123;        if (from == to) return false        require(from.isBefore(to))        return (now.isAfter(from) || now == from) &amp;&amp;            now.isBefore(to) &amp;&amp;            lastLaunch.isBefore(from)    &#125;    fun isEnteringNight(nightStart: LocalDateTime, nightEnd: LocalDateTime): Boolean &#123;        return isEnteringTheSpanFirst(from = nightStart, to = nightEnd) &amp;&amp; !currentIsDark    &#125;    fun isExitingNight(nightEnd: LocalDateTime, nextNightStart: LocalDateTime): Boolean &#123;        return isEnteringTheSpanFirst(from = nightEnd, to = nextNightStart) &amp;&amp; currentIsDark    &#125;    return if (nightStart.isBefore(nightEnd)) &#123;        // |day start           |night start------------|night end          |day end        when &#123;            now.isBefore(nightStart) -&gt; &#123;                isExitingNight(                    nightEnd = nightEnd.minusDays(1),                    nextNightStart = nightStart                )            &#125;            now.isBefore(nightEnd) -&gt; &#123;                isEnteringNight(                    nightStart = nightStart,                    nightEnd = nightEnd                )            &#125;            else -&gt; &#123;                isExitingNight(                    nightEnd = nightEnd,                    nextNightStart = nightStart.plusDays(1)                )            &#125;        &#125;    &#125; else &#123;        // |day start-----------|night end              |night start--------|day end        when &#123;            now.isBefore(nightEnd) -&gt; &#123;                isEnteringNight(                    nightStart = nightStart.minusDays(1),                    nightEnd = nightEnd                )            &#125;            now.isBefore(nightStart) -&gt; &#123;                isExitingNight(                    nightEnd = nightEnd,                    nextNightStart = nightStart                )            &#125;            else -&gt; &#123;                isEnteringNight(                    nightStart = nightStart,                    nightEnd = nightEnd.plusDays(1)                )            &#125;        &#125;    &#125;&#125;\n\n然后在MainActivity里：\nval now = Instant.now().toEpochMilli()val lastStartTime = prefs.getLong(&quot;last_start_time&quot;, now)prefs.edit().putLong(&quot;last_start_time&quot;, now).apply()val currentIsDark = resources.isDarkThemeif (darkTheme.calculateAutoDarkChange(        currentIsDark = currentIsDark,        nowMilli = now,        lastLaunchMilli = lastStartTime    )) &#123;    updateDark(isDark = !currentIsDark)&#125;val Resources.isDarkTheme: Boolean    get() = configuration.uiMode and Configuration.UI_MODE_NIGHT_MASK == Configuration.UI_MODE_NIGHT_YES\n","categories":["Android"]},{"title":"在国内做Android开发踩过的坑","url":"/2019/08/25/android-chinese-pitfalls/","content":"曾经怀疑过很多次是不是自己的代码有问题，到头来全是各厂商的魔改惹的祸。\n\n\nandroid-in-chia/Compatility前人踩过的坑，以此祭天。\nLeanCloud混淆规则官网的当然是keep所有喽，但我发现使用\n-dontwarn com.avos.**-dontnote com.avos.**-keepnames class com.avos.** &#123; *;&#125;\n\n似乎并不影响。\nfastjson混淆规则这里指的是Java版并不是fastjson-android版。\n官网的当然是。。没有啦，所以民间流传的当然是keep所有喽，但我发现使用\n-dontwarn com.alibaba.fastjson.**-dontnote com.alibaba.fastjson.**\n\n似乎并不影响。\n抖音SDK没有混淆规则它们的“开放”平台没有混淆规则，但不加混淆会调用失败，只能keep所有了。感兴趣的可以试一试-keepnames。\nQQ钱包的Android SDK接入官网的文档有错。\n参数serialNumber为null或为空会导致失败，而服务端又没有提供，但填个任意字符串（我用了当前时间）就能调用了。\n另外，在它们的SDK里发现了这个：\n&#125; else if (TextUtils.isEmpty(&quot;native&quot;)) &#123;    return false;&#125; else if (&quot;native&quot;.compareTo(&quot;native&quot;) != 0) &#123;    return false;\n\n看不懂有啥用，希望哪位大佬点拨一下。\n另外的另外，它们的SDK也应该没提供混淆，只能惯例keep所有。\n友盟Share SDKQQ配置文档有错。用了AAR的依赖后，不需要修改Manifest，而要在app module中添加\nandroid &#123;    defaultConfig &#123;        ...        manifestPlaceholders = [qqappid: &#x27;appid&#x27;]    &#125;\n\n另外，不需要分享的回调结果时，就不需要在onActivityResult调用它们的API的。\nBitmapFactory返回旧图像在一些特定的设备（只在华为设备上遇到过，其他未知）上，对一些特定尺寸的图片（640 * 640），使用BitmapFactory.decodeFile/Stream等类似方法解码Bitmap时，返回的不是此时此刻文件里的图片，而是上一次保存的图片。\n最后换了Glide加载图片解决的。简单看了下源码，Glide似乎是用ByteBuffer加载本地图片的。\n此问题的发生原因和解决方法暂时未知。\nThe End\n你觉得我喜欢去研究这些东西嘛？\n\n","categories":["Android"]},{"title":"Android简繁体翻译到底该放哪儿？","url":"/2022/12/25/android-chinese-strings/","content":"Android开发有着和ISO 639-1与BCP 47相似但不同的语言管理方案。\n\n\nTL;DR如果minSdk大于等于24(Android 7, Nougat)，根据官方文档，简体中文放values-b+zh+Hans，繁体中文放values-b+zh+Hant。\n但没人会这么做吧！\n如果minSdk小于等于23(Android 6, Marshmallow)，经过个人测试，简体中文放values-rCN，繁体中文放values-rTW。如果要针对香港特殊翻译，再用values-rHK，澳门、新加坡同理。\n官方文档有坑讲解如何增加翻译的官方文档和前段时间的Android Dev Summit的一个视频中中，都推荐BCP 47格式（比如values-b+zh+Hans），但都不提示这是Android 7及之后才支持的格式。\n在之前的版本使用该格式时，应用并不会崩溃。但在缺少对应的翻译时，系统会发现新格式包含zh，进而先显示新格式的简体翻译，没有时显示新格式的繁体翻译。\n英文翻译以情况简单的英文为例，Android系统并没有单独的“英语”的语言选择，而有的是诸如“英语（美国）”、“英语（英国）”和“英语（印度）”等选择。这种情况下Locale.getDefault().toLanguageTag()将会是en-US、en-GB和en-IN等。\n这里可以把英文翻译统一放到values-en，但通常英语是直接放到values中作为默认语言。\n中文翻译但简繁体中文并不能统一放到一个文件夹中。Android系统团队显然意识到了类似问题，但Android 7才支持为时已晚（要是AGP向前兼容就好了）。\n以情况复杂的繁体中文为例，虽然翻译放到了台湾（values-rTW），但是：\n在Android 5和6中，只有“简体中文”和“繁体中文”两个语言选项。前者对应values-rCN，后者对应values-rTW。这里并没有之后系统中，可以选择地区的选项。\n从Android 7开始，在选择语言的同时，也必须选择语言的地区。这时就出现了港澳台三地的繁体中文版本。\n在个人测试中，以香港繁体中文为例，系统选择values-b+zh+Hant和values-rTW或values-rHK的优先级在不同手机上是不同的。但肯定是繁体中文。\n系统也足够智能，如果没有values-rHK，它会选择values-rTW，即使这里的地区是台湾而不是用户设置的香港。\n系统会选择和用户设置地区不同的文件夹，这里是最反直觉的地方。这是因为找不到地区对应的翻译时，系统会选择同语言的其他地区翻译，来确保至少是语言是正确的。\n奖励1build.gradle中的指定语言的resConfigs是要和对应文件夹一致的。比如resConfigs &#39;en&#39;, &#39;zh-rCN&#39;, &#39;zh-rTW&#39;\n奖励2在Per-app language preferences，Android依然沿用了反直觉的缩写。这里似乎和Locale.toLanguageTag()是一致的。\n更新1不要假设简体中文只有values-rCN、values-rSG等几个地区标签。有的手机允许用户分别任意选择语言和地区，这样会有很多很多的组合。不过文件夹的检测顺序是通用的。\n更新2如何检测应用当前是否是简体中文？\nval languageTag = Locale.getDefault().toLanguageTag()if (languageTag == &quot;zh-CN&quot; || languageTag.startsWith(&quot;zh-Hans&quot;)) &#123;    // ...&#125;\n\n暂时并没有找到更靠谱的办法。\n往对应values文件夹中放对应语言的标识string似乎可以，但这让翻译协作变得困难。\n参考\nhttps://developer.android.com/guide/topics/resources/localization\nhttps://developer.android.com/guide/topics/resources/providing-resources#AlternativeResources\nhttps://developer.android.com/training/basics/supporting-devices/languages\n\n","categories":["Android"]},{"title":"一些可能有用的Android代码 - Android Makers 2022版","url":"/2022/06/25/android-code-snippets-android-makers22/","content":"Android Makers 2022\n\n\nbuildSrc Deprecated对编译速度有影响，所以过气了。换用Version Catalogs。\nSingle-variant LibrariesandroidComponents &#123;    beforeVariants(selector().withBuildType(&quot;debug&quot;)) &#123; builder -&gt;        builder.enable = false    &#125;&#125;\n\nDisable Android Features# Build features that are disabled by default in all projectsandroid.default.buildFeatures.aidl=falseandroid.default.buildFeatures.buildconfig=falseandroid.default.buildFeatures.renderscript=falseandroid.default.buildFeatures.resvalues=falseandroid.default.buildFeatures.shaders=false\n\nTaskUpToDateValidator.ktTaskUpToDateValidator.kt\nmodules-graph-asserthttps://github.com/jraska/modules-graph-assert\n文件保存\n","categories":["Android"]},{"title":"一些可能有用的Android代码 - IO22版","url":"/2022/05/29/android-code-snippets-io22/","content":"记录了一些可以直接拿来使用的内容。出处全是IO视频截图。\n\n\n搜索按钮的触发事件btnSearch.setOnEditorActionListener &#123; _, actionId, _ -&gt;    if (actionId == EditorInfo.IME_ACTION_SEARCH) &#123;        performSearch()        true    &#125; else &#123;        false    &#125;&#125;btnSearch.setOnKeyListener &#123; _, keyCode, event -&gt;    if (keyCode == KeyEvent.KEYCODE_ENTER &amp;&amp; event.action == KeyEvent.ACTION_UP) &#123;        performSearch()        true    &#125; else &#123;        false    &#125;&#125;\n\nViewPager中的Fragment获取ViewModel// Scope the fragment to the parent fragmentprivate val sharedViewModel: PagerViewModel  by viewModels(ownerProducer = &#123; requireParentFragment() &#125; )\n\n获取硬盘剩余空间Stackoverflow上说：\nval sf = StatFs(file.absolutePath)val availableBytes = sf.availableBlocksLong * sf.blockSizeLong\n\nIO上说：\nUse File.getUsableSpace to check available space on storage.\n二者数据似乎相等。\n保存文件val target = if (filesDir.usableSpace &gt; fileSize) &#123;    filesDir&#125; else &#123;    getExternalFilesDir(null)&#125;requireNotNull(target) &#123; &quot;Not enough space&quot; &#125;bigInputStream.use &#123; input -&gt;    File(target, &quot;big-file.zip&quot;).outputStream().use &#123; output -&gt;        input.copyTo(output)    &#125;&#125;\n\n获取屏幕大小使用Jetpack WindowManager：\nval current = WindowMetricsCalculator.getOrCreate().computeCurrentWindowMetrics(activity)val max = WindowMetricsCalculator.getOrCreate().computeMaximumWindowMetrics(activity)\n\n但如果没有Activity呢？先用古法凑活一下：\nval wm = context.getSystemService&lt;WindowManager&gt;()requireNotNull(wm)val point = Point()val defaultDisplay = wm.defaultDisplaydefaultDisplay.getRealSize(point)if (point.x &lt;= 0 || point.y &lt;= 0) &#123;    val rect = Rect()    defaultDisplay.getRectSize(rect)    point.set(rect.right, rect.bottom)&#125;\n\n代码部分来自于WindowMetricsCalculator.getOrCreate().computeCurrentWindowMetrics(activity)。\n注意：\n\n所有方法都会根据屏幕旋转进行数值调换。\nResources.getSystem().displayMetrics.heightPixels并不包括状态栏和（或）状态栏。\n\n相机旋转和设备旋转Support resizable surfaces in your camera app，或者用1.1.0及以上的CameraX。\n实现列表特殊Footer效果\n内容不满一屏幕时，Footer显示在屏幕底端。\n屏幕超过一屏幕时，Footer和其他条目一样排排坐。\n\n使用Jetpack Compose来实现：\nLazyColumn(    modifier = Modifier.fillMaxHeight(),    verticalArrangement = TopWithFooter,) &#123;    items(list) &#123;        Item()    &#125;    item &#123;        Footer()    &#125;&#125;\n\n默认情况下，LazyColumn不满一屏幕会WRAP_CONTENT，用fillMaxHeight()来指定高度。\nobject TopWithFooter : Arrangement.Vertical &#123;    override fun Density.arrange(totalSize: Int, sizes: IntArray, outPositions: IntArray) &#123;        var y = 0        sizes.forEachIndexed &#123; index, size -&gt;            outPositions[index] = y            y += size        &#125;        if (y &lt; totalSize) &#123;            outPositions[outPositions.lastIndex] = totalSize - (sizes.lastOrNull() ?: 0)        &#125;    &#125;&#125;\n\nif判断前内容就是默认的verticalArrangement（Arrangement.Top）的实现。\n代码过于简单以至于不需要其他解释了。\n","categories":["Android"]},{"title":"一些可能有用的Android代码","url":"/2019/06/15/android-code-snippets/","content":"2020年11月6日 更新View.outlineProvider\n没地儿放它们。\n\n\n渐隐重启Activity// 1startActivity(Intent(this, MainActivity::class.java))finish()overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)// 2startActivity(Intent(this, MainActivity::class.java),    ActivityOptions.makeCustomAnimation(this, android.R.anim.fade_in, android.R.anim.fade_out).toBundle())finish()\n\nRingtoneManager\nNote that the list of ringtones available will differ depending on whether the caller has the {@link android.Manifest.permission#READ_EXTERNAL_STORAGE} permission.\n\nval intent = Intent(RingtoneManager.ACTION_RINGTONE_PICKER)        .putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE, &quot;Hello&quot;)        .putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE, RingtoneManager.TYPE_ALL)        .putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_SILENT, true)        .putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, true)        .putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI, Uri.EMPTY)        .putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI, Uri.EMPTY)startActivityForResult(intent, 0)\n\nonActivityResult,\nval uri = data?.getParcelableExtra&lt;Uri&gt;(RingtoneManager.EXTRA_RINGTONE_PICKED_URI)val name = if (uri != null) &#123;    val rng = RingtoneManager.getRingtone(this, uri)    if (rng != null) &#123;        rng.stop()        rng.getTitle(this)    &#125; else &#123;        getString(R.string.unknown)    &#125;&#125; else &#123;    getString(R.string.unknown)&#125;\n\n文件选择来自Codelab的一段代码.\n需要READ_EXTERNAL_STORAGE权限。\nRecyclerView头部视差显示使第一个View渐隐退出Window。\nlist.addOnScrollListener(object :RecyclerView.OnScrollListener()&#123;    override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) &#123;        super.onScrolled(recyclerView, dx, dy)        val view = recyclerView.getChildAt(0)        if (view != null &amp;&amp; recyclerView.getChildAdapterPosition(view) == 0) &#123;            view.translationY = view.top / 3f            view.alpha =  1 - -view.top.toFloat() / view.height        &#125;    &#125;&#125;)\n\nADB查看当前Activity\nadb shell &quot;dumpsys window w | grep name=&quot;\n栈顶：adb shell dumpsys activity | grep &quot;mFocusedActivity&quot;\n栈顶Fragment：adb shell dumpsys activity your.package.name\n\nADB截屏并保存adb shell screencap -p | perl -pe &#39;s/\\x0D\\x0A/\\x0A/g&#39; &gt; screen.png\n或者\nadb exec-out screencap -p &gt; screen.png\nGrab Android screenshot to computer via ADB\n让一个Activity有类似Android O或P彩蛋一样的背景。设置theme为android:theme=&quot;@android:style/Theme.Wallpaper.NoTitleBar.Fullscreen&quot;。\n给Layout添加Ripple\n创建ripple_press.xml\n &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;ripple xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    android:color=&quot;@android:color/white&quot;&gt;    &lt;item android:id=&quot;@android:id/mask&quot;&gt;        &lt;shape android:shape=&quot;rectangle&quot;&gt;            &lt;solid android:color=&quot;@android:color/white&quot; /&gt;        &lt;/shape&gt;    &lt;/item&gt;&lt;/ripple&gt;\n在Layout中使用\n &lt;com.google.android.material.card.MaterialCardView    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    android:clickable=&quot;true&quot;    android:focusable=&quot;true&quot;&gt;    &lt;!-- ... --&gt;    &lt;View        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;match_parent&quot;        android:foreground=&quot;@drawable/ripple_press&quot; /&gt;    &lt;!-- ... --&gt;&lt;/com.google.android.material.card.MaterialCardView&gt;\n\n clickable和focusable很重要，View之前的View会有Ripple效果，之后的View则没有。\n\n\nAutoClearedValuehttps://github.com/googlesamples/android-architecture-components/blob/master/GithubBrowserSample/app/src/main/java/com/android/example/github/util/AutoClearedValue.kt\n带清除按钮的EditText来自Best Practices for Using Text in Android (Google I/O’19)\n&lt;LinearLayout    android:addStatesFromChildren=&quot;true&quot;    android:background=&quot;?editTextBackground&quot;&gt;    &lt;EditText android:background=&quot;@null&quot; /&gt;    &lt;ImageButton ... /&gt;&lt;/LinearLayout&gt;\n\nCustom View中的onSaveInstanceStateAndroid didn’t manage the onSaveInstanceState/onRestoreInstanceState if no id is set to the view.\n?attr, ?android:attr, ?colorPrimary, ?attr/colorPrimary…https://developer.android.com/guide/topics/resources/providing-resources#ResourcesFromXml =&gt; Referencing style attributes`\nFile - Mark As Plain Text重构时很有用，不会影响VS。\nFragmentManager.setCustomAnimations()‘s Parameters\n@AnimatorRes @AnimRes int enter: 应用到动画中进入屏幕的Fragment\n@AnimatorRes @AnimRes int exit: 应用到动画中退出屏幕的Fragment\n@AnimatorRes @AnimRes int popEnter: 应用到popBackStack时动画中进入屏幕的Fragment\n@AnimatorRes @AnimRes int popExit: 应用到popBackStack时动画中退出屏幕的Fragment\n\nKotlin in and out// 一个RecyclerView.ViewHolder子类的List// 因为不知道到底是哪个子类，所以不能安全的添加或修改// 但肯定能拿到一个RecyclerView.ViewHolder// 只能拿，所以叫out，Java里叫extendsval outList: MutableList&lt;out RecyclerView.ViewHolder&gt; = mutableListOf()// 一个RecyclerView.ViewHolder父类的List// 因为不知道到底是哪个父类，所以只能强行拿到顶层的Any?// 但是可以随便添加或修改RecyclerView.ViewHolder及其子类// 只有添加或修改方便，所以叫in，Java里叫superval inList: MutableList&lt;in RecyclerView.ViewHolder&gt; = mutableListOf()\n\nclipToPadidngEnables our items to still be drawn within the parent&#39;s padding.\nView.outlineProviderbinding.imageView.run &#123;    clipToOutline = true    outlineProvider = object : ViewOutlineProvider() &#123;        override fun getOutline(view: View, outline: Outline) &#123;            outline.setOval(                view.paddingLeft,                view.paddingTop,                view.width - view.paddingRight,                view.height - view.paddingBottom            )        &#125;    &#125;&#125;\n","categories":["Android"]},{"title":"巧用Android CoordinatorLayout实现复杂布局 + 滚动内容","url":"/2019/10/02/android-coordinator-layout-hack/","content":"一个使用情景是：页面上半部分是一个不算短的、复杂的Layout，后半部分是一个嵌套了RecyclerView的Fragment的横向ViewPager。使用效果是，上半部分会充当下半部分可滚动内容的Header。怎么做？\n\n\n常见的解决办法如果下半部分只是RecyclerView而不是ViewPager的话，可以把上半部分当作RecyclerView的Header，使用多类型Adapter实现，除了每次找头部有点麻烦外，没问题。\n但下面是ViewPager，这时如果用ScrollView/NestedScrollView，可能会发生一下情况：\n\n滚顿位置错误、初始位置不是最顶部\n 从下往上滚动到ViewPager顶部时，滚动停止，需要再次下拉才能看到头部。记忆中SO上给出一种解决方案是，修改fousable，但这样会伤害到a11y，虽然不少人不在乎这个东西，但是还是有更优雅的解决方案的。\n\nViewPager双向滚动不流畅\n 只要ViewPager嵌套RecyclerView都会多少出现这个问题。解决方案可以参考Improving scrolling behavior of nested RecyclerViews - Part 1\n\n使用ViewPager2来解决问题\n 之前试了一下，似乎能解决不少问题，但遇到了横向滚动时位置错误/空白的问题，无奈只能放弃。另外，它的双向滚动不流畅问题比ViewPager还要严重。也许未来的Release会修好这些问题。\n\n\n更严重的是，如果在SO上找答案，会根据不同Target API和不同AndroidX/Support版本，方案都不一样，有新有旧，有的有用有的没用。\n要用CoordinatorLayout啊前段时间找到了一个不错的解决办法，就是使用CoordinatorLayout，把上半部分塞到AppBarLayout中，下半部分放到正文中：\n&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;&gt;    &lt;com.google.android.material.appbar.AppBarLayout        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:background=&quot;@null&quot;        app:elevation=&quot;0dp&quot;&gt;        &lt;com.google.android.material.appbar.CollapsingToolbarLayout            android:layout_width=&quot;match_parent&quot;            android:layout_height=&quot;wrap_content&quot;            app:layout_scrollFlags=&quot;scroll&quot;&gt;            &lt;!-- Top Content --&gt;        &lt;/com.google.android.material.appbar.CollapsingToolbarLayout&gt;    &lt;/com.google.android.material.appbar.AppBarLayout&gt;    &lt;androidx.viewpager.widget.ViewPager        android:id=&quot;@+id/viewPager&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;match_parent&quot;        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot; /&gt;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;\n\nCoordinatorLayouthe和AppBarLayout不一定非要用在根部嘛，无论哪里都可以用。\n既然不放Toolbar，可以把AppBarLayout的颜色和elevation去掉：\n&lt;com.google.android.material.appbar.AppBarLayout    android:background=&quot;@null&quot;    app:elevation=&quot;0dp&quot;&gt;\n\n让CollapsingToolbarLayout滚起来，可以让顶部内容成为Header：\n&lt;com.google.android.material.appbar.CollapsingToolbarLayout        app:layout_scrollFlags=&quot;scroll&quot;&gt;\n\n这样，滚动位置、初始位置、a11y什么的都没问题啦。\n奖励：带一个可滚动的TabLayout&lt;com.google.android.material.appbar.CollapsingToolbarLayout    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;wrap_content&quot;    app:layout_scrollFlags=&quot;scroll&quot;&gt;    &lt;com.google.android.material.tabs.TabLayout        android:id=&quot;@+id/tabLayout&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot; /&gt;&lt;/com.google.android.material.appbar.CollapsingToolbarLayout&gt;\n\nTabLayout是顶部内容最后一个，会跟随滚动，离开屏幕。\n奖励励：带一个常驻的TabLayout把TabLayout移到下半部分：\n&lt;LinearLayout    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    android:orientation=&quot;vertical&quot;    app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;    &lt;com.google.android.material.tabs.TabLayout        android:id=&quot;@+id/tabLayout&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;&quot; /&gt;    &lt;androidx.viewpager.widget.ViewPager        android:id=&quot;@+id/viewPager&quot;        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot; /&gt;&lt;/LinearLayout&gt;\n\n这样TabLayout一开始会跟随滚动，到达顶部后，就不动了，而下半部分的ViewPager会继续滚，相当于一个Sticky Header。如果一开始使用多类型Adapter + Header实现的话，要解决这个就需要点劳动了。\n总结浓眉大眼的CoordinatorLayout和它的一帮小弟有时候还有点用。希望material 1.1.0不会出现陨石坑吧。\n","categories":["Android"]},{"title":"Android Dark Theme/深色模式使用体验","url":"/2020/05/07/android-dark-theme/","content":"虽说一行代码AppCompatDelegate.setDefaultNightMode就能搞定的问题，但实际上坑不少哩。\n\n\n命名问题之前Google自己在文档中和API中混用Night Theme/Dark Theme，后来才统一用Dark Theme，毕竟不一定非得晚上才可以用这个模式嘛。同样的，在Dark Theme的中文文档里，将其翻译为深色/浅色主题，个人觉得比之前大伙儿用的夜间模式、黑色模式、黑夜模式、暗夜模式、暗黑模式等好听不少。\n自带的坑AppCompat 1.1.0给我们带来了深色模式，也带来了不少问题。像是因为从rc到正式版时只改了一行关于深色模式的代码，导致棒棒糖的WebView全线崩溃的问题。\nsetDefaultNightMode在1.1.0中会自动重启所有Activity，这导致不少应用的深色主题的逻辑被打乱不说，这个实现也很难自定义。当然，你别动它，自然什么毛病没有。\n自挖的坑setDefaultNightMode会调用ActivityCompat.recreate()。\n这个方法没有任何动画不说，而且在某些设备上会黑屏闪一下。在之前setDefaultNightMode不会自动重启的日子里，我的办法是：\nfun Activity.restartWithFading() &#123;    startActivity(intent)    finish()    overridePendingTransition(R.anim.fade_in_short, R.anim.fade_out_short)&#125;\n\n但现在不行了。那么如何拦截recreate()呢？\n我的第一次尝试是根据文档中对onConfigurationChanged()进行拦截，在拦截后手动重启Activity。\n这么做用了没问题，但如果我从一个没有拦截onConfigurationChanged()的Activity中切换深色主题（比如通过省电模式），那这时会切换失效。\n这是因为文档中有一句话：\n\nAn app can handle the implementation of Dark theme itself by declaring that each Activity can handle the uiMode configuration change:\n\n我们需要对每个Activity都进行拦截。但这时如果我用了第三方的Activity（像CustomTabs），这依然会失效。至此我只能另寻他路。\n我的第二次尝试是重写recreate()：\noverride fun recreate() &#123;    if (lifecycle.currentState.isAtLeast(Lifecycle.State.STARTED)) &#123;        // 不在前台时执行此处会导致Activity成为栈顶。        restartWithFading()    &#125; else &#123;        super.recreate()    &#125;&#125;\n\n使用后皆大欢喜，但当我在另一台机器上测试时，发现失效了。原因是：\npublic static void recreate(@NonNull Activity activity) &#123;    // On Android P and later we can safely rely on the platform recreate()    if (Build.VERSION.SDK_INT &gt;= 28) &#123;        activity.recreate();    &#125; else &#123;        if (!ActivityRecreator.recreate(activity)) &#123;            // If ActivityRecreator did not start a recreation, we&#x27;ll just invoke the platform            activity.recreate();        &#125;    &#125;&#125;\n\nActivityCompat.recreate在派之后才会调用recreate，而在之前只是可能调用，比如我在27的设备上没调用，但在21的模拟器上调用了。\n至此我没办法了，只能委屈部分老用户闪一下了。╮(╯▽╰)╭\n我都不知道我不知道的坑我的一个应用里有一个指定时间段内自动打开/关闭深色主题的功能。具体如下，\n一个Switch显示是否使用了深色主题：\nswitchDark.isChecked = resources.isDarkThemeval Resources.isDarkTheme: Boolean    get() = configuration.uiMode and Configuration.UI_MODE_NIGHT_MASK == Configuration.UI_MODE_NIGHT_YES\n\n切换Switch时切换深色模式：\nswitchDark.setOnCheckedChangeListener &#123; _, isChecked -&gt;    toggleDark(toDark = isChecked)&#125;private fun toggleDark(toDark: Boolean) &#123;    AppCompatDelegate.setDefaultNightMode(        if (toDark) &#123;            AppCompatDelegate.MODE_NIGHT_YES        &#125; else &#123;            AppCompatDelegate.MODE_NIGHT_NO        &#125;    )&#125;\n\n此外，在onCreate中根据需要自动切换深色模式：\nif (shouldToggleAutoDark) &#123;    toggleDark(toDark = !resources.isDarkTheme)&#125;\n\n有啥问题，有啥问题呀？\n如果使用之前在recreate中重启应用的方法，那么在派及之后的设备上没有任何问题。否则，在所有设备上 + 使用之前在recreate中重启应用的方法且在派之前的设备上，都会出现自动切换失效的问题。\n比如现在是浅色主题，Switch为关，在启动时触发自动深色主题，setDefaultNightMode呼叫recreate()，应用重启，Switch为开，但这时Switch会经历一次onSaveInstanceState，将它的状态设置为之前的关，同时触发OnCheckedChangeListener，把应用设置为浅色模式，然后我们回到了原点。╮(╯▽╰)╭\n最后我把Switch在切换前把所有可能调用onSaveInstanceState的地方（toggleDark和recreate中）删掉View后，修好了。\n也可以在那些地方清空掉Listener，再把isChecked设为新的值。\n完。\n","categories":["Android"]},{"title":"Android Dev Summit 2019 笔记","url":"/2019/11/13/android-dev-summit-2019/","content":"RT\n\n\nUSB\nMAC: system-Profiler SPUSBDataType\nLinux: lsusb -vvv\nWindows: USBView.exe\n\nGradlesettings.gradle: project(&quot;:core&quot;).projectDir = new File(rootDir, &quot;libraries/core&quot;)\ndef androidx = [:]androidx.appcompat = &quot;androidx.apcompat:appcompat:1.1.0&quot;ext.libs = [:]exit.libs.androidx = androidximplementation libs.androidx.appcompat\n\nADBadb emu foldadb emu wm sizeadb emu wm size 1148x2480adb emu wm size reset\n\nDrawing Behind System Bar\nChange system bar colors\n values-v29/themes.xml:\n &lt;item name=&quot;android:navigationBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;\n\n values/themes.xml: #B3FFFFFF(70% white)\n values-night/themes.xml: #B3000000(70% black)\n\nRequest to be laid out fullscreen\n view.systemUiVisibility =    // We wish to be laid out as if the navigation bar was hidden    View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION or    // We wish to be laid out fullscreen, behind the status bar    View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN or    // We wish to be laid out at the most extreme scenario of any other flags    View.SYSTEM_UI_FLAG_LAYOUT_STABLE\nAvoid overlays with system UI\n Always use the ViewCompat method:\n ViewCompat.setOnApplyWindowInsetsListener(view) &#123; v, insets -&gt;    // Do something with the insets    v.updatePadding(        bottom = insets.systemWindowInsets.bottom    )    v.updateLayoutParams&lt;MarginLayoutParams&gt;(        bottomMargin = insets.systemWindowInsets.bottom    )    // return the insets    insets&#125;\n\n WindowInsetsCompat.getSystemWindowInsets(): InsetsWindowInsetsCompat.getSystemGestureInsets(): InsetsWindowInsetsCompat.getMandatorySystemGestureInsets(): Insets\n\n onLayout/onDraw: View.setSystemGestureExclusionRects(List&lt;Rect&gt; rects)\n\n\nScopesFragment, Fragment ViewModel, Activity, Activity ViewModel, Application &amp; its ViewModel\nOne way to handle backval dispatcher by lazy &#123; requireActivity().onBackPressedDispatcher &#125;lateinit var callback: OnBackPressedCallbackoverride fun onCreate(savedInstanceState: Bundle?) &#123;    super.onCreate(savedInstanceState)    callback = dispatcher.addCallback(this) &#123;        showConfirmDialog()    &#125;&#125;private fun onConfirm() &#123;    callback.enabled = false    dispatcher.onBackPressed()&#125;\n\nIntent Handling\nA lot of intent handlers couble be disabled.\nCheck if an intent handler exists, don’t assume it will just work.\n\nif (intent.resolveActivity(packageManager) == null) &#123;    // Error!&#125; else &#123;    startActivity(intent)&#125;\n\nScoped Storage\nRead only video/image/audio files\n MediaStore + READ_EXTERNAL_STORAGE\n data class Video(val uri: Uri, val name: String, val duration: Int, val size: Int)val videoList = mutableListOf&lt;Video&gt;()val projection = arrayOf(    MediaStore.Video.Media._ID,    MediaStore.Video.Media.DISPLAY_NAME,    MediaStore.Video.Media.DURATION,    MediaStore.Video.Media.SIZE)val selection = &quot;Video.Media.DURATION) &gt;= ?&quot;val selectionArgs = arrayOf(    TimeUnit.MILLISECONDS.convert(5, TimeUnit.MINUTES).toString())val query = contentResolver.query(    MediaStore.Video.Media.EXTERNAL_CONTENT_URI,    projection,    selection,    selectionArgs,    &quot;$&#123;MediaStore.Video.Media.DISPLAY_NAME&#125; ASC&quot;)query?.use &#123; cursor -&gt;    val idColumn = cursor.getColumnIndexOrThrow(MediaStore.Video.Media._ID)    val nameColumn = cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DISPLAY_NAME)    val durationColumn = cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DDRATION)    val sizeColumn = cursor.getColumnIndexOrThrow(MediaStore.Video.Media.SIZE)    while(cursor.moveToNext()) &#123;        // we 11 use the column indexes that we found above        val id = cursor.getLong(idColumn)        val name = cursor.getString(nameColumn)        val duration = cursor.getInt(durationColumn)        val size = cursor.getInt(sizeColumn)        val contentUri = ContentUris.withAppendedId(            MediaStore Video Media EXTERNAL_CONTENT_URI. id        )        videolist += Video(contentUri, name, duration, size)    &#125;\nRead non-media files\n SAF(No Permission): ACTION_OPEN_DOCUMENT, ACTION_OPEN_DOCUMENT_TREE + takePersistableUriPermission\n fun intentPickDocument() &#123;    val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply &#123;        addCategory(Intent.CATEGORY_OPENABLE)        type = &quot;application/pdf&quot;    &#125;    startActivityForResult(intent, PICK_PDF_FILE)&#125;override fun onActivityResult(requestCode: Int, resultCode: Int, resultData: Intent?) &#123;    super.onActivityResult(requestCode, resultCode, resultData)    if (requestCode == PICK_PDF_FILE &amp;&amp; resultCode == Activity.RESULT_OK) &#123;        resultData?.data?.let &#123; uri -&gt;            renderPdf(uri)            contentResolver.query(uri, null, null, null, null, null)?.use &#123;                val name = it.getString(cursor.getColumnIndexOrThrow(OpenableColumns.DISPLAY_NAME))                val size = it.getString(cursor.getColumnIndexOrThrow(OpenableColumns.SIZE)) // May throw            &#125;        &#125;    &#125;&#125;\nAdd &amp; Edit image/video/audio files\n MediaStore + WRITE_EXTERNAL_STORAGE(READ?) + ACCESS_MEDIA_LOCATION to access EXIF data\n val selectedImageUri = Uri.parser(&quot;content://media/external/images/media/44&quot;)fun editImage() &#123;    try &#123;        contentResolver.openFileDescriptor(selectedtmageUri, &quot;w&quot;)?.use &#123;            setGrayscaleFilter(it)        &#125;    &#125; catch (securityException: SecurityException) &#123;        if (Build.VERSIN.SDK_INT &gt;= Build.VERSION_CDDES.Q) &#123;            val recoverableSecurityException = securityException as? RecoverableSecurityException ?: throw securityException            val intentSender = recoverableSecurityException.userAction.actionIntent.intentSender            intenSender?.let &#123;                startIntentSenderForResult(intentSender, EDIT_IMAGE_REQUEST, null, 0, 0, 0, null)            &#125;        &#125; else &#123;            throw securityException        &#125;    &#125;&#125;\nFile management or Backup features need to approved in Play Console.\n\n\nANR\nBackground Services =&gt; MediaBrowserServer(API 26)\nWorkManager\nReduced use of SharedPreferences\nReorganized the app graph to perform less object instantiation in application’s onCreate()\n\nThemeAppTheme =&gt; Theme.MaterialComponents.Light =&gt; Theme.AppCompat.Light =&gt; Theme.Material.Light\n@ColorIntfun Context.getThemeColor(    @AttrRes themeAttrld: Int): Int &#123;    return obtainStyledAttributes(        intArrayOf(themeAttrld)    ).use &#123;        it.getColor(0, Color.MAGENTA)    &#125;&#125;\n\nval themedContext = ContextThemeWrapper(context, R.style.ThemeOverlay_Owl_Blue)val inflater = LayoutInflater.from(themedContext)val view = inflater.inflate(...)\n\n\nUse literal names, relavant to the value(brand_blue &gt; color_primary)\n\nName\n  Theme.AppTheme.Blue\n  Widget.AppTheme.Toolbar.Green\n  StyleType.GroupName.SubGroupName.VariantName\n\n&lt;View style=&quot;@style/Theme.AppTheme.Foo&quot; /&gt;\n\nFiles\n\nthemes.xml: Themes and ThemeOverlays\ntypes.xml: TextApperances, Text size dimens\nstyles.xml: Widget styles\ndimens.xml, colors.xml, strings.xml\n\n\n?textApperanceHeandline1 &gt; @style/TextApperance.MaterialComponts.Headline1\n\n\nPermissions\nMimimum permissions\nRequest in context\nLibraries\nMimimize localtion and background location\n\n","categories":["Android","Notes"]},{"title":"Android动态主题","url":"/2018/09/14/android-dynamic-theme/","content":"2018年12月1日 更新Cyanea\n不是给用户几个主题选择的多主题，而是可以让用户选择任意颜色，这让难度上了一档次，尤其是想用一种不那么侵入的方法实现的话。\n从主题的实现来分，主要分依赖Android和自己动手。但这里按实现难度排序。\n\n\n2018年12月1日 更新Cyanea\n发现了Cyanea，也是可以动态颜色，黑科技，效果极佳，除了不仅需要代码还需要很多styles。\n初步看了一下代码，它不像Aesthetic一样拦截View创建过程，而是拦截Resources的getColor和getColorStateLlist返回自定义颜色，并使用自定义的LayoutInflater，在View创建之后，使用反射给View的ColorStateList修改颜色。这样，一些直接着色很困难的View（说的就是TimePicker）也可以一并被着色。\n好强啊。\n【完】2018年12月1日 更新Cyanea\n幼儿园难度 - 着色次数少的动态主题像网易云音乐这种，除了标题栏有主题色外，用到主题色的地方基本没有。只需要判断一下颜色亮暗，修改一下标题栏图标色和背景色就可以啦。\n优点：简单到做这种应用的开发者都用不着找资料\n缺点：使用体验很一般\n简单难度 - 预设的多主题这个也很容易，只需要把预设的主题放到styles.xml中，然后在onCreate的super前调用setTheme，让Android框架自己处理各种主题颜色即可。Colorful就是这么做的，它的styles.xml中存放了很多很多预设颜色和它们的组合。\n优点：\n\n简简单单\n所有用到的地方都能着色（跟下一方案相比尤其重要）\n\n缺点：除了不能让用户随便选，没有缺点\n正常难度 - 手动着色的动态主题像酷安这种，对每个用到主题色的地方进行着色。\n这里可以对需要用的主题色的View新建一个子类，创建时着色。Aesthetic就是这么做的，而且它机智地使用了LayoutInflaterCompat.setFactory2来偷梁换柱，把每个View都换成可着色的子类。\n优点：用户体验++缺点\n\n实现复杂，现有的Library(Aesthetic)都有点问题。\n有的View不能被正常着色，比如CoordinatorLayout跟它的子子孙孙们，有不少坑，有的还得反射才行。\n\n老手难度 - 动态主题 + 主题包Telegram啦。它是自己动手，丰衣足食。\n这种方案不仅可以自定义颜色，还可以使用别人的主题包。\n有个现成的框架Android-skin-support，也是用setFactory实现的，不过没有用过，使用体验不知如何。\n优点：用户体验#\n缺点：\n\n主题包主要是给社交软件用的，而且不是必备功能，因此使用面较窄\n实现起来很繁琐\n\n总之要么应用很简单，要么只提供预设主题，否则想要实现动态主题，此时此刻并不轻松。没有现成的壮硕的Library能用，意味着自己的造轮子。比如Aesthetic现在还有一大堆Bug。\n夜间模式我倾向于将夜间模式和主题分开，两者互不影响。\n夜间模式也有两种实现方式：\n\n同样使用setTheme，把什么windowBackground都手动设置。\n推荐的是技能DayNightstyle，并使用AppCompatDelegate.setDefaultNightMode调用res-night下的资源，基本上属于support library白给的夜间主题。\n\n","categories":["Android"]},{"title":"Android切换RecyclerView的Item布局(Expandable RecyclerView?)","url":"/2018/10/26/android-expandable-recyclerview/","content":"让一个RecyclerView中的一个Item有两种不同的布局，可以用来给Item赋予多个状态，当然也可以实现类似Expandable RecyclerView的效果。\n\n\n诀窍在于notifyItemChanged的时候，如果getItemViewType返回了不同的值，onCreateViewHolder就会被再次调用，这时新建一个新的ViewHolder就可以啦。\n用实现一个Expandable RecyclerView来举例子：\n\n首先要使用不同的ViewType：\n @Overridepublic int getItemViewType() &#123;    return isExpanded() ? ExpandedAlarmViewHolder.VIEW_TYPE : CollapsedAlarmViewHolder.VIEW_TYPE;&#125;\n要让第一种ViewHolder变成第二种，要在点击了第一种ViewHolder中的一个Button或其他，触发展开事件：\n public void expand() &#123;    if (!isExpanded()) &#123;        mExpanded = true;        notifyItemChanged();    &#125;&#125;\n在onCreateViewHolder中根据不同的ViewType创建不同的ViewHolder\n @Overridepublic ItemViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;    final ItemViewHolder.Factory factory = mFactoriesByViewType.get(viewType);    if (factory != null) &#123;        return factory.createViewHolder(parent, viewType);    &#125;    throw new IllegalArgumentException(&quot;Unsupported view type: &quot; + viewType);&#125;\n\n 这里也可以不用factory，直接判断viewType。\n\nTaDa，完成。其实这篇文章最重要的就是第二句话。\n\n\n来源：AOSP的DeskClock\n","categories":["Android"]},{"title":"一些Android开发死局","url":"/2022/06/26/android-forbidden-topics/","content":"有些东西就是做不到，除非，加很多很多钱和时间。\n一些V2EX帖子整理。\n\n\n抓包\n问下安卓如何防止 root 下抓包， app 接口请求并没有做加密措施\n怎么防止用户自己调用网站 API 发送 POST 请求篡改数据\n如何对 Android APP 抓取 HTTPS 包？\nAPP抓包研究\n\nTL;DR: 功夫不负有心人。没有彻底的办法。最好的办法永远是在服务端控制数据。\n如果能用Firebase的话，可以第三方接入AppCheck来防止中间人。\n一些精彩发言：\nkings0527永远无法防止只能提高门槛https 仅仅防止中间人证书信任 仅仅防止不会过 ssl pinning 的人证书校验 仅仅防止没有逆向能力的人参数加密 仅仅防止逆向能力很低的人自写协议 仅仅防止逆向能力不高的人所以 看情况 看成本 加策略不要为了防止抓包而防止抓包应该是 你为什么要防止抓包？？？防爬虫？？？那可以加请求频率限制 可以加风险等级评估比如是不是正常用户？？？？是不是正常手机？？？是不是正常操作流程？？？防攻击？？？那可以加 web 防火墙 可以提高自己 router 容错率防刷推广安装量？？？加溯源 加留存 加异常打点 建数据模型观察\n\nicyalalassl pinning (也就是客户端内置证书) 来防止初级的抓包参数签名+客户端防逆向服务端风控，这是最主要的根据我待过的几个公司的经验，就算大厂也基本就是这些了整体来说就是增加成本降低风险，完全避免是不可能\n\n客户端的挣扎有证书就可以抓包。\nRoot后在任何API版本都可以装任何证书。\nAndroid N（API 24）及之后，应用才可以强制只信任系统证书。之前可以不Root装用户证书。\n据说iPhone装证书很容易。\n搬起石头砸自己的脚的办法：\n\n禁止代理 connection = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY)\n\n容易绕过（路由器抓包、开热点抓包）\n谁还用HttpURLConnection呀，不适合现代应用\n\n\n检测Root\n\n容易绕过\n可能检测错误\n牺牲无辜的Root用户的体验\n\n\n自定义证书、SSL Pinning\n\nAndroid N及之后才可以强制证书\n复杂\n\n\n\n保活\n安卓 MQTT 客户端如何保证 Service 一直运行在后台？\n\n终极方案：\n\n成为系统应用\n成为国民应用，厂商会主动增加白名单\n使用FCM（不适用于中国大陆）\n\n现在已经没有更多奇技淫巧了。虽然一直有人声称有黑科技，但从未亲眼见过。\nForeground Service + Wake Lock是普通应用唯二能做的。此外可以多接入一些推送。\n最后，也是最重要的一步，引导用户设置应用白名单，这样基本可以确保正常使用。\n个人开发者 海外收款\n个人开发者如何进行海外收款？\n人在国内，钱在国外，如何消费？\n\nTL;DR: 需要八仙过海各自踩坑\n有公司专人来解决这个问题最好了：\n\n深圳注册公司的坑，一些经验分享（视频和文档）\n公司注册下来了，分享一下费用、流程以及遇到的坑\n\n","categories":["Android"]},{"title":"Android上一个简单的Feature Flag实现","url":"/2020/04/21/android-feature-flags/","content":"起因是看了Jeroen Mols大佬的Feature Flags系列，深受启发。在看了代码后，萌生了写一个适合自己的Feature Flag框架。现在整出来了，但发现使用场景有点局限😂，所以把代码丢在这里以备不时之需。\n\n\n我个人的需求没原文中那么复杂，只需要一个可以在代码里手动调整的开关，一个可以在运行时进行修改的面板，同时要让R8把未使用的所有代码剔除。\n首先是可以在代码里手动调整的开关，用buildConfigField：\nandroid &#123;    buildTypes &#123;        debug &#123;            buildConfigField &quot;boolean&quot;, &quot;FEATURE_FLAG&quot;, &quot;Boolean.parseBoolean(\\&quot;true\\&quot;)&quot;        &#125;        release &#123;            buildConfigField &quot;boolean&quot;, &quot;FEATURE_FLAG&quot;, &quot;false&quot;        &#125;    &#125;&#125;\n\n\n&quot;Boolean.parseBoolean(\\&quot;true\\&quot;)&quot;确保IDE不会警告，就像BuildConfig.DEBUG一样。\n\n整个框架，抄了就走：\nenum class Feature(    val key: String,    val title: String,    val description: String,    val default: Boolean = true) &#123;    Log(        key = &quot;feature_log&quot;,        title = &quot;Log&quot;,        description = &quot;All log to console&quot;    ),    Network(        key = &quot;feature_network&quot;,        title = &quot;Network&quot;,        description = &quot;Inspect network requests&quot;    )&#125;object FeatureFlagManager &#123;    private lateinit var sharedPreferences: SharedPreferences    fun init(context: Context) &#123;        if (!BuildConfig.FEATURE_FLAG) return        sharedPreferences = context.safeSharedPreference    &#125;    /**     * If we pass a value directly, this method won&#x27;t get removed by R8.     * Passing a lambda does the job.     * I learn this at https://youtu.be/MYQWtNG2so8?t=362     */    fun isFeatureEnabled(f: () -&gt; Feature): Boolean &#123;        if (!BuildConfig.FEATURE_FLAG) return false        return f.invoke().enabled    &#125;    fun manageFeatures(context: Context) &#123;        if (!BuildConfig.FEATURE_FLAG) return        val features = Feature.values()        MaterialAlertDialogBuilder(context)            .setCancelable(false)            .setTitle(&quot;Feature Flag Manager&quot;)            .setAdapter(                object : BaseAdapter() &#123;                    override fun getCount(): Int = features.size                    override fun getItem(position: Int): Any = features[position]                    override fun getItemId(position: Int): Long =                        features[position].ordinal.toLong()                    override fun getView(                        position: Int,                        convertView: View?,                        parent: ViewGroup                    ): View &#123;                        val view = convertView ?: LayoutInflater.from(context)                            .inflate(R.layout.list_item_feature_flag, parent, false)                        val layout = view.findViewById&lt;ListItemWithLayout&gt;(R.id.listItemFeatureFlag)                        val feature = features[position]                        layout.listItem.run &#123;                            setPrimaryText(feature.title)                            setSecondaryText(feature.description)                        &#125;                        layout.getLayoutView&lt;CompoundButton&gt;().run &#123;                            setOnCheckedChangeListener(null)                            isChecked = feature.enabled                            setOnCheckedChangeListener &#123; buttonView, isChecked -&gt;                                feature.enabled = isChecked                                buttonView.indefiniteSnackbar(                                    message = &quot;Restart the app&quot;,                                    actionText = &quot;Now&quot;,                                    action = &#123;                                        ProcessPhoenix.triggerRebirth(context)                                    &#125;                                )                            &#125;                        &#125;                        return view                    &#125;                &#125;,                null            )            .setPositiveButton(android.R.string.ok, null)            .setNegativeButton(android.R.string.cancel, null)            .show()    &#125;    private var Feature.enabled        get() = sharedPreferences.getBoolean(key, default)        set(value) &#123;            sharedPreferences.storeBoolean(key, value)        &#125;&#125;\n\n使用：\nFeatureFlagManager.init(this)if (FeatureFlagManager.isFeatureEnabled &#123; Feature.Log &#125;) &#123;    Timber.plant(Timber.DebugTree())&#125;\n\n运作原理：\n\nisFeatureEnabled\n/**    * If we pass a value directly, this method won&#x27;t get removed by R8.    * Passing a lambda does the job.    * I learn this at https://youtu.be/MYQWtNG2so8?t=362    */fun isFeatureEnabled(f: () -&gt; Feature): Boolean &#123;    if (!BuildConfig.FEATURE_FLAG) return false    return f.invoke().enabled&#125;\n\n顾名思义，传Lambda而不是直接传Feature确保R8可以在这段代码没被使用时移除掉它，不然Feature会留在最终的APK里。\n担心性能问题？\n\n我没做Benchkmark，所以不考虑优化。\n我寻思以大部分应用的水平，这个Lambda根本不在瓶颈上。\n请信任智能的R8，人家比咱上心，也比咱厉害，也许人家已经搞定了。\nRomain Guy大佬怎么做，我就怎么做！\n\n\nsetAdapter\n之所以使用AlertDialog的setAdapter而不是自定义View，是因为这样可以让列表滚动时在顶端和底端有一个分割线，我挺喜欢这个设计，但缺点就是要处理ListView😢\n\nListView的每个条目的命名R.layout.list_item_feature_flag\n我之前用的是R.layout.item_feature_flag，但发现R8在把整个Feature移除后死活不把这个文件处理掉，查看resources.txt并研究后才发现，所有以item开头的资源，都不会被处理（当然还有其它各种开头，具体在这里）。修改为list开头后就好了，虽然文件还在，但里面的内容已经没了。\n另一种方法是根据官方文档底部的方法来确保这些文件被移除。我懒，所以没试这种方法。\n\ngetView绑定\n ListItemWithLayout就是一个CompoundButton配一个TextView，不稀奇。包括其他的一些方法，都是简单包装了一下，顾名思义。\n\nProcessPhoenix.triggerRebirth(context)\n 我这里用ProcessPhoenix来强制重启，但它有点Bug，需要你在启动的Activity加一个category：&lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;。\n 我也找了一下chromium是怎么重启的，发现人家使用JNI重启进程，我寻思有没有谁来打包成一个库呀？\n\n\n","categories":["Android"]},{"title":"Android故障艺术","url":"/2019/06/05/android-glitch/","content":"2020年10月16日更新：增加了更多资料\nGlitch art (故障艺术)，第一见的时候被吓到了，但之后越看越上瘾。\n这篇笔记记录怎么在Andorid上用代码实现这玩意儿。\n\n\n不停抖动View最简单的方案，通过叠加很多View，然后让它们各自向各个方向一直移动，就可以创建出类似于某音Logo的效果。\n现成的：Android-Glitch-Text-Effect。\n随机修改JPEG这个也简单。aLibGlitch就是这么做的。因为JPEG的压缩算法，只需要简单地替换一些bit，就可以让图片崩坏地很厉害。\nSlideToGlitch是另外一个有类似算法的项目。受到了jpg-glitch这个web项目的启发。\n这个可以作为应用内的一个转场动画，如果不担心被吓到的用户打差评的话。\n对画布进行各种变换在 https://github.com/chemickypes/Glitchy/blob/master/glitch/src/main/java/me/bemind/glitch/Glitcher.kt 考古到了几个变换Canvas的方法。没什么特殊的地方，就是发挥奇思妙想对Canvas进行各种修改。\n\n  \n  这个项目的代码是真的看得我头大。\n\n\n对像素点进行各种变化在 https://github.com/g-whiz/pxSort 考古到了一些操作像素点的方法。应该是有数学公式之类在背后支撑的，但无奈它产出的效果不合我意，就懒得找了。注意各个效果的参数是在assets里的数据库里的。\nOpenGL最近发现了高品质后处理：十种故障艺术(Glitch Art)算法的总结与实现，是针对Unity的各种故障效果，是通过OpenGL实现的。Android也支持OpenGL，懂OpenGL的可以手动把代码复制修改后使用。拿最简单的RGB Split Glitch来说，在搭配android-gpuimage后，只需要改几个名称就可以放到应用里了。\n","categories":["Android","Notes"]},{"title":"更新Android依赖的潜在风险","url":"/2025/08/23/android-how-to-update-dependencies/","content":"最近看了一篇文章The Hidden Dangers of AGP Version Upgrades: A Developer’s Nightmare，其中提到了一个更新AGP导致的崩溃。碰巧我也解决过此问题，并对此类问题颇有心得。\n\n\n类似问题有很多我在Is the dependency safe to upgrade?中记录了常用的Android开发依赖的各个版本的可用状态。比如Gradle 8.13会在有时Sync失败、AGP 8.10.1推荐使用的K2无法提示Deprecated的变量、datastore 1.1.2有极端崩溃等。\n我是在升级到8.1.4(Giraffe)时，遇到了类似文中提到的NoClassDefFoundError崩溃。原因是R8遇到一些只有带参数的构造方法被使用的类时，会删掉它们的无参数的空构造方法。由于我遇到的崩溃是和反射有关，那么添加Proguard规则可以解决问题。而文中的堆栈信息似乎还包括Paging，其崩溃的根源更复杂了。对于Paging 3，我则有更多怨言。\n解决方法在这里因为我的日常工作涉及维护多个项目，那么更新依赖就要非常谨慎，否则就要在某个依赖出问题时，面临频繁更新所有项目的重复任务。\n其实可以毫无追求地将一个依赖版本用到老，毕竟啥也不做，就不会犯错。但为了使用更好的技术，比如最近新增加的Jetpack Compose dropShadow，又不能不更新依赖。\n可惜任何方法只能减小依赖出问题的影响。\n时间选择要谨慎我选择了在某个项目有重要功能的一个版本来更新，这样QA可以更认真全面地测试应用。\n版本选择不省心比如最近Android Studio要每个月都发新版本了，这意味着虽然问题可以更快地被修复，但犯错的成本也降低了。\n根据个人观察：\n\nAndroidX的版本如果在发布40天后依然没有修复版本，那基本是最终版本了。\nAndroid Studio和Gradle在新的大版本发布后，上一个大版本就算是最终版本了。\n\n最终版本依然可能有问题，但解决方法通常比较容易找得到，毕竟隔了那么久。\n在更新开始时，首先要认真阅读更新日志。比如我在开发者论坛中，常常会遇到很多开发者抱怨一些早已在更新日志中警告过的问题。\n版本里有脏东西在更新过程中，要使用dependency-guard确保更新的依赖所依赖的版本也是没问题的。比如一些版本经常会在小版本中，偷偷地升级Target API或Kotlin版本。\n更新之后不停息在更新上线后，要持续监控至少一周时间。在确保没问题后，可以等待其他项目有中等程度修改，再更新这些依赖。\n以上。\n","categories":["Android"]},{"title":"Android Internal 笔记","url":"/2018/05/12/android-internal/","content":"之前不知在哪里看到Android开发者都应该了解一下Android Internal，就截了图记了下来。现在有时间了，就找了一些Android Internal的内容，记了些笔记。相应的资料也列在了各个章节末尾。\n不是很全，不保证全对，不保证维护\n基于Linux内核的AndroidAndroid之所以享誉盛名，是因为在Linux内核基础上已改的面目全非。。就是为了适应手机那小内存、差CPU、续航是问题等的特点。Android不是一个Linux的发行版。\n\n\n\n优化后的OOM(Out of Memory) Killer\n  给每个进程加了oom_adj的优先值，把不同进程分到不同的级别中(Foreground Processes, Visible Processes, Service Process, Background Process)，内存不够时先杀值大（优先级低）的进程。\n\nWakeLocks\n  保活CPU(+ 屏幕)的工具。本来是让应用更好地工作，结果成了流氓应用的工具。现在这玩意儿很多时候也不好使了。\n\ninit和zygote\n  用来启动各种deamon，比如adbd, logd, zygote。\n  zygote会经常在日志底部中出现。默认的fork()速度慢，所以它是一个快捷进程+deamon，用于快速启动应用。\n\nBinder IPC\n  处于安全考虑，每个应用被对待成Linux不同不用户，拥有不同的uid。\n  IPC(Inter-Process Communication)：跨进程通信。\n  例如Intent通信，可以在不同组件中异步交换数据；又如ContentProvider，可以在不同应用中交换数据。它们都默认在MainThread的Looper中运行。\n\nManagers\n  系统服务，管理系统资源\n\nWindowManager：负责窗口、动画等。\nPackageManager：查询Manifest.xml，解析包名。\nActivityManager：负责lifecycle、各种组件、电量、configuration changes。（根据个人经验，冻结应用也涉及它）创建Stack，里面放Task，里面放Activity的索引。每个应用在单独的线程中。\n\n\n\n参考：\n\nAndroid Internals For Developers : Part I\nAndroid Internals for Developers: Part II\nAndroid Internals\n\nHandler这是Android自己的消息传递机制。不同线程通过和Handler交流、传递信息。日常开发中主要用于异步。使用不当会造成严重的内存泄漏。\n每一个Handler都一个Looper和Message Queue。在创建Handler是有两个构造函数，无参的是新建一个在当前线程的Handler，有参的指定一个Looper。而Looper可以操作Message Queue，因此是必须的。不同Handler可以共享一个Looper，它们的Message Queue跟随Looper，也共享一个。\n\nMessage\n  数据的包装类，被发送给Message Queue。Message从消息池（最大有50个）中取出再使用，所以就会有\n  mHandler.obtainMessage(MSG_SHOW_IMAGE, mBitmap).sendToTarget();\n  每一个Message都有一个target，类型是Handler。上面一行默认把会把target设置为自己。\n\nMessage Queue\n  链表，存放需要实现的Message。根据SystemClock.uptimeMillis()和时间戳来判断该执行什么。\n  Android也用几个自用的Handler，也是使用了Main Looper:\n\nChoreographer：处理垂直同步和帧刷新。好像有个Library就是用这个显示当前屏幕的帧数。\nViewRoot: 处理输入、窗口事件、Configuration Changes等\nInputMethodManager: 处理键盘输入。LeakCanary经常提示我它泄露了。。\n等等等等\n\n\nLooper\n  Thread默认运行完就结束，想要让线程一直留着，等着以后接着用，就需要Looper来“保活”。  它也负责从Message Queue中取消息，指派给Handler。一个线程一个Looper一个Message Queue若干Handler。\n  Looper.prepare(): 确保当前线程和Looper已配对。\n  Looper.loop(): 开始处理Message Queue中的Message。实现里有个for (;;) &#123;的无限循环。稍微研究了一下，没有消息时，非常粗暴地使用CPU一直等待。\n  为了方便，异步时不手动Looper + 线程，而用更方便的HandlerThread，继承自Thread，处理了Looper的工作。\n  private final Handler handler;private final HandlerThread handlerThread;@Overrideprotected void onCreate(@Nullable Bundle savedInstanceState) &#123;    super.onCreate();    handlerThread = new HandlerThread(&quot;HandlerDemo&quot;);    handlerThread.start();    handler = new CustomHandler(handlerThread.getLooper());&#125;@Overrideprotected void onDestroy() &#123;    super.onDestroy();    handlerThread.quit();&#125;\n\n参考:\n\nAndroid Handler Internals\nUnderstanding Activity.runOnUiThread()\n\nStorage储存Internal Storage 内部储存是在应用私有的一个储存空间，存放了SharedPreferences、数据库等文件。其他应用和用户在没有root和找到漏洞前无法访问。在实现上，就是分配各每个应用的一个文件夹。\n位置在/data/data/package-name/(不一定总是这个路径，经常变)。\nfiles文件夹：通过Context.getFilesDir()来获取路径，所以创建文件时的姿势应为val f = File(getFilesDir(), &quot;foo.txt&quot;)\nAndroid 3.0及以后，内部储存的空间大大增加。几乎所有不需要让用户和其他应用使用的数据，都应该放在内部储存中。\n要想共享内部储存中的数据，使用FileProvider和ContentProvider，给每个Uri都赋予权限，安全且统一。\nExternal Storage 外部储存位于/sdcard/(不一定总是这个路径，经常变)下的内容，文件浏览中看到的东西。也包括SD卡中的内容。但现在很多手机都不支持SD卡了，自带的管够。\n读写需要权限。正常情况下用Environment.getExternalStorageDirectory()访问。但多数情况下应使用Context.getExternalFilesDir()来获取/sdcard/Android/data/package-name/files/下应用各自的位置。\n参考\n\nThe Storage Situation: Internal Storage\nThe Storage Situation: External Storage\n\nProguard流程：\n\nRead config(proguard-rules.pro)\nFinding Seeds =&gt; seeds.txt =&gt; Entry points\nShrinking =&gt; usage.txt =&gt; Removed codes\nObfuscation =&gt; mapping.txt\nDump =&gt; dump.txt\nWrite Classes =&gt; .class\n\naapt会根据Manifest给应用项目自动生成各种各样的keep rules。\n参考：\n\nHow Proguard Works\nEffective ProGuard keep rules for smaller applications (Google I/O ‘18)\n\nMemory分割为Pages，每页4KB。类型有Used Pages, Cached Pages, Free Pages.\n减小内存使用的方法：\n\n使用Memory Profile, 查看java heap, app heap\n减小APK大小\n\n参考：\n\nUnderstanding Android memory usage (Google I/O ‘18)\n\n","categories":["Android"]},{"title":"Jetpack Compose Stability白话版","url":"/2024/06/24/android-jetpack-compose-stability/","content":"官方文档一边说不要过度优化，一边花了长长长的篇幅讲性能优化。\n但优秀的开发者在点点滴滴中优化性能，而不是等到性能真出问题时再挠头。本文记录如何写Composable来得到最好的Stability。\nTL;DR\n书写Composable或用于Composable参数的类时，优先考虑Primitive类型\n把Android SDK、第三方依赖、其他Module的类放到Stability configuration file中\n\n\n\n总是优先考虑Primitive类型enum class Tab &#123; Home, Profile &#125;@Composableprivate fun ScreenPrimitive(    int: Int,    float: Float,    string: String,    tab: Tab,    lambda: () -&gt; Unit,    modifier: Modifier = Modifier,) &#123;    Text(        text = &quot;$int $float $string $tab&quot;,        modifier = modifier.clickable(onClick = lambda),    )&#125;\n\nrestartable skippable scheme(&quot;[androidx.compose.ui.UiComposable]&quot;) fun ScreenPrimitive(  stable int: Int  stable float: Float  stable string: String  stable tab: Tab  stable lambda: Function0&lt;Unit&gt;  stable modifier: Modifier? = @static Companion)\n\n除了Primitive类型，字符串、枚举和Lambda也是没问题的，因为Jetpack Compose Compiler确定在创建它们后，内容无法变化。这一句话也是Stability的核心，并将在之后得到更多解释。\n如果能用一些Primitive类型书写Composable是最好的，因为不仅Stable，还提高了复用度，但有时我们需要一个类，比如参数太多、需要特定功能、要一定抽象等，那么情况就不一样了。\n同一Module的类data class Screen(    val title: String,    val time: Long,    val tab: Tab,)@Composableprivate fun ScreenInternalClass(    screen: Screen,    modifier: Modifier = Modifier,) &#123;    Text(        text = screen.run &#123; &quot;$title $time $tab&quot; &#125;,        modifier = modifier,    )&#125;\n\nstable class Screen &#123;  stable val title: String  stable val time: Long  stable val tab: Tab  &lt;runtime stability&gt; = Stable&#125;restartable skippable scheme(&quot;[androidx.compose.ui.UiComposable]&quot;) fun ScreenInternalClass(  stable screen: Screen  stable modifier: Modifier? = @static Companion)\n\n如果用到的类和Composable在同一个Module，且这个类的内容符合上述的全是Primitive类型，它也是没问题的。\nJetpack Compose之所以能得出这个结论，是因为Screen所在Module启用了Jetpack Compose Compiler。因为当前Module要用Jetpack Compose，所以Compiler早已启用了，于是从结果上来看，同一Module的只带Primitive类型的类是没问题的。这一点在下一点更为重要。\n不同Module的类// 在一个新建的Module中data class ScreenFromLibrary(    val title: String,    val time: Long,)// 在一个另外的Module中@Composableprivate fun ScreenExternalClass(    screen: ScreenFromLibrary,    modifier: Modifier = Modifier,) &#123;    Text(        text = screen.run &#123; &quot;$title $time&quot; &#125;,        modifier = modifier,    )&#125;\n\nrestartable scheme(&quot;[androidx.compose.ui.UiComposable]&quot;) fun ScreenExternalClass(  unstable screen: ScreenFromLibrary  stable modifier: Modifier? = @static Companion)\n\n这时有问题了。因为Jetpack Compose依赖于Jetpack Compose Compiler来推测一个类的Stability，而新建的Module没有启用Compiler，于是就unstable了。\n解决方法有几个：\n\n使用Stability configuration file\n在新建的Module中配置好Jetpack Compose及其依赖，让其检测各种类型。缺点是要污染新建的Module的依赖。\n虽然也有第三方库来只引入少量依赖，但1. 第三方依赖越少越好。2. 大依赖小依赖都是污染。\n\n\n\n依赖中的类当参数来自于Android SDK或某个依赖时，又出问题了。\n@Composableprivate fun ScreenSharedPreferences(    sharedPreferences: SharedPreferences,    modifier: Modifier = Modifier,) &#123;    Text(        text = sharedPreferences.getInt(&quot;key&quot;, -1).toString(),        modifier = modifier,    )&#125;\n\nrestartable scheme(&quot;[androidx.compose.ui.UiComposable]&quot;) fun ScreenSharedPreferences(  unstable sharedPreferences: SharedPreferences  stable modifier: Modifier? = @static Companion)\n\n因为Jetpack Compose Compiler无法触及SharedPreferences所处的位置，Android SDK，所以其无法确定Stability。解决方法有三个：\n配置文件和上文一样的使用Stability configuration file。\n二次包装@Immutabledata class SharedPreferencesWrapper(    val sharedPreferences: SharedPreferences,)@Composableprivate fun ScreenSharedPreferencesWrapper(    sharedPreferencesWrapper: SharedPreferencesWrapper,    modifier: Modifier = Modifier,) &#123;    Text(        text = sharedPreferencesWrapper.sharedPreferences.getInt(&quot;key&quot;, -1).toString(),        modifier = modifier,    )&#125;\n\nstable class SharedPreferencesWrapper &#123;  unstable val sharedPreferences: SharedPreferences&#125;restartable skippable scheme(&quot;[androidx.compose.ui.UiComposable]&quot;) fun ScreenSharedPreferencesWrapper(  stable sharedPreferencesWrapper: SharedPreferencesWrapper  stable modifier: Modifier? = @static Companion)\n\n@Immutable告诉Compiler：凡是跟我混的，都别管，懂了没！\n打开Strong Skipping ModeJetpack Compose面对Stable类型，通过==来决定是否触发Recomposition，面对Unstable类型，总是触发Recomposition。打开Strong skipping mode后，面对Unstable类型，使用===来决定是否触发Recomposition。因为SharedPreferences通常是Singleton，那么这个方法可以避免多余的Recomposition。\n但是1. 这并不会让开发者理解性能优化。2. 该选项会在未来默认打开。\nList@Composableprivate fun ScreenList(    list: List&lt;Int&gt;,    modifier: Modifier = Modifier,) &#123;    Text(        text = list.size.toString(),        modifier = modifier,    )&#125;\n\nrestartable scheme(&quot;[androidx.compose.ui.UiComposable]&quot;) fun ScreenList(  unstable list: List&lt;Int&gt;  stable modifier: Modifier? = @static Companion)\n\n您猜怎么着，Unstable！原因是List的本质上可能是个MutableList（val list: List&lt;Int&gt; = mutableListOf()），属于创建后内容可以变化的类型。\n解决方法有三个：\n又是配置文件同上。\n又是二次包装同上。\nImmutable collectionsJetpack Compose Compiler给 Immutable collections 偷偷开了绿灯。\n但要注意列表中的类ImmutableList&lt;StableClass&gt;也要Stable。\n@Stable虽然是很重要的注释，会在类或接口中包含mutableStateOf时用到，但是我倾向于让Jetpack Compose只完成将数据转换为界面的任务。当不得不使用这个注释时，通常意味着UI代码职责不清晰，这才是更紧急的问题。\n因此出于个人偏好，会避免使用该注释，同时这里也将不再讨论。\n总结见开头。\n","categories":["Android"]},{"title":"Android依赖笔记","url":"/2022/06/02/android-library-dependency/","content":"整理自The definitive guide to Android library development by Jeroen Mols, Plaid EN\n\n\n\n相比JAR（代码压缩包？），AAR还有Resources和Manifest，但二者都没有签名且不包括依赖。它们各自所需的依赖定义于pom文件中。\n\n如果所需的依赖是本地文件，则需要方法来绕过限制：\n\n把依赖发布到Maven\nFAR AAR插件\n把依赖内容复制到Library中\n\n\n限制多个依赖间的内部类\n\npackage com.example.internal.database\n混淆为package com.example.internal.a\n把依赖内容复制到Library中\n\n\nTransitive Dependency及在pom文件中定义的依赖\n  Grdle会默认选择所有版本最高的依赖。调整方法有\n\n忽略依赖的Transitive Dependency\n implementation (&#x27;com.example:library:1.0.0&#x27;) &#123;    exclude group: &#x27;com.squareup.okhttp3&#x27;, module: &#x27;okhttp&#x27;&#125;\n全局指定依赖版本\n configurations.all &#123;    resolutionStrategy &#123;        force &#x27;com.squareup.okhttp3:okhttp:3.12.0&#x27;    &#125;&#125;\n\n  这些方法可能会造成编译或运行时失败，尽量避免它们。\n\n开发Library时，使用稳定版本（几个月到一两年）的依赖，最好不要更新。\n\n在res/values/public.xml声明后，只是Android Studio不再自动补全了。\n  要用：\n  android &#123;    resourcePrefix &#x27;mylib_&#x27;&#125;\n\n  来限定名称空间。不过只是让Android Studio警告一下。\n\n设置为必须声明Class Visibility\n  android &#123;    kotlinOptions &#123;        freeCompilerArgs += &#x27;-Xexplicit-api=strict&#x27;    &#125;&#125;\n\n","categories":["Android"]},{"title":"使用json-server模拟后台","url":"/2019/10/02/android-mock-server/","content":"笔记。\n\n\njson-server\n\nyarn global add json-server\n\njson-server --watch db.json --port 80 --host $ip --routes routes.json\n db.json: 数据文件\n $ip: 本地IP，好让手机连接。一般是机器的IP。\n routes.json: 似乎默认只能单路径，使用这个支持子路径\n\n\n","categories":["Android","Notes"]},{"title":"Android多进程开发笔记","url":"/2024/06/23/android-multiprocessing/","content":"RT\n\n\n\n把需要长期后台运行的服务放到单独的进程中来降低被杀几率\n\n通过android:process=&quot;:process&quot;指定运行于新的进程\n\n自定义的Application（android:name=&quot;.App&quot;）会被每个进程运行一次\n应在自定义的Application中提前考虑多进程使用：\n\n在Application判断进程名，按需初始化组件\nIs there a way to get current process name in Android\n\n\n将组件放到androidx.startup中并手动初始化\n\n\nSharedPreference无法跨进程使用，因此Use DataStore in multi-process code\n\n\n","categories":["Android"]},{"title":"简单的Android软键盘动画","url":"/2021/05/28/android-naive-keyboard-animation/","content":"随着androidx.core1.5.0的发布，我终于搞明白全屏、WindowInsets这些问题了。\n2021年7月7日 更新收起键盘时闪烁问题的临时解决办法\n\n\n\n设置windowSoftInputMode\n 给Activity增加 android:windowSoftInputMode=&quot;adjustResize&quot;\n 根据官方文档：\n\nTo ensure the best behavior for your app, you should specify how you’d like the system to display your UI in the remaining space.\n\n 而且不同的系统版本，默认的行为不同，所以这里加一个确保行为一致。\n 根据官方文档，还可以加一个stateHidden来避免在一些系统版本上一打开Activity，软键盘就弹出的问题。\n\n全屏/让内容显示在系统界面之后\n WindowCompat.setDecorFitsSystemWindows(window, false)\n\n透明状态栏和导航栏\n window.run &#123;    statusBarColor = Color.TRANSPARENT    navigationBarColor = Color.TRANSPARENT&#125;\n\n 更完美的颜色参照Gesture Navigation: going edge-to-edge (I)。\n\n避免View和系统界面重叠\n 如果顶部是AppBarLayout，就增加一个android:fitsSystemWindows=&quot;true&quot;来让它自己处理顶部。底部也可以用默认处理，但通常效果不理想。\n 如果是普通View：\n ViewCompat.setOnApplyWindowInsetsListener(binding.root) &#123; v, insets -&gt;    val bottomInsets = insets.getInsets(        WindowInsetsCompat.Type.systemBars() or WindowInsetsCompat.Type.ime()    )    v.updatePadding(bottom = bottomInsets.bottom)    val keyboardShown = insets.isVisible(WindowInsetsCompat.Type.ime())    insets&#125;\n\n\n这里也是检测键盘是否弹出的地方。\n在键盘弹出时，导航栏高度算在软键盘高度的一部分中的。\n在下一步增加动画前，在这里先确保应用可以正常显示。\n\n\n增加动画\n ViewCompat.setWindowInsetsAnimationCallback(    binding.root,    object : WindowInsetsAnimationCompat.Callback(DISPATCH_MODE_STOP) &#123;        override fun onProgress(            insets: WindowInsetsCompat,            runningAnimations: MutableList&lt;WindowInsetsAnimationCompat&gt;        ): WindowInsetsCompat &#123;            val bottomInsets = insets.getInsets(                WindowInsetsCompat.Type.ime() or                    WindowInsetsCompat.Type.systemBars()            )            binding.root.updatePadding(bottom = bottomInsets.bottom)            return insets        &#125;    &#125;)\n\n 上述方法有一个问题，在收起键盘时，会闪烁一下。原因似乎是在onPrepare和onStart之间的，使用动画结束状态调用OnApplyWindowInsetsListener出了问题，但官方文档中提到了这之间是不会发生Layout的。另外根据官方示例使用translationY的话，是没有问题的。因此原因尚不明了。\n 现在的一个临时解决方案是在，onPrepare中开启一个Flag，在onEnd中关闭，然后在OnApplyWindowInsetsListener中，如果Flag开启，就不应用Padding。\n\n其他考虑\n\n如果要显示Snackbar，需要额外测试。Padding可能不是最好的方法，可能需要Margin或额外的Space View。\n显示软键盘，似乎Showing the Android Keyboard Reliably比WindowInsetsController处理的情况更多且更好用。关闭的话，WindowInsetsController就可以。\n去开发者选项中把动画速度调成10倍，不然根本看不清楚效果。\n\n\n\n","categories":["Android"]},{"title":"一些关于Dagger2及其未来的思考","url":"/2020/01/01/android-oh-my-dagger/","content":"一切都始于An Opinionated Guide to Dependency Injection on Android (Android Dev Summit ‘19)。好消息是Google终于提供了官方的DI教程，而且质量颇高。坏消息是dagger-android要亡了。\n\n\n首先是官方教程，是我见过最通俗易懂、深入浅出的教程了，没啥问题。但它配套的Codelab手动管理了一个Scope和Component，以此来在多个Activity中注入相同的对象。这种做法一开始理解起来有点复杂，但用Dagger解决此类问题的方法也都与此大同小异吧。\n我个人没遇到过此类问题。因为像是用户状态这类东西，一直都是放到一个Singleton里，也不需要担心是不是多个Activity。其他地方能用Navigation就用，配合ViewModel自带的Lifecycle管理，通常不需要专门用Scope来管理对象。\n这个问题其实还有一个解决方法，就是用自定义ViewModel：Vita。它的代码可能要改一改才能适合自己用，但原理就是根据Activity的Lifecycle Events来生成ViewModel。\n但这暴露了一个问题，我用Dagger经验不丰富， Dagger依然学起来难，用起来繁琐，这也跟视频后半部分提到的一样。为此Dagger团队正在发明新的API来简化Android上依赖注入，他们画的那些饼看起来也挺香的。但是，一想到现有的dagger代码和近期新项目不得不用dagger写，而这些代码在未来都要重构，我就头大。其实完全可以不动它们\n这里给dagger-android判了死刑: We are stopping its development. We are not adding any more features to do that.。不过继续用也没啥问题，现在的又没有deprected。但dagger-android的局限也的确比较大，而它现在也只做到了能让大伙儿少写些类似于Subcomponent的胶水代码。\n前几天在V2EX上看大伙儿讨论为啥程序员容易被淘汰，其中一个原因就是自己会的技术很快就过时了。想想也是，要是新的dagger-android一出，也没人关心你曾用dagger用得多么厉害吧。这让我想起了我曾经不知道Dagger需要Build Project来生成代码，结果死活找不到DaggerAppComponent，而现在的官方文档里把Make Project专门用框框标出来，新手一眼就明白了。\n死鱼安乐啊死鱼安乐。\n","categories":["Android"]},{"title":"Android OpenGL学习笔记","url":"/2023/01/02/android-opengl-basics/","content":"OpenGL ES 2.0 for Android 学习笔记。\n不过发现OpenGL不靠笔记，全靠内力，所以后期复杂的内容就记不过来了。\n\n\nGetting Started现代GPU更新了算法，每帧清屏重新绘制比在上一帧基础上修改要更效率、更可靠。\nSurfaceView是个Surface，屏幕上单独挖了个洞来高效率显示；TextureView是个View，继承了SurfaceView的功能且可以当成View来操作，代价是性能牺牲。\nGLSurfaceView.Renderer中的代码会在子线程执行。主线程到子线程：GLSurfaceView.queueEvent。\nglSurfaceView.setEGLContextClientVersion(2)// Sometimes necessary// glSurfaceView.setEGLConfigChooser(8, 8, 8, 8, 16, 0)glSurfaceView.setRenderer(AirHockeyRenderer(this))glSurfaceView.withLifecycleOwner(this)\n\noverride fun onSurfaceCreated(gl: GL10?, config: EGLConfig?) &#123;    GLES20.glClearColor(1f, 0f, 0f, 0f) // Alpha is disabled by default&#125;override fun onSurfaceChanged(gl: GL10?, width: Int, height: Int) &#123;    GLES20.glViewport(0, 0, width, height)&#125;override fun onDrawFrame(gl: GL10?) &#123;    // We must draw something, even if it’s only to clear the screen.    // If we don’t draw anything, we’ll probably get a bad flickering effect.    // This will wipe out all colors on the screen and fill the screen with the color    // previously defined by our call to glClearColor().    GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT)&#125;\n\nDefining Vertices and ShadersVertex, Vertices: 点。包含位置、颜色等信息。\n用多个三角形去近似任意图形。描述时使用逆时针（倒带）方向可以优化性能。\n使用ByteBuffer.allocateDirect定义不被垃圾回收影响的Native Memory。\nprivate val vertexData: FloatBuffer = ByteBuffer    .allocateDirect(tableVerticesWithTriangles.size * BYTES_PER_FLOAT)    .order(ByteOrder.nativeOrder())    .asFloatBuffer()    .put(floatArray)\n\nShader: 渲染管线单元。\nShader使用GLSL（OpenGL’s shading language）\nVertex Shader每个点运行一次，得到最后的点。OpenGL生成点、线和三角形。\n坐标为(-1, 1), (-1, 1)。\n// Simple Vertex Shaderattribute vec4 a_Position;void main()&#123;    gl_Position = a_Position;    // gl_PointSize = 10.0;&#125;\n\nvec4: x, y, z, w 坐标\nattribute: 添加颜色信息，自带默认值（0, 0, 0, 1）。\n默认有着最高精度highp（见Fragment Shader精度介绍）。\nFragment Shader计算得到上述生成的点、线和三角形中每个像素点的颜色。Fragment相当于Pixel。\n// Simple Fragment Shaderprecision mediump float;uniform vec4 u_Color;void main()&#123;    gl_FragColor = u_Color;&#125;\n\nprecision mediump float;: 定义所有浮点数的精度。在lowp, mediump, highp中选择。\n无默认精度（未定义的行为？），必须手动定义。\n2023年1月13日更新：如果FragmentShader不定义精度，有的手机上会无法显示。\n最高精度旨在某些实现中未支持。\nint的默认精度是mediump。\nuniform: 保持不变直至手动修改。无默认值，需要手动指定。\nvec4: 这里是颜色RGBA。\nCompiling Shaders and Drawing to the Screen\n在onSurfaceCreated中获得两种Shader的String。\n\n编译两种Shader，得到对应的shaderObjectId(int)。\n\nOpenGL内部并不抛异常，只是返回特定的值或通过glGetError读取。\n\n\n把Shaders合成为Program，得到programObjectId。\n\n检测Program状态。\n\n使用Program。\n\n获取变量Attribute和Uniform的Location值。\n\n设置变量值\n 方法有很多，一些是：\n\nglVertexAttribPointer + glEnableVertexAttribArray设置Attribute值。\nglUniform4f设置Uniform值。\n\n\n绘制\n\nglDrawArrays\n\n\n\nAdding Color and ShadeGL_TRIANGLE_FAN: 一次画四个三角形。\n// New Vertex Shaderattribute vec4 a_Position;attribute vec4 a_Color;varying vec4 v_Color;void main()&#123;    v_Color = a_Color;    gl_Position = a_Position;    gl_PointSize = 10.0;&#125;\n\nvarying: 在一条线或三角形中，渐变颜色后，交给Fragment Shader。\n// New Fragment Shaderprecision mediump float;varying vec4 v_Color;void main()&#123;    gl_FragColor = v_Color;&#125;\n\n这样就不用手动设置Fragment Shader颜色了。\nAdjusting to the Screen’s Aspect Ratio线性代数、矩阵相乘！\n1 0 0 translateX     x     x + translateX0 1 0 translateY  x  y  =  y + translateY0 0 1 translateZ     z     z + translateZ0 0 0 1              1     1\n\n// New Vertex Shaderuniform mat4 u_Matrix;...void main()&#123;    ...    gl_Position = u_Matrix * a_Position;    ...&#125;\n\n使用Matrix.orthoM根据屏幕比例，缩放长边，使内容显示在中心的正方形中。\nEntering the Third Dimension坐标处理流程：\n\nClip Space\n 在Vertex Shader中的gl_Position首先被裁剪到[-w, w]的范围中。\n 此时的坐标也被称为Homogenous Coordinates。\n\nPerspective Division\n x, y, z = x / w, y / w, z / w\n w代表距离。距离越大，结果越小，结果越靠近原点，越像消失点。\n 此阶段结束后，所有坐标都在[-1, 1]。多个Homogenous Coordinates会对应一个Normalized device coordinates。\n w不为1时，(x, y, z)并不是实际坐标，(x / w, y / w, z / w)才是。\n\nViewport Transformation\n 和显示区域长宽相乘得到最终坐标Window coordinates。\n\n\n给坐标增加各种矩阵，实现3D模拟。\nAdding Detail with Textures之后书中的内容就复杂起来，记笔记也变得难了起来。\n","categories":["Android"]},{"title":"Android OpenGL Texture 坐标原点问题","url":"/2023/08/23/android-opengl-coordinates/","content":"在学习OpenGL ES 2.0 for Android时，其提到了OpenGL使用了传统的数学坐标系来定位位置，而在Texture的坐标时则含糊不清。而出来混，终于得还了。\nTL;DR: GLUtils.texImage2D会把传入的Bitmap上下翻转，让可以开发者可以使用左上角为原点的坐标。但实际上，OpenGL总是以左下角为原点的。\n\n\n1----2-    --    -3----4\n\n当上图为屏幕时，那么画满全屏Vertex的位置将为\n1: (-1,  1)2: ( 1,  1)3: (-1, -1)4: ( 1, -1)\n\n但当上图为Texture时，坐标该是如何呢？根据书中所言，原点为左上角，也就是\n1: ( 0,  0)2: ( 1,  0)3: ( 0,  1)4: ( 1,  1)\n\n和Android的绘制方向是一致的。在实际运行中，结果也是正确的。所以一直以来，我也以为Texture的坐标是从左上角开始的。\n在学习OpenGL后，我开始尝试android-gpuimage，但发现在使用GPUImageFilterGroup时，会随机出现上下颠倒的问题。为了找到该问题的原因，我是上下求索。翻遍了Issue区、认真阅读代码、问了很多遍ChatGPT、在搜索引擎中搜了很多关键字、根据滤镜数量找规律……都没能找到问题根源。\n在Issue区中找到一个Pull Request：Re-fix: Grouped filters with filterCount%2==0 are flipped，虽然在之后起到了大作用，但此时的我不仅看不明白其中的逻辑，也没能解决问题。\n最后，我终于想起了走投无路之计策：用中文搜索问题！因为中文互联网几乎已等于只能吃老本的内容农场，所以我很少考虑这个方法。虽然在过去的确帮到我几次，但由于在其中找资料非常困难，这个方法几乎被遗忘了。\n但是这次！我发现了Android OpenGL 纹理坐标原点位置！虽然实话实话说这篇文章还是有点难懂，但我找到了最关键的一句：\n\n在Android平台中，Bitmap绑定的2D纹理，是上下颠倒的， 可以按照在左上角处理\n\n经过几天或在清醒时或在睡梦中的思考后，我终于想明白了这个问题。\nandroid-gpuimage使用的是左上角坐标，这依赖于GLUtils.texImage2D的默认翻转。OpenGL总是使用左下角为原点，所以在默认翻转后，在FragmentShader中，Texture已经是上下颠倒的，这时再使用从左下角翻转到左上角的坐标绘制，又翻转了一次。一共了翻转了两次，等于没翻转，因此单个滤镜不会出错。\n但是这个逻辑依赖于Texture是翻转的这一假设。\n但GPUImageFilterGroup使用FrameBuffer实现，上一层的结果会作为下一层的Texture绘制到屏幕上，但是上一层的结果并不是翻转的，这与上述假设相矛盾，于是就在复杂处理中出现上下颠倒的奇怪问题。\n相比于不停地使用坐标来解决上下颠倒问题，不如取消GLUtils.texImage2D的默认翻转（把Bitmap传给它前翻转一下），总是使用左下角为原点的坐标来得实在。于是在使用之前的Pull RequestRe-fix: Grouped filters with filterCount%2==0 are flipped及其评论区的修改后，翻转解决了。\n但是GPUImageLookupFilter出错了。不过这个好解决，因为这个滤镜的原理是根据图片中某个像素点的颜色，一通计算后得到一个新的坐标，然后到LUT图中找颜色。这其中的那通计算是以左上角为原点的，也就是假设了LUT图是颠倒的。那么我们不取消LUT图Texture的GLUtils.texImage2D的默认翻转就可以了。\n关于中文搜索的沉思在这次的问题中，我没能用英文搜索找到任何GLUtils.texImage2D默认翻转的资料。反而是再一次被中文内容拯救了，这说明之后还是应该给中文搜索多一些机会。\n但中文搜索结果的处境依然不容乐观。对我来说，其更像是上午十点的古玩市场：剩下都大多是垃圾，而真正的宝贝需要高度的鉴别力。\n就拿那篇文章来说，在开发文章聚集地转型为地摊文学编辑部的简书上，只有可怜的四个赞。从文章底部划过数十篇编乎一般的小说后，有几条评论。第一条是一位读者以很不客气的语气指责文章有错。第二条是作者耐心地重复解释了文章的内容。第三条则是另一位读者同样很不客气地在没有给出任何原因的情况下批评文章造成了误解。\n虽说这篇文章的确有些难懂，但其中的道理是无误的。\n我也由此想到了我之所以几乎从不在中文社区解答问题，很大一部分也是因为不仅得不到正反馈，很多情况下还会得到负反馈吧。\n","categories":["Android"]},{"title":"Android OpenGL ES 2.0 的矩阵和坐标到底是怎么一回事儿？","url":"/2023/06/08/android-opengl-matrix/","content":"最近依然在研读OpenGL ES 2.0 for Android。在此记录有关Orthographic Matrix、Perspective Matrix、Perspective Divide、Homogeneous Coordinates等各种问答。\n理解粗浅，若有错误，还望指正。不过估计没人看这个网站吧。\n\n\n\nQ: 为什么OpenGL中的坐标在x、y、z之外还有一个w？\nA: 一个原因是3x3矩阵无法完成矩阵三维坐标的位移（同理，2x2矩阵无法完成二维坐标位移），所以给矩阵增加一维，右下角设置为1，其余增加的位置设置为0。这样完成位移后，再把增加的维度去掉，位移完成。在这里w总是1。即使不是1，也会用除法把它变为1，好让最后去掉它（这一步除法叫做Perspective Divide）。\n[x 0 0 0][0 y 0 0][0 0 z 0][0 0 0 w]\n\n增加维度的这种方法就是Homogeneous Coordinates。\n参考了The True Power of the Matrix (Transformations in Graphics) - Computerphile。\n另外一个原因涉及了三维空间在二维的投影，w会出现不为1的情况。之后讨论。\n\nQ: 为什么android.graphics.Matrix用9个Float，而不是和OpenGL一样用16个？\nA: android.graphics.Matrix主要处理2D图像，所以增加了新维度后，矩阵成为了3x3=9个Float。\n\nQ: 为什么andnroid.graphics.Camera可以用android.graphics.Matrix模拟3D效果？\nA: Skia的C++看到头疼。注意到其实现中使用了4x4矩阵，所以我猜测andnroid.graphics.Camera替开发者进行了2D-&gt;3D-&gt;2D的转换。\n\nQ: Orthographic Projection是个啥？\nA: 是一个坐标变换矩阵，一次位移 + 一次缩放。\nOpenGL需要每个顶点的坐标都在[-1, 1]中，也就是3D空间中位于原点的，边长为2的正方体。\n但在设计3D场景（或使用3D设计2D场景）时，如果事先就用正方体中的小数坐标，会很繁琐。而直接用最直观的坐标，比如整数坐标就很方便（也可以是其他范围的坐标，比如正数总比负数好处理吧），但代价是要把这些坐标变换到正方体中。\nOrthographic Projection就是这个变换。通过指定我们方便使用的坐标的范围，生成这个矩阵。之后我们把方便使用的坐标和该矩阵相乘，计算机会得出该坐标在正方体中的小数坐标。\n\nSource: https://en.wikipedia.org/wiki/Orthographic_projection\n简单地说，矩阵帮我们把设计中的坐标移动到了正方体中，可以让OpenGL显示。\nOpenGL ES 2.0 for Android是在解决屏幕长宽的过程中引入了这个概念，有些混乱。这里再解释一下。\n用书中的例子，我们要在各种比例的屏幕中放一个圆。如果把横竖位置都设置为[-1, 1]，就会挤满整个屏幕，成为了椭圆。这里其实有两个解决方案：\n\n根据屏幕修改坐标。这是最直观的想法。在例子中1:1.78的屏幕上，把顶部和底部坐标减小。横屏同理。\n根据屏幕修改范围。这是书中的思路。坐标依然是[-1, 1]，但坐标范围变为了[-1.78, 1.78]。横屏同理。这里我们就可以用Orthographic Projection来把[-1.78, 1.78]范围内的坐标换到正方体中的[-1, 1]中。\n\n参考了The Math behind (most) 3D games - Perspective Projection。之后的内容也会参考这个视频。\n\nQ: Perspective Matrix和Homogeneous Coordinates是个啥？\nA: 突出一个抽象。上文的提到的视频很有用。\n这里有一个没人跟我说的小秘密。\n人眼看到的图像总是二维的，而人眼观察3D世界的视角是砍去一部分顶部的金字塔形状（Frustum，平截头体，截头锥体）。\n我站在三维坐标的原点向一个轴看，看到的并不是轴的一个截面，而是把那个金字塔形状戴在头上😳，看到的那个截面。这样才符合现实规则。\n\nSource: https://learnopengl.com/Guest-Articles/2021/Scene/Frustum-Culling\n人眼看到的是near plane大小的图像，其内容是3D空间中把far plane到near plane所有物体从远到近挤到near plane（二维化）的效果。\n相关教程中总提距离越远物体越小。实际上物体大小没变，只是在二维化后，距离越远，物体看起来越小，或者说物体是在near plane中越小。\n这些浅显的道理放在代码和数学中就会很不直观。\nPerspective Matrix的作用是把3D中排好的物体，变化为near plane上的2D坐标。\n虽然2D坐标没有z坐标（或者说都相等），但我们需要保留z坐标的相对关系，来确定2D图像中，谁挡住谁。\n而在Perspective Matrix的计算中，会出现w不为1的情况。\n到这一步，从实用角度来说，我们完全可以忽略工具数儿w了。\n编不下去了，到现在我也无法直观地想象出w在3D空间中的样子。\n","categories":["Android"]},{"title":"个人偏爱的Android应用架构","url":"/2021/04/18/android-opinoinated-arch/","content":"根据几年来的开发经验和阅读过的代码，总结出了个人觉得还算稳定可持续的Android应用架构。它以MVVM为基础，融合了Clean Architecture，参考了iosched（新的nowinandroid大同小异），尽可能地照顾到测试和扩展。\n不定期更新新的想法。\n\n\n应用细分了许多Gradle Module，且除顶层app外，每个Module都是Android Library（com.android.library）。\n应用的调用逻辑为Activity -&gt; Fragment -&gt; ViewModel -&gt; UseCase -&gt; Repository。我们按照Moule依赖顺序，从UseCase开始。\n这里重度使用依赖注入，并尽可能使用了@Reusable。\ndomain最底层的基础Module，之后的所有Module都会隐式地依赖它。定义了：\n\nEntity：用到的所有Java Bean或者Kotlin data class\n\nRepository：全部为interface。提供各种底层操作，每个操作尽可能只完成简单的一件事，而将具体的整合留给下一位。\n\nUseCase：一个抽象类为CoroutineUseCase。继承时，依赖注入CoroutineDispatcher和将使用到的Repository。定义了所有用到的操作（一个简单的例子）。\n\n为了照顾单元测试，避免使用Android专用代码（例如使用Kotlin Flow替代LiveData）。\n\n关于在应用的哪一层捕获异常，是一个见仁见智的问题。我个人偏向在UseCase中捕获异常。有异常就封装到一个Result&lt;Xxx&gt;（和Kotlin中的Result类似，为了避免烦人的警告而手动定义）中，没异常就直接返回。\n2022年1月20日更新：我还是决定在Repository中捕获异常。\n\n2022年5月28日更新：在看了UseCase vs Repository谈论后，个人偏爱的做法是：当Repository的某个操作仅在一处使用时，不把它包装为UseCase。此外，某个操作在多处使用或需要多个Repository时，包装为UseCase。\n\n\n\n常量、日志、异常、Feature Flag等基础配置\n\n统计、崩溃收集的接口\n\n\ndataapi project(&quot;:domain&quot;)\n\n实现了domDaain中的Repository，并用Dagger的@Binds绑定到对应的Repository。定义了并实现了数据库、网络、本地储存、WorkManager等来完成Repository的任务。\n\n使用Room时，数据在本Module定义为XxData（包含了数据的字段定义），而Repository中要返回XxEntity，所以在返回前要手动或定义专门的Mapper类进行转换。\n这么做可以将具体实现和应用逻辑分割。UI层直接处理简单的data class，而无需担心JSON、数据库等配置。\n2023年5月19日更新：从How to build a data layer学到了可以把Mapper替换为和Data在一起的方法，比如XxData.toEntity()，这样可以省去专门的转换类。\n\n得益于Hilt，绑定Repository的类可以定义为私有类。\n\n不在本Module中存放资源。非要不可的话：\n\n依赖注入\n在res/values/ids.xml定义一个同名资源来引用。\n在更高层的Module中使用Extension functions来增加相关功能。\n\n\n因为基本全是内部实现，所以几乎都是internal。配合Hilt应该可以全部为internal。\n\n\npresentation在有了Hilt之后，本Module可以被删除，而将ViewModel移动到各个功能Module中。\napi project(&quot;:domain&quot;)\n\n定义了所有用到的ViewModel，ViewModel中被注入了各个需要的UseCase或Repository。\n\n业务逻辑应该在UseCase中，所以ViewModel中尽可能保持简单。\n虽然Google官方建议在Kotlin-only的项目中用Flow替代LiveData，但我习惯在ViweModel中将Flow调用asLiveData()转换后给UI层使用，因为在UI层使用Flow坑太多。\n\n2021年11月6日更新：\nGoogle官方铁了心要在UI层用Flow，而我依然和大佬（Kotlin’s Flow in ViewModels: it’s complicated）站在UI层使用LiveData的队。flowWithLifecycle等API又把开发者需要担心Lifecycle的问题带回来了嘛。\n2022年1月20日更新：\n如果Repository中的一个方法可以被直接使用，套一层UseCase也只是简单包装API的话，我觉得是可以直接在ViewModel中注入Repository的。仅把多于一个操作的情况抽象为UseCase。\n2022年8月13日：\n根据Common modularization patterns，在ViewModel中使用SavedStateHandle时，后者会自带Fragment的arguements，未找到更新日志。\napp-base以app-开头的Module将会按应用的不同功能分类，而本Module是它们的基础Module。\napi project(&quot;:domain&quot;)\n\n定义了：\n\n各种UI层（Android层）的基础UI类、通用View、通用工具类。\n除了各个功能Module的特有资源，其他资源都放在这里。例如应用图标、通用图标、颜色、主题、翻译等。\n\napp-xxxapi project(&quot;:app-base&quot;)// api project(&quot;:prentation&quot;) // Hilt之前\n\n将应用按功能分类，包含了功能的界面、Activity、Framgnet等。用了Hilt之后，也可以把ViewModel放进来。\n\napp-analytics也应该是一个单独的Module，用于替换不同实现。\n\nappimplementation project(&quot;:domain&quot;)implementation project(&quot;:data&quot;)// implementation project(&quot;:prentation&quot;) // Hilt之前implementation project(&quot;:app-base&quot;)implementation project(&quot;:app-xxx&quot;)compileOnly ... // Dagger可能会抱怨找不到data中使用的一些类，所以加进来就可以。\n\n应用入口，也是仅有依赖了data Module的一处。这样将应用实现细节通过依赖注入抽象出来，可以达到代码不互相污染、提升编译速度、方便测试、提高逆向难度、提高可扩展性等的效果。\n\nNavigation Component配置如下：\n\n在app-base的res/values/ids.xml定义了一群id，代表各个目的地或操作。\n在app-xxx中实现各个Fragment，并按需使用其他id。\n在app的Navigation graph中，将id和Fragment或操作对应起来。\n\n这么做的缺点是：\n\n无法保证编译时安全，少配置了东西只有在运行才会崩溃，但我还没找到更好的办法。\n不能使用生成的参数类。解决办法是乖乖bundleOf。\n\n2021年5月11日更新：\n刚刚看了Navigation: Navigating between modules - MAD Skills，视频中是通过在子Module中定义Nested Graph，父Module中引用实现的，这样可以让子Module隐藏Nested Graph中的实现。这个方法比上述的要好。\n但如果出现了子Module之间跳转的情况，那可能还是需要之前的方法。\n2021年7月2日更新：\n刚刚看了Navigation - Live Q&amp;A - MAD Skills，连同刚刚更新的文档，都是推荐使用DeepLink来在子Module间跳转。这个方法看起来也比一开始的方法要好。\nGraph + DeepLink是一个不错的组合，也是我考虑未来会使用的方法。\n2021年11月6日更新：\n用了一段时间的Graph + DeepLink，发现体验就像一堆狗屎。它需要在onDestinationChanged判断Destination时，同时查询父Graph的ID，代码复杂度翻倍。DeepLink也同样不能保证编译时安全。\n我还是用回了自定义ID的方案，同时在需要支持跳转时再用DeepLink。\n\n\n各种使用场景\n单元测试主要是UseCase，可以新建一个测试Module，也可以在domain中就地解决。\n\nInstrumented Test可以新建一个测试Module，也可以在app中就地解决。\n\n国产SDK\n因为它们代码混乱、污染名称空间，最好把它们丢到一个专门的Module（例如app-trash、app-third）中养蛊。如果它们只提供JAR或AAR，就把文件引用为一个新Module(New -&gt; New Module -&gt; Import .JAR/.AAR Package)，然后再在我们的养蛊Module中，引用它们。之后在app-base中定义interface，app-trash中实现，app中依赖绑定，app-xxx注入使用。\n上述方法看起来很麻烦，但因为国产SDK太过恶心、给人造成的麻烦太多，怎么加抽象都不为过。另外，有了Lifecycle、新的Activity Result API等，上述方法也容易了些。\n个人经验：永远不要直接引用它们，哪怕多加几个抽象Module。\n\nMVI\n因为现有的MVI框架还不够成气候，所以现在还是MVVM。但MVI最重要的是思想，Jetpack Compose也是有类似的思想。在将ViewModel精简、将逻辑放到UseCase后，实现起来还是容易的。\n\n\n其他的想法2022年9月17日最近看了Common modularization patterns。文中提到了多个domain和data的实现，这里提出一些类似的想法，还未亲自实现过。\n\ndomain拆为\n\ndomain-base: 存放和具体实现无关的类，例如工具类、接口类等。\ndomain-xxx: 依赖于domain-base，存放对应功能的Entity、Repository和UseCase。\n\n\ndata拆为\n\ndata-base: 存放一些工具类。\ndata-xxx: 依赖于data-base。似乎只能实现各自的数据库、网络、Repository实现。\n\n\napp-base\n不再依赖于domain，依旧保留公用的资源、工具类。此外不修改。\n\napp-xxx\n依赖于各自对应的domain-xxx。\n\napp\n根据flavor依赖不同的app-xxx和其对应的data-xxx。\n\n\n2023年12月19日最近看了nowinandroid。从架构上来讲，并没有什么新增的地方。但我发现整个项目比较零碎，并没有之前iosched的浑然一体的感觉。大量的实验API和不少TODO都让这个项目变得对新人不是很友好。\n","categories":["Android"]},{"title":"Android Jetpack Paging3 从入门到入土","url":"/2022/01/31/android-paging3/","content":"一言以蔽之：Jack of all trades, master of none。\n本文记录了个人实现分页的一些弯路与经验。\n\n\n需求\n初始加载部分数据，然后在滑过一定距离后，自动加载更多。\nOffline first。先显示缓存数据，本地缓存用光后再请求新数据。\n第一次请求和后续请求时根据是否加载与成功与否显示不同的布局。\n\n人生中第一个分页方案是FastAdapter的Endless scrolling。背后的原理是Endless Scrolling with AdapterViews and RecyclerView。它们针对需求1，通过给RecyclerView增加OnScrollListener，进行了逐字逐句的实现。\n由于业务不熟练，数据储存使用了MutableList，导致了很多多线程、缓存之类的问题。最后代码混乱，勉强能用。\n之后在Jetpack Paging发布后，自然而然地决定迁移过去，吃Google软饭。\n缝缝补补Paging2Paging的官方Sample很复杂。可以看得出Google想要满足尽可能多的情况，但结果却是大伙儿都理解不了。\nSample中为了满足需求，需要一个巨大的类，还要给BoundaryCheck外挂LiveData来实现检测错误、实现刷新。因此每一个PagedList的创建都很繁琐，为此开发者都得二次封装。加上几年前Unidirectional Data Flow的思想还未流行，从实现底层到UI层，自然处处都会见到PagedList的闪亮身影。\n虽说代码库更乱了，但好在能用。FastAdapter的维护者也很勤奋，增加了对Paging2的支持。\n竹篮打水Paging3在Paging3公布时，看到了全程使用Kotlin Coroutines、一个Pager配置所有内容、支持分隔符、支持错误状态和重试……让人口水流了一地。\n正式版发布后，我以为大版本不兼容，需要重构很多代码，所以在很长一段时间内都没正式使用过。\n在某次偶然的机会，才发现Paging2到Paging3是二进制兼容的。细看之下，原来是Paging3用新API重新实现了Paging2！想到二者API差别之大，和确保行为相同所需的测试和努力，发自内心佩服维护者。\n可是，\n\n初始加载部分数据，然后在滑过一定距离后，自动加载更多。\n 即使是仅创建Pager，不交给Adapter，Paging3都会触发Refresh + Append或两次Append。如果我把分页设置为一个远大于屏幕可显示内容的数值，它依然会自动加载两次。\n 自动加载一次可以理解为确保数据尽早到位，但为什么要加载第二次呢？为什么本地数据即使够多，也要加载更多呢？多次Debug后，发现Flow会初始化两次？\n\nOffline first。先显示缓存数据，本地缓存用光后再请求新数据。\n 由于需求1的原因，每次新建Pager后，它总会请求新的两页，即使本地数据还有很多未浏览。\n\n第一次请求和后续请求时根据是否加载与成功与否显示不同的布局。\n 如果只用withLoadStateFooter，RecyclerView可能会自动滚动到第一页末尾。原因可能是为了保持没有数据时，第一项也就是Footer的位置，而在第一页数据加载完毕后，Footer可能还未清空。\n Paging3可能需要类似如下的肮脏代码来解决问题：\n lifecycleScope.launchWhenCreated &#123;    adapter.loadStateFlow        // Only emit when REFRESH LoadState for RemoteMediator changes.        .distinctUntilChangedBy &#123; it.refresh &#125;        // Only react to cases where REFRESH completes, such as NotLoading.        .filter &#123; it.refresh is LoadState.NotLoading &#125;        // Scroll to top is synchronous with UI updates, even if remote load was        // triggered.        .collect &#123; binding.list.scrollToPosition(0) &#125;&#125;\n\n 最后是在Stackoverflow发现了可以增加一个Header来避免滚动。\n 既然有了Header，那把初始刷新状态也显示了吧。\n 那么这时RecyclerView的动画会在一瞬间同时显示Header和Footer，非常丑。为了解决这个，需要对ItemAnimator进行很复杂的Hack。\n 于是决定把初始刷新状态单独成为View，和LoadStateAdapter协作。然而这么做依然无法彻底解决上述问题。\n 同时，为了避免自动滚动，Header不能去掉。但如果把Header高度设置为0，会出现SwipeRefreshLayout失效的问题，因此最后只好把Header设置为空白的1px。\n\n\n在花费很多天把玩Paging3，结果却依然不理想后，只能自己造轮子了。\nReddit上也有很多开发者抱怨Paging3复杂难用。\n自制小饼干为了自身情况量身定制的方法意外地简单。大体上还是参考了Endless Scrolling with AdapterViews and RecyclerView，只不过使用ListAdapter中的getItem来确定已浏览的范围，进而决定何时请求更多。配合Room生成的Flow和自定义的加载状态，确保了Single source of truth。\n\n2022年3月6日更新：为了避免更新不到的情况，选择了在ListAdapter的getItem中判断position时，只要剩余数目少于预设值，就进行请求。然后在具体请求的请求方法中，进行上锁、是否请求还是忽略请求的判断。\n\n总结看起来像个多面手的Paging3到都来只是浪费了不少时间。虽然可以说一句简单的“凡事还得自己来”，但这件事，我还要再下一篇文章中继续反思。想了许久，还是一句话：“不坏不修”。\n","categories":["Android"]},{"title":"Android Proguard Hell","url":"/2018/12/16/android-proguard-hell/","content":"源自于无法忍受LeanCloud的Keep所有类的Proguard规则，想要精简一下APK而摸了Proguard的底。\n\n\nProguard基本上有个任务，精简（删除），混淆，优化。\n规则\n-keep 不精简且不混淆这个类和它的成员，“别摸这个类”\n  -keep class android.support.annotation.Keep-keep class androidx.annotation.Keep-keep @android.support.annotation.Keep class * &#123;*;&#125;-keep @androidx.annotation.Keep class * &#123;*;&#125;\n-keepclasseswithmemebers 效果跟上一条一致，但可以更具体地声明包含某种成员的类。\n  -keepclasseswithmembers class * &#123;    @android.support.annotation.Keep &lt;methods&gt;;&#125;-keepclasseswithmembers class * &#123;    @androidx.annotation.Keep &lt;methods&gt;;&#125;-keepclasseswithmembers class * &#123;    @android.support.annotation.Keep &lt;fields&gt;;&#125;-keepclasseswithmembers class * &#123;    @androidx.annotation.Keep &lt;fields&gt;;&#125;-keepclasseswithmembers class * &#123;    @android.support.annotation.Keep &lt;init&gt;(...);&#125;-keepclasseswithmembers class * &#123;    @androidx.annotation.Keep &lt;init&gt;(...);&#125;\n-keepclassmembers -keep针对某个类，这个针对某个成员，效果一致（不精简且不混淆）。“别摸这个类的这个成员”\n  -keepclassmembers enum * &#123;    public static **[] values();    public static ** valueOf(java.lang.String);&#125;-keepclassmembers class * implements android.os.Parcelable &#123;    public static final ** CREATOR;&#125;-keepclassmembers class **.R$* &#123;    public static &lt;fields&gt;;&#125;# Preserve annotated Javascript interface methods.-keepclassmembers class * &#123;    @android.webkit.JavascriptInterface &lt;methods&gt;;&#125;\n-keepnames 只精简不混淆\n\n-keepclasseswithmembernames 效果跟上一条一致，但可以更具体地声明包含某种成员的类\n\n-keepclassmembernames 只针对这个类的这个成员，只精简不混淆。不影响这个类。\n\n\n输出seeds.txt：第一步(Read Input)的产物。内容是所有匹配proguard-rules的类和成员。是Proguard没有摸过的内容。\nusage.txt：第二步(Shrink)的产物。在知道不能摸的内容后，这里是所有Proguard摸过的内容。\nmapping.txt：第三步(Obfuscate)的产物，记录了Proguard怎么摸的。是一个混淆前后的对应表。\ndump.txt：第四步(Dump)的产物，Progurad处理后的，未压缩或未优化的结果。体量巨大，但可以用于不反编译APK就可以看到APK的内容。\n参考\nShrink your code and resources\n\nTroubleshooting ProGuard issues on Android\n\nReading ProGuard’s Outputs\n\nFeeding ProGuard’s inputs: where are all of these rules coming from?\n\nHow Proguard Works\n\n\n","categories":["Android"]},{"title":"Android开发的一些知识：Android框架","url":"/2019/02/03/android-requirements-architecture/","content":"Android开发的一些知识 - At a high level, what does the Android architecture look like?\n\n\n参考Platform Architecture\n\n我们久经考验的Linux内核可以提供可靠安全的运行环境：权限、进程分离、IPC、应用沙箱。包括了各种硬件的驱动。\nHardware Abstraction Layer (HAL)，硬件抽象层。抽象具体硬件实现的。\nHAL上有Android Runtime。运行程序的。每个应用都有自己的进程和ART实例。负责AOT和JIT、有专门设计的GC等。具体参见系列另一篇Dalvik和ART。\n还有一些常有的Java Libraries。\nNative C/C++ Libraries：大部分系统服务（ART和HAL）都使用了native libraries written in C and C++。通过Java JNI放出一些接口。\nJava API Framework：写应用时接触到Java API。像是View、Resources、Notification、Activity、Content Providers…\nSystem Apps：系统应用。当然还有各种第三方应用。\n之前的笔记：Android Internal 笔记\n","categories":["Android"]},{"title":"Android开发的一些知识：Dalvik和ART","url":"/2019/02/15/android-requirements-dalvik-art/","content":"Android开发的一些知识 - How Dalvik and ART VMs work?\n\n\n更新\nAndroid CPU, Compilers, D8 &amp; R8，这篇文章中的内容更准确。\n完\nDalvik运行在4.4之前设备上的虚拟机。JIT编译，每应用一个，运行着Dalvik字节码（.dex）的文件。在运行时把.dex字节码转化为硬件特有的指令。\n要塞到小设备（体积、内存）里所以体量很小、优化很少。内存分配和回收很慢。堆碎片化（有什么专业的对应翻译吗）严重。适合不怎么分配内存的应用，因此早期Android开发会教导大伙儿尽量少分配对象。\nDalvik虽然为低内存设备优化过，但依然使用了JIT。\nART在4.4需手动开启、5.0之后默认开始。依然运行着.dex字节码，相比Dalvik，ART各方面都更好。随着新版本的推出，ART性能也在越来越好。整个Android平台也在和它互相适配。\n主要的优势有：\n1. AOT传统的VM是解释型的，一行一行转换巨慢。\n后来出现了JIT，放到虚拟机里跑字节码，但它延迟大、占用内存大，但优点是可以观察代码的具体运行，并进行直接的优化。\nAOT只在安装应用时把代码编译为机器对应的字节码，这样运行时更快，内存占用更小。因为第一次运行编译时时间多，所以可以在这一次里进行更细致的优化。这和移动设备要求延迟低、内存小的相性很般配。\n\n早期的iOS比Android跑的快，有一部分原因就是其设备架构统一，所以就可以跑编译后的代码，当然快啦。\nJIT也在运行啦。在一些代码瓶颈处（Hotspot）会把代码留下来以后跑JIT。\n\n2. 优化了的GCDalvik的行为分配：从头找一个足够的空挡放进去。\n回收：\n\n【暂停所有线程】来找根索引。\n所有线程恢复运行，Dalvik顺藤摸瓜，从根索引找到所有可以到达的对象，并标记它们。\n再次【暂停所有线程】来找所有可以到达的对象，因为程序可能在第二步又分配的对象。\n回收掉没有被标记的对象\n\n如果要分配一个大对象，内存又不够用，但内存里又有马上要被回收但还没被回收的对象，这时就会触发GC_FOR_ALLOC，专门为了这次分配回收一次。\n如果要分配一个大对象，内存又不够用，但内存里也没有可回收的对象，这时就会增大堆或者out of memory。\nDalvik不会压缩/移动内存来腾空间，导致堆碎片化严重。\nART的行为全方面地更快啦。\n分配：RosAlloc取代了原来的dlmalloc（是C和C++中使用的算法）。特点有\n\n可以针对某一线程进行内存分配\n将小对象内存分配打包\n将大对象内存分配按页对齐\n更好的上锁和解锁\n\n分配大对象（现在只是针对至少12KB的primitive数组或String）时，不是找空的坑位，而是直接放到空旷的某个地方。\nART学会了通过压缩/移动内存来腾空间，堆碎片化解决了。ART会在应用进入后台后，不影响用户体验时，再进行内存整理，或者应用在前台，而急需内存时。\n回收：\n四个阶段中的第一个阶段不再暂停其他线程。第三个阶段也更快了。\nMinor GC：跟踪所有上一次GC后分配的对象，回收时先处理它们，因为它们寿命更短，处理更快。\n牛轧糖的ART把分配器用汇编代码重写了一遍。\n奥利奥的ART新的回收器，可以在前台进行持续地内存优化/压缩。结果就是整个系统的内存占用和堆碎片化都有了大幅度优化。移动内存只需要移动指针。\n内存分配更快了导致synchronized的对象池的性能有一些情况下比直接分配更差。\nAOT跟JIT合作，情况更复杂了。安装时并不会完全编译代码，以此提升安装速度。第一次运行时依赖JIT，然后找到运行瓶颈，再在后台进行AOT和不断地优化。这一过程不断重复，结果就是应用越用越快。\n此外还有大量大量的优化。\n参考\nhttps://source.android.com/devices/tech/dalvik\nhttps://www.quora.com/From-what-Ive-read-online-it-seems-like-Google-is-planning-to-default-to-ART-in-a-future-release-Why-is-ART-better-than-Dalvik\nTrash Talk (Android Dev Summit ‘18)\nDeep Dive into the ART Runtime (Android Dev Summit ‘18)\n\n","categories":["Android"]},{"title":"Android开发的一些知识：在Android Studio点击Run之后","url":"/2019/02/03/android-requirements-start-button/","content":"Android开发的一些知识 - At a high level, what happens when you hit the build button on Andorid Studio?\n\n\n课程: Gradle for Android and Java\nGradle已经提供了很多Automation相关的工作，Google就选它作为Android的build system。\nAndroid Studio把所有任务都交给了Gradle来完成，自己只是一个wrapper。但Gradle并不了解Android，所以Google提供了android-gradle-plugin，简称AGP。\n新建一个Empty Activity的Kotlin项目。\n点击Run，发现运行了\nExecuting tasks: [:app:assembleDebug]\n这里摘一些有用的Tasks:\n&gt; Transform ... // 首先是Jetifier和AAR transform...&gt; Task :app:compileDebugAidl // 处理AIDL，用于IPC https://developer.android.com/guide/components/aidl&gt; Task :app:compileDebugRenderscript // 处理RenderScript https://developer.android.com/guide/components/aidl&gt; Task :app:checkDebugManifest // 检查Manifest&gt; Task :app:generateDebugBuildConfig // 生成BuildConfig...&gt; Task :app:generateDebugResValues // 首先处理并生成资源Resources&gt; Task :app:generateDebugResources&gt; Task :app:createDebugCompatibleScreenManifests&gt; Task :app:mergeDebugResources&gt; Task :app:processDebugManifest // 处理Manifest&gt; Task :app:processDebugResources&gt; Task :app:compileDebugKotlin // 编译Kotlin&gt; Task :app:prepareLintJar&gt; Task :app:generateDebugSources&gt; Task :app:javaPreCompileDebug // 预编译Java&gt; Task :app:compileDebugJavaWithJavac // 编译Java&gt; Task :app:instantRunMainApkResourcesDebug...&gt; Task :app:mergeDebugShaders // 继续处理资源，Shaders和Assets&gt; Task :app:compileDebugShaders&gt; Task :app:generateDebugAssets&gt; Task :app:mergeDebugAssets&gt; Task :app:validateSigningDebug // 签名&gt; Task :app:signingConfigWriterDebug&gt; Task :app:processInstantRunDebugResourcesApk...&gt; Task :app:compileDebugNdk // NDK&gt; Task :app:mergeDebugJniLibFolders // JNI&gt; Task :app:transformNativeLibsWithMergeJniLibsForDebug&gt; Task :app:processDebugJavaRes // 处理Java Resources&gt; Task :app:transformResourcesWithMergeJavaResForDebug&gt; Task :app:transformNativeLibsAndResourcesWithJavaResourcesVerifierForDebug&gt; Task :app:transformClassesWithInstantRunForDebug&gt; Task :app:transformClassesAndClassesEnhancedWithInstantReloadDexForDebug&gt; Task :app:incrementalDebugTasks&gt; Task :app:preColdswapDebug&gt; Task :app:fastDeployDebugExtractor&gt; Task :app:generateDebugInstantRunAppInfo&gt; Task :app:transformClassesWithDexBuilderForDebug&gt; Task :app:transformDexArchiveWithExternalLibsDexMergerForDebug&gt; Task :app:transformDexArchiveWithDexMergerForDebug&gt; Task :app:transformDexWithInstantRunDependenciesApkForDebug&gt; Task :app:instantRunSplitApkResourcesDebug&gt; Task :app:transformDexWithInstantRunSlicesApkForDebug&gt; Task :app:packageDebug // 打包&gt; Task :app:buildInfoGeneratorDebug&gt; Task :app:compileDebugSources&gt; Task :app:assembleDebug\n\n接下来会运行installDebug。就是简单地把apk push到设备上安装。\n最后运行adb打开app的launcher Activity。\n","categories":["Android"]},{"title":"Android开发的一些知识","url":"/2018/12/31/android-requirements/","content":"一些Android开发的知识。\n\n\n\nAt a high level, what does the Android architecture look like?\n https://github.com/DeweyReed/site/blob/master/source/_posts/android-requirements-architecture.md\n\nAt a high level, what happens when you hit the build button on Andorid Studio?\n https://github.com/DeweyReed/site/blob/master/source/_posts/android-requirements-start-button.md\n\nWhat happens when you install an application on the device?\n https://stackoverflow.com/questions/7773360/what-exactly-happens-when-i-install-an-android-application\n\nHow Dalvik and ART VMs work?\n https://github.com/DeweyReed/site/blob/master/source/_posts/android-requirements-dalvik-art.md\n\nHow does Inter-Process-Communication work on Android？\n 来自Linux的跨进程通信，Android有自己的实现。用于不同Android Components之间如何通信。有多种机制：Intents、Bundles、Binders、Service、BroadcastReceivers。这些实现为通信提高了安全性。\n 一些情况可以需要ALDL来实现跨进程通信：https://developer.android.com/guide/components/aidl\n\nHow are apps sandboxed and why does it matter?\n https://source.android.com/security/app-sandbox\n 借用了Linux的用户权限系统来给每个应用提供各自的权限，达到了应用分离、沙箱的效果。默认情况下，普通应用没有跟其他应用和系统应用互动的权限。\n\nProcesses and application lifecycle\n https://developer.android.com/guide/components/activities/process-lifecycle\n 应用在需要运行时，创建进程。再不再运行且系统需要内存时回收。系统根据一个应用正在运行中的组件来给应用分等级，并在需要内存时，从低等级开始回收。\n BroadcastReceiver在返回之后，系统就会认为它没用了。需要回收时就会清理掉它和它产生的线程。\n\n\n","categories":["Android"]},{"title":"Android Resources小研究","url":"/2020/01/12/android-resources-test/","content":"研究了一下如何获取各种资源，这里用颜色举例，其他类型没有尝试，但应该大同小异。\n\n\n我们在styles.xml设置&lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;。\nR.color.colorPrimary -&gt; Color IntContextCompat.getColor(context, R.color.colorPrimary) -&gt; Color Int\nR.attr.colorPrimary -&gt; Color Int这里的Context需要带Theme的Context，比如是一个ContextThemeWrapper或是Activity/View的Context，不然什么也拿不到。下个例子同理。\n@ColorIntfun Context.themeColor(@AttrRes attrRes: Int): Int &#123;    val a = obtainStyledAttributes(null, intArrayOf(attrRes))    try &#123;        return a.getColor(0, Color.RED)    &#125; finally &#123;        a.recycle()    &#125;&#125;\n\n然后context.themeColor(R.attr.colorPrimary) -&gt; Color Int\nR.attr.colorPrimary -&gt; R.color.colorPrimary(Color Res)@ColorResfun Context.themeRes(@AttrRes attrRes: Int): Int &#123;    val a = obtainStyledAttributes(null, intArrayOf(attrRes))    try &#123;        return a.getResourceId(0, -1)    &#125; finally &#123;        a.recycle()    &#125;&#125;\n\n然后context.themeRes(R.attr.colorPrimary) -&gt; R.color.colorPrimary\n一个更有用的例子是context.themeRes(R.attr.colorControlActivated) -&gt; R.color.colorAccent(通常情况下是这个值)\n拦截View比如拦截Button的android:textColor和app:backgroundTint。\n首先继承AppCompatButton或MaterialButton。\n新建attrs.xml并塞入：\n&lt;declare-styleable name=&quot;Theme_Button&quot;&gt;    &lt;attr name=&quot;android:textColor&quot; /&gt;    &lt;attr name=&quot;backgroundTint&quot; /&gt;&lt;/declare-styleable&gt;\n\n然后就可以\ncontext.withStyledAttributes(set, attrs, defStyleAttr, defStyleRes) &#123;    getColorStateList(R.styleable.Theme_Button_android_textColor)    getColorStateList(R.styleable.Theme_Button_backgroundTint)&#125;\n","categories":["Android"]},{"title":"Android创建快捷方式图标的简单快速方法","url":"/2019/03/11/android-shortcut-icon/","content":"从Google Material Icons或其他地方拉一个24dp的vector，1分钟内创建其对应的快捷方式图标。\n\n\n\n修改viewportWidth和viewportHeight为48.0。\n\n把现有的所有&lt;path&gt;...&lt;/path&gt;放到一个&lt;group&gt;中，并添加translate：\n &lt;vector ...&gt;    &lt;group        android:translateX=&quot;12&quot;        android:translateY=&quot;12&quot;&gt;        &lt;!-- 原来的path，记得改颜色--&gt;        &lt;path ...&gt;    &lt;/group&gt;&lt;/vector&gt;\n在&lt;group&gt;前添加这一段（就是画了个圆）:\n &lt;path    android:fillColor=&quot;#F5F5F5&quot;    android:pathData=&quot;M24,24m-22,0a22,22 0,1 1,44 0a22,22 0,1 1,-44 0&quot; /&gt;\n完成！我记得这样的结果是符合MaterialDesign的。\n\n\n","categories":["Android"]},{"title":"在Activity启动时弹出软键盘并在其之上显示内容","url":"/2023/01/11/android-soft-keyboard-oncreate/","content":"想要在Activity一启动就显示如下状态，还要有一个不乱跳的动画，这比预想中要复杂不少。\n\n\n\n屏幕\n\n\n\n状态栏空白内容紧贴着软键盘导航栏\n\n\n\n\n第一次尝试了WindowCompat.setDecorFitsSystemWindows(window, false) + ViewCompat.setWindowInsetsAnimationCallback，但问题在于：\n\n有的手机上，在动画结束后，软键盘的高度有时会少十几二十个dp。\n 在onCreate中唤起动画时，一定几率出现。原因不明。\n 如果是用户点击某个按钮后再唤起动画，是没问题的。\n\n软键盘从底部升起时，内容会先显示在底部，然后跟随动画升起。\n 这样的效果还行，但很突兀。除非让内容跟随升起时，有一个从小变大动画。\n\n\n无奈之下，不再使用Edge-to-edge。而使用Activity的android:windowSoftInputMode=&quot;adjustResize&quot;。效果立竿见影，不会再出现高度缺少的问题了。\n但第二个问题依然有。一直以为无能为力了，但直到前几天发现Todoist的一个快捷方式做到了。\n在一顿反编译后，发现它们也用了adjustResize。虽然没能找到具体实现，但我有了新的想法。\nadjustResize的实现是Activity自动给Root view增加Padding。那么如果我们记忆之前的Padding，并在之后的onCreate中重复使用，那么就不会跳跃了。\n// 这里用了JetpackCompose，所以override这个。// 如果用XML，就override只有一个参数的setContentView。override fun setContentView(view: View?, params: ViewGroup.LayoutParams?) &#123;    super.setContentView(view, params)    if (view == null) return    // 应用之前储存的底部Padding    view.updatePadding(bottom = viewModel.bottomHeight)    ViewCompat.setOnApplyWindowInsetsListener(view) &#123; _, insets -&gt;        val bottom = insets.getInsets(            WindowInsetsCompat.Type.ime() or WindowInsetsCompat.Type.navigationBars()        ).bottom        if (bottom &gt; 0) &#123;            view.updatePadding(bottom = bottom)            // 储存好底部Padding，供下次启动使用            viewModel.setBottomPadding(bottom)        &#125;        insets    &#125;&#125;\n\n这个方案的优点是：\n\n内容只会在第一次时跳跃。\n可以跟随软键盘高度变化，比如切换语言时。\n\n","categories":["Android"]},{"title":"天天坏，天天修的Android Studio","url":"/2020/09/20/android-studio-is-broken/","content":"记录了个人在确定不是代码问题后，如何修理坏掉的Android Studio的一些经验。\n\n\n“坏掉”指的是所有不是自己代码问题的问题。\nDagger曾经的某些AS版本和Dagger的某些版本不兼容，而Dagger出了问题，多数人会先怀疑自己（而且多数情况也的确是自己的问题）。现在有了Hilt，问题会好很多。所以针对Dagger的问题，先学好Dagger，再去Issues里逛一逛。\n确认代码没问题后，可以尝试将项目或全局的gradle.properties中的各种配置注释掉重新Build一次。各种为了加速Gradle的配置有时会帮倒忙。\n最近发现当DaggerAppComponent中有类型不匹配、缺少Injector的问题时，手动修改生成的DaggerAppComponent，然后重新Build，有时能解决办法，当然这是在确信自己的Dagger代码无误，且各种Clean、清缓存都不起作用的前提下。\n2021新发现的方法！给类改名字。\ngit clean -fdx删除所有没被Git管理的文件夹和文件。Android Studio中的Clean Project有时不够用。\n修改settings.gradle中的rootProject.name如果没有rootProject.name，新建一个Android项目，参考里面的示例代码。\n把rootProject.name = &quot;ProjectName&quot;中的ProjectName修改为任意名字，保险起见重启一下AS，再修改回原名字，再重启一下AS。这个方法可以解决一些Gradle文件不在IDE中的Android标签下显示的问题。\n删除Gradle缓存最近遇到一个问题，Kotlin Extension Functions不被识别，上述方案都试过了没用。最后只好打起了Gradle的主意。\n除了.gradle/gradle.properties，把.gradle和.m2都删掉。因为小文件很多，删除时间很长，所以要一次性永久删除，如果先丢到回收站，等待时间要翻倍。\n删除Android Studio缓存最近升级到4.2后，遇到问题仅删除Gradle缓存已经不够了。导出AS设置，然后把所有AS缓存都删光，然后重启。相当于重装了。\ndeep-clean使用Github的deep-clean。\n因为破坏力太大，所以个人还没使用过，不过可以参考其中删除了哪些文件和文件夹。\n通常是不需要删除IDE配置文件的，而且个人还从没走到那个地步。希望未来也不需要吧。\n改变项目文件路径最近遇到了ID解析不出来。发现可以先把项目放到一个新文件夹中，然后再用AS打开项目。之后再把项目从文件夹中移出来。\n","categories":["Android"]},{"title":"Android储存方案研究及分析","url":"/2020/01/25/android-storage/","content":"自从Android Q引入了Scoped Storage，储存问题就像在Kotlin Coroutines之前的Android多线程，八仙过海，各显神通，而且每种方案的都有其长处和短处，Android也有了一万多种储存方案。那么在Google决定开发一个Android StorageX来解决这个问题之前，我自己先来捋一捋，正好最近关于储存的官方文档也更新了。\n本文只考虑棒棒糖之后的设备。因为SharedPreference和Sqlite(Room)没啥好说的，本文主要研究MediaStore、File和SAF。\n\n\nFile指的是用于内部储存的getFilesDir()和getCacheDir()和外部的getExternalFilesDir()和getExternalCacheDir()，不要权限，卸载后会消失。\n除了直接用File的API外，还可以用Context的context.openFileOutput(filename, Context.MODE_PRIVATE)及其其他方法来达到同样的效果（虽然我觉得后者挺难用而且有点坑）。\nMediaStore\nREAD_EXTERNAL_STORAGE or WRITE_EXTERNAL_STORAGE when accessing other apps’ files on Android 10 (API level 29) or higher\nPermissions are required for all files on Android 9 (API level 28) or lower\n\n官方文档中说，用这个API(MediaStore + ContentResolver)来读写三种内容：图片、音频和视频。Q之前必须要权限，Q及之后读别人的文件才要权限。\n这句话意味着Q及之后，用这个方法写入和读取自己的写入的文件(Uri)是不需要权限的，测试结果也的确是这样的。\n这里有个问题，Q及之后是可以通过RELATIVE_PATH把图片保存进相册文件夹中的，但在之前是不能的，这时只能用已被废弃的硬编码 + File来储存了。\n此外有一个MediaStore.Downloads，只针对Q及之后，但似乎没啥用？\n此外有一个MediaStore.Files，Q之后显示应用创建的图片、音频和视频。\n总结一下，Q之前需要读写外部需要权限，Q及之后如果只是读写自己的内容，完全可以不要权限啦。\nSAF上述未包含的其他文件，不需要权限，读写单个文件很方便，文档里很清楚。\n常见用法这里列举一些我常用到的情况。\n导出/导入一个备份文件SAF。导出时还能让用户命名和选择位置。不要权限。\n分享一个文件FileProvider + FLAG_GRANT_READ_URI_PERMISSION导出为Uri，然后用ShareCompat分享。文件放内部储存居然也可以。\n但是呢，如果项目中用了一些撒币的第三方分享库，而这些垃圾玩意儿只支持分享File和路径，这就有点麻烦了。解决方案有：\n\n把文件放到应用的外部私有文件夹中，然后把File或路径交给那些没有实现Scoped Storage的应用。但这意味着未来某个Android版本如果强制要求Scoped Storage，又得改代码。\n如果文件是图片的话，可以考虑分享一张小尺寸的Bitmap。\n偷梁换柱。依然使用FileProvider生成的Uri搭配ShareCompat分享，但设置Intent的package为对应应用的包名，如果解析Activity后没有对应的可启动Activity，就清除package后再启动分享选择器。但这么做难以处理某个应用的多种分享方式，比如微信分享和朋友圈分享，要么自己去找对应的Activity名字并承担可能失效的后果，要么只能用对应应用的难用且坑多分享库了。\n\n分享一个Bitmap把Bitmap保存到文件里，再分享一个文件。\n选择音乐、图片SAF可以选单个文件，不要权限。选多个文件或者要自定义UI的话，还是乖乖MediaStore + 读取权限吧。\n","categories":["Android"]},{"title":"个人使用的Android Studio配置","url":"/2024/02/12/android-studio-settings/","content":"Android Studio的每个新版本都或多或少有点问题，因此每次都重新安装并手动配置来避免配置继承的问题。\n\n\n\nExport Live Template\nAppearance &amp; Behavior\nAppearance\nTheme: Darcula/Dark\nUI Options - Disable Smooth scrolling\n\n\nSystem Settings\nHTTP Proxy\nMemory Settings\n\n\n\n\nKeymap(Delete old keys)\nShowProjectStructureSettings: Empty\nType alias: Empty\nGo to Line: Column: Empty\nShow vcs Log: Alt + 3\nShow Logcat: Alt + 4\nShow Local Changes: Alt + 2\nMaximize/Restore Active Dialog: Ctrl + Alt + Shift + M\nCompare with Clipboard: Ctrl + Alt + Shift + C\n\n\nEditor\nGeneral - On Save - Enable Ensure every saved file ends with a line break\nAuto Import: Enable 2 Add unambiguous imports on the fly, Optimize imports on the fly\nAppearance\nDisable Caret blinking\nDisable Show line numbers\nEnable Show method separators\nDisable Render documentation comments and Reader Mode\n\n\nCode Completion - Disable Match case\nConsole - Default Encoding: UTF-8\nSmart Keys\nEnable Use &quot;CamelHumps&quot; Words\nDisable Reformat again to remove custom line breaks\n\n\nSticky Lines: Disable\n\n\nFont - Font\nConsolas: Size: 22.0\nJetBrains Mono: Size: 18; Line height: 1.1\n\n\nColor Scheme - Console Font\nConsolas: Size: 16; Line height: 0.8\nJetBrains Mono: Size: 13; Line height: 0.8\n\n\nCode Style: Scheme: IDE\nGroovy\nCode Generation\nDisable Line comment at first column\nEnable Add a space at line comment start and Enforce on reformat\n\n\n\n\nKotlin\nSet from Kotlin style guide\nTabs and Indents - Continuation Indent: 4\nWrapping and Braces: Disable New line after multiline entry\nCode Generation\nDisable Line comment at first column\nEnable Add a space at line comment start and Enforce on reformat\n\n\n\n\n\n\nDesign Tools: Split, Split, Split, Code, Code\nInlay Hints: Disable Code Vision\n\n\nPlugins\n.ignore\nADB Idea\nArchive Browser\nAvocado\nGLSL\nJsonToKotlinClass\nKotlin Multiplatform\nNyan Progress Bar\nString Manipulation\n\n\nVersion Control - Commit\nDisable Use non-modal commit interface\nBefore Commit: Enable all\n\n\nBuild, Execution, Deployment\nDeployment: Enable all\n\n\nTools\nExternal Tools\nAvocado\nProgram: ...\\Yarn\\bin\\avocado.cmd(Show Hidden Files and Directories)\nArgument: -i $FileName$\nWorking directory: $FileDir$\n\n\n\n\nEmulator: Disable Launch in the Running Devices tool window\n\n\nOpen a project\nDisable Show Project Gradient in the toolbar\nClean Gutter Icons and reorder tabs manually\nReorder window layouts and Store Current Layout as Default\nKeymap(Delete old keys)\nBuild(Tool Window): Alt + 5\n\n\nEditor\nLive Template: Disable compose related; Import from settings zip\n\n\nConfigure JsonToKotlinClass\nCtrl + Shift + Alt + L\nEnable Optimize imports, Code cleanup, and Rearrange code\n\n\nLog - COMPACT, Show Tag Names\nCommit something and check changes:\nEnable Show Diff in Separate Window\n\n\n\n","categories":["Android"]},{"title":"Android开发后悔的九件事","url":"/2022/12/20/android-things-i-wish-i-knew/","content":"RT\n\n\n本应适度使用Material Components虽说部分组件，诸如MaterialButton、MaterialCardView和CoordinatorLayout，自定义程度很高，用起来也很顺手。但另外一些，诸如TabLayout、BottomAppBar和TopAppBar等，需要诸多奇技淫巧才能符合UI。到头来，其实不如用TextView和ImageView从头攒一个，来得容易实现和维护。\n更别提从Material 3开始，想要把背景颜色设置为一个特定值都变得困难起来。\n本应谨慎使用Post在onCreate或onCreateView中，所有View还未被定位和绘制。这时获取其宽度或高度会为0。一个常见的方法是将获取尺寸的代码放到一个post &#123;&#125;中（我最早从AdMob的早期文档中看到类似的用法）。大多数情况下，问题会得到解决。\n但这会打开一个潘多拉魔盒。这个方案意味着每次修改View的属性后，想要得到修改后的状态，就得Post一次。逻辑复杂之后，代码库很快就会充斥着Post嵌套Post多次的糟糕实现。\n根据Understanding when and how Android Views have dimensions set，View.doOnLayout()是比Post更好的方案。但这依然解决不了嵌套太多的问题。而最终解决方案则和下一条有关。\n本应在View层少放业务逻辑想法和MVI或Jetpack Compose类似，View收到的永远是UI的状态数据，而业务逻辑全都在ViewModel中。虽然只是把一个文件分为两个文件，但UI实现的复杂度会得到惊人的下降。配合SavedStateHandle，还可以存活过Configuration changes。\n常见的Configuration changes不仅是旋转屏幕，还包括深色模式切换、时区变化、一些破手机切换个应用就会被杀等情况。这里还是要早做打算。\n这样也可以缓解不少上一条Post嵌套太多的问题。\n本应适度使用Single Activity没人会告诉你，在面对一些核心操作时，Single Activity就力不从心了。\n比如在Fragment中放相机预览，每次切换页面后返回时，相机都得重新启动一遍，使用体验很糟糕。\n在一些应用核心操作时，最好单独使用一个Activity。这并不意味不需要控制好UI状态，只是不让这些核心状态太容易地被丢失。\n本应细心规划Navigation如果要在不同屏幕间做约定，最好在顶层设计一些通用抽象的功能。不然未来就看不懂代码了。\n本应记录更多日志面对一些棘手的Bug，在尝试各种方案的同时，要确保多留一些日志。\n本应谨慎使用nullnull代表的是不存在，而不是默认值。使用null就意味需要在之后不断地判断是否为null。\n比如用户的主题设置怎么会不存在，最多也就是默认主题。对吧！\n能不用null就不用。使用enum、sealed interface或者继承都会优雅的多。\n本应注释废弃的功能把废弃功能入口关掉就好，谁不知道未来会不会有用。\n本应适度使用Singleton这里不是用多了，而是用少了。\n都怪Android一开始鼓吹不用Singleton，导致我尽可能用依赖注入的@Resuable来控制内存。但是这会让一些简单的操作都复杂起来。\n既然一个对象从应用开始之初就会被分配并一直使用，就乖乖用Singleton。性能问题几乎永远不会在于几个Singleton。\n","categories":["Android"]},{"title":"Android System UI","url":"/2019/05/06/android-system-ui/","content":"整理自Becoming a master window fitter 🔧)，解释那复杂的Android状态栏与导航栏和应用界面的关系。\n只是一些笔记。\n\n\n本文用“😲”代表“状态栏与导航栏”这七个字。\nsetSystemUiVisibilitySYSTEM_UI_FLAG_\n\nVISIBLE：让😲回来，重新显示\nLOW_PROFILE：让😲暗淡\nHIDE_NAVIGATION\nFULLSCREEN\n\nSYSTEM_UI_FLAG_\n\nIMMERSIVE：让😲消失，但一有操作就会回来。\nIMMERSIVE_STICKY：和上面一个一起用，但有操作时，让😲悬浮出现，稍等后再消失。\n\nSYSTEM_UI_FLAG_\n\nLIGHT_STATUS_BAR\nLIGHT_NAVIGATION_BAR\n\n让😲浅底深色。默认是深底浅色。\nSYSTEM_UI_FLAG_\n\nLAYOUT_STABLE\nLAYOUT_HIDE_NAVIGATION\nLAYOUT_FULLSCREEN\n\n跟应用内容的显示有关系。\n让应用内容在😲后面显示：LAYOUT_STABLE or LAYOUT_FULLSCREEN or LAYOUT_HIDE_NAVIGATION，后文用WTFs代替。\nview.systemUiVisibility =    // Tells the system that you wish to be laid out    // as if the navigation bar was hidden    View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION or    // Optional, if we want you be laid out fullscreen,    // behind the status bar    View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN or    // Tells the system that you wish to be laid out at    // the most extreme scenario of any other flags    View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n\nFrom Dark Theme &amp; Gesture Navigation (Google I/O&#39;19)\nandroid:windowTranslucentStatus和android:windowTranslucentNavigation从KitKat引入。让😲把透明、渐隐。应用内容在它们后面显示。它们会自动应用WTFs。渐隐不能改变颜色。\nandroid:windowDrawsSystemBarBackgrounds从Lollipop引入。默认已开启。\n把😲放到了应用内容的Window中，好让我们可以activity.window.setStatusColor。\n和android:windowTranslucent有冲突。后者会覆盖前者设置的😲的颜色，且会关闭android:windowDrawsSystemBarBackgrounds，这会导致😲不再是应用内容的一部分，从而可能导致涉及到😲SharedElement动画失效。\n因此为了得到半透明的😲颜色，可以用一个半透明的android:statusBarColor或android:navigationBarColor，而避免使用android:windowTranslucent。\nandroid:fitSystemWindows=&quot;true&quot;让这个View自己使用Padding填充周围，让它的内容不和会😲重叠。几乎只有MaterialCompoents（CoordinatorLayout、DrawerLayout、CollapsingToolbarLayout等）才对这个属性有反应。\n在和WTFs共同使用后，应用内容就可以既在😲后显示，也不和😲重叠。\nDrawerLayout设置android:fitSystemWindows=&quot;true&quot;后，会自动设置WTFs。\n可以给子View设置，选择是否让子View出现在😲后。\nWindowInsets正确的使用😲大小的方式。不许使用resources或hard-coded尺寸，得用这个。\nview.setOnApplyWindowInsetsListener &#123; _, insets -&gt;    return insets.comsumeSystemWindowInsets&#125;\n\nViewsCoordinatorLayout\n\napp:statusBarBackground\n\nCollapsingToolbarLayout\n\nstatusBar: app:statusBarScrim。默认colorPrimaryDrak。\ncontentScrim: app:contentScrim。默认@null。\n\n参考与资源\nBecoming a master window fitter 🔧)\nWindowInsets — Listeners to layouts\nSystemUiHelper.java\nSystemUiHelper\nMaterialize\n\n","categories":["Android"]},{"title":"Android开发牢骚 - 2021年2月6日","url":"/2021/02/06/android-thoughts-20210206/","content":"好几个月没写东西了，主要是因为开发界无新鲜事，没啥可写。今天勉为其难地发发牢骚。\n\n\nStateFlow和SharedFlowKotlin Coroutines的新玩意儿，看样子要在Kotlin项目中替代LiveData，最近的MAD Skills的问答视频中也表达了类似的观点。\n但我在UI层使用Coroutines的体验实在难言理想，比如Fragment.viewLifecyclerOwner在Fragment.onViewCreated丢NPE呀，lifecycleScope.launchWhen不正常运行呀、自定义CoroutineScope里的代码不执行呀等，还有文档中那劝退的两段说明。和UI层通信还是乖乖用LiveData吧。\ncallbackFlow和TestCoroutineDispatcher作为实验API已经快两年了吧，JetBrains是不是把它们都忘了呀。\n最近浏览了Flutter的异步实现，很是羡慕。突然觉得手里的Coroutines不香了。\nHiltDagger是个好东西，虽然学起来有几丢丢难，但依赖注入让新增功能和测试变得很容易。\nHilt更是好东西，学起来无脑，用起来也简单。\n唯一想吐槽的就是这玩意儿虽说还是Alpha，但官方已经到处推荐人使用了。官方说法是，Hilt很稳定啦，我们Google内部的应用也都在用，跑在很多很多设备上都没问题啊，只不过想在正式版前再加点东西、改点东西。可惜我被坑怕了，非正式版的不敢用，正式版了也要等几个修复版才敢用，就这个样子还遇到不少坑哩。\n语义化版本是不是只算加分项？\nAndroid StudioIDE开发都是这个样子吗，搬了西瓜丢芝麻，这里修好那里漏？\nAS 4.x版本可以说体验极差。Google内部是不是人手三台MBP，每台机器跑10个Android模拟器不带卡。\n每天都需要多次重启和Invalidate Cache and Restart。ViewBinding不显示了、资源ID不识别了、Kapt莫名报错了、Dagger生成代码不正常了……\n结语也许开发一直都是这个样子吧，还记得AS 2.3的Instant Run坏掉时，到处找解决方案，还参与Stackoverflow讨论的情景。时至今日，嘛也不剩了。\n","categories":["Android"]},{"title":"Android应用白名单指南","url":"/2019/01/11/android-whitelist-guideline/","content":"更新日期：2022年9月2日\n背景第三方厂商生产的Android设备（包括但不限于一加、华为、三星、小米、魅族、华硕、Wiko、联想、OPPO、VIVO、诺基亚、索尼等，排名根据严重程度分先后），都存在不同程度的强杀后台的问题。具体表现为应用在熄屏或切换到其他应用时，经过短则几十秒，长则十几分钟后，应用被系统强制关闭。\n需要用户自行进入系统设置中，设置一些选项才可让应用正常运行。这一过程在本文中称为“白名单”。\n\n\n\n问：为什么微信、QQ、网易云音乐等应用进入后台后可正常运行？\n答：生产厂商给予了这些流行的大众应用默认白名单的特别优待。\n\n以下资料搜集自网络，请自行参考使用。\n指南根据推荐度排名分先后\n\nGithub项目dont-kill-my-app，记录了一些流行设备的白名单指南（英文）\n\nTasker的白名单指南（英文）\n\n少数派 - 手机里有无法正常运行的 Android 应用？用这四步手动排查问题（中文）\n\n轻应用的白名单指南（有图片、中文）\n\n某个应用的Bitbucket项目中的一个Issue，提供了很多手机手机白名单过程的图片指南（英文）\n\nSlack的帮助文档，提供了很多设备的通知白名单的指南（英文）\n\n\n计时机器的额外指南\n在应用打开【侧边栏/抽屉/汉堡包】-&gt;【帮助与反馈】-&gt;【白名单指南】，其中有计时机器需要白名单的解释，下方还可能会有一些按钮，点击后可以打开设备的一些设置页面。没有的话，就需要参照上述指南。\n\n华为设备的一张单独的链接：https://github.com/DeweyReed/site/blob/master/source/_posts/timer-huawei-solution.md\n\n\n","categories":["Android"]},{"title":"Android 12升级笔记","url":"/2022/06/25/android12-upgrade-notes/","content":"一些笔记没地方放了就决定丢这里。\n\n\nAndroid App Links verification changeshttps://developer.android.com/about/versions/12/behavior-changes-all#web-intent-resolution\nhttps://developer.android.com/about/versions/12/behavior-changes-12#android-app-links-verification-changes\nForeground service launch restrictionshttps://developer.android.com/about/versions/12/behavior-changes-12#foreground-service-launch-restrictions\nExact alarm permissionhttps://developer.android.com/about/versions/12/behavior-changes-12#exact-alarm-permission\nNotification trampoline restrictionshttps://developer.android.com/about/versions/12/behavior-changes-12#notification-trampolines\nWidgethttps://developer.android.com/about/versions/12/features/widgets\nhttps://github.com/android/user-interface-samples/tree/main/AppWidget\n","categories":["Android"]},{"title":"Android 13升级笔记","url":"/2023/02/22/android13-upgrade-notes/","content":"一些笔记没地方放了就决定丢这里。\n\n\n\nNotifications\n\nhttps://developer.android.com/about/versions/13/behavior-changes-all#notification-permission\nhttps://developer.android.com/about/versions/13/behavior-changes-all#dismissible-fgs-notifs\n\n\nRecognitionService\n\nhttps://developer.android.com/about/versions/13/behavior-changes-all#speech-service\n\n\nStorage\n\nhttps://developer.android.com/about/versions/13/behavior-changes-13#granular-media-permissions\n\n\nIntent\n\nhttps://developer.android.com/about/versions/13/behavior-changes-all#intents\n\n\nGMS\n\nhttps://developer.android.com/about/versions/13/behavior-changes-13#ad-id\n\n\nPer-app language preferences\n\nClipboard preview\n\nAvoid duplicate notifications\n\n\nPredictive back gesture\n\nSafer exporting of context-registered receivers\n\nPhoto picker\n\nNew permission to use exact alarms\n\nTablet and large screen support\n\n\n","categories":["Android"]},{"title":"Android 15升级笔记","url":"/2025/01/10/android15-upgrade-notes/","content":"一些笔记没地方放了就决定丢这里。\n\n\n\nSupport for 16 KB page sizes\nCollision with MutableList.removeFirst() and MutableList.removeLast() extension functions in kotlin-stdlib\nSafer intents\nEdge-to-edge enforcement\nRestrictions on requesting audio focus\nSecured background activity launches\n\n","categories":["Android"]},{"title":"Android 16升级笔记","url":"/2025/06/27/android16-upgrade-notes/","content":"没活了的Android 16。\n\n\n\n16 KB page size compatibility mode\nContent handling for live wallpapers\nMotion photo capture intent actions: May be unavailable on some Android 16 devices\n\n","categories":["Android"]},{"title":"Android 14升级笔记","url":"/2024/04/22/android14-upgrade-notes/","content":"一些笔记没地方放了就决定丢这里。\n\n\n\nSchedule exact alarms are denied by default, https://developer.android.com/about/versions/14/changes/schedule-exact-alarms\nGrant partial access to photos and videos\nSecure full-screen Intent notifications\nForeground service types are required, https://developer.android.com/about/versions/14/changes/fgs-types-required\nRestrictions to implicit and pending intents\nRuntime-registered broadcasts receivers must specify export behavior\nAdditional restrictions on starting activities from the background\nConvert scaled pixel (sp) units\n\n","categories":["Android"]},{"title":"换域名啦","url":"/2023/06/10/changing-domain/","content":"由于 不想继续花钱续费域名 想不到心仪的域名，决定用回GitHub的默认域名。平平淡淡才是真。旧域名再续个几年就丢掉了。\n本文记录换域名和重定向的历程。\n\n\n旧域名是在NameSilo购买的。NameSilo的界面是复古了点，但能出色完成工作。\n但在使用其提供的重定向试图将旧域名定向到GitHub默认域名时，发现其不支持HTTPS，导致直接访问链接失败。一番搜索后发现有人提到了用Cloudflare来移花接木。\n于是问了问ChatGPT具体该怎么做。走了不少弯路，ChatGPT也说了几个错误的步骤，不过到最后还是帮到了我。从结果上来说，根据Cloudflare的教程导入域名后，保持导入的DNS不变，增加一个Page Rule是最终的解决方案。\n接下来就是迁移项目中用过的旧域名了。怕不是要花几年哟。\nChatGPT现阶段虽然错误不少，但我想到了前段时间看的一个神经学家的视频，人类的进化不也是一路犯错过来的嘛。\n","categories":["Website"]},{"title":"想要自动清空浏览记录","url":"/2020/08/06/clean-browser-history/","content":"一直有个心结：在网上冲浪时，不想留下任何痕迹。倒不是因为浏览记录中有什么见不得人的内容（真见不得人就用Tor啦），而是在搜索栏输入一些内容，却看到一些自己以前搜索过的关键词，会有一种被窥探、被监视的糟糕感觉。\n每个浏览器都有手动清空包括浏览记录在内的各种信息的一个选项，但是在每次使用完浏览器后，都要手动清空一次太机械、太重复了，而且重复的操作是要抽象出来复用的。于是，我踏上了一条自动清空浏览记录之路。\n\n\n不争气的ChromeChrome的设置中并没有退出浏览器时，自动清空浏览记录的设置，反而有一个退出时自动清空Cookie的设置，但我不需要它，因为我还是想要下次启动浏览器时，登陆状态被保存。而且如果在搜索引擎中搜索如何自动清空浏览记录时，几乎全都是这个清空Cookie设置相关的链接。\n于是，我求助于Chrome扩展。的确有这么一个扩展Click&amp;Clean可以在关闭浏览器时，自动清空浏览记录。它的设置很齐全，也很方便，而且还时不时弹出各种保护隐私的小技巧。\n我用了很长一段时间，但是应该是从2019年的某个时候，它的小技巧弹窗开始烦人了，不仅不能永久关闭，还一直循环弹出那些重复的内容。再看Chrome扩展商店中它的评论，会发现有大量的机器人好评，有限的看起来像真人的评论也几乎都在抱怨弹窗。进一步在网络上搜索后，还发现有人怀疑它是间谍软件，但我没找到什么确凿的证据。\n这让我不禁思考：它为什么这么做？如果它的弹窗内容是广告，可以理解为要盈利。但它弹的是自己的文章，而且此外也没有什么赢利点。同时考虑到它并不开源，却一直在更新，我对这个扩展的运营模式产生了深深的怀疑。其实，我对不少浏览器扩展的盈利模式都挺疑惑的，除了不少用爱发电的开源扩展，那些成功却又没有明显赢利点的扩展，是怎么存活的呢？\n我开始寻找下一个替代品。\n开源但还需完善BleachBit稍加搜索后，我发现了开源的BleachBit，据说希拉里用了都说好（在以前的软件主页中提到过，估计为了避免不必要的麻烦，现在没有了，但在维基中还有记录）。\n这个软件并不支持关闭浏览器时，自动清空浏览记录，但是我发现可以通过命令行，在某个特定时间或每次开关机时，运行该软件清理浏览记录，而BleachBit也确实提供了这么做的详细文档，还包括了各个平台的具体操作指南。\n用了一段时间后，我发现它失效了。在翻看它的Github Issues后，发现的确是个Bug，同时也发现Chrome存放历史记录的方案还挺复杂的。\n我等不及Bug修复了，于是决定寻找下一个替代品。\n还差临门一脚的Chromium Edge微软的新Edge现在应该正式推送了，而它也正好内置了关闭浏览器时，自动清空浏览记录的功能，这让我非常满意，也产生了迁移到新Edge的念头。\n在把新Edge的设置舔了个干净，并初步尝试后，发现新Edge整体上不错，但在一些糟糕的小细节很破坏我的体验，比如语言设置对有些网站不起作用、Google系网站一直推荐Chrome（尤其对我这种给Google Android写代码的人来说）等。\n当然，未采用新Edge只是因为现阶段的个人需求造成的。没有类似的需求，且不介意从别的浏览器迁移的话，新版Edge就是完美的解决方案。\n目前的解决方案：CCleanerBleachBit启发了我：只要清理垃圾的软件支持清理浏览记录和命令行，就可以通过系统中计划任务的机制来达成目的。因为我一直在用CCleaner清理垃圾，所以在稍加搜索后，的确发现了它的命令行接口。尝试后发现效果令人满意。另外，如果是Pro版的话，可以直接用它的智能清理。免费版的话，就需要命令行了。\n用了一段时间，发现有几个小缺点：\n\nCCleaner默认会清理Cookie，需要在软件中手动关掉。\n命令行调用是异步的，且一次清理比较费时，从而导致有时候清理的同时浏览器正在打开的话，会安静地失败。使用了一段时候后，发现是真的有点慢。\n不知为何会导致Adobe CC退出登录。\n\n完历时几年的旅途终于告一段落了。如果未来CCleaner也成了流氓软件（现在也有一些还算克制的流氓行为，比如安装时尝试捆绑一个杀毒软件，不过拒绝按钮很大很明显），或者新Edge一骑绝尘，再来更新。\n火绒CCleaner变成了流氓软件，会在后台不停地向Avast发统计。\n下了一个火绒。把各种功能关掉后，手动使用其垃圾清理。\n平平淡淡才是真。\n回到了BleachBit火绒会替代Windows Defender且无法撤销。尝试了其他途径后，最后回到了BleachBit。现在似乎修好了之前的问题。\n","categories":["Notes"]},{"title":"Dagger2 入门路线图 (2018年5月)","url":"/2018/05/20/dagger2-roadmap/","content":"2019年11月22日 本文已过时 请查看Android官方的Dependency Injection教程和Codelab 谁能想到dagger-android要凉凉了呢？\n2018年5月20日更新了测试的更多思路\n2018年5月19日更新了Dagger2测试的思路\n现在是2018年5月，Dagger2的版本是2.16，Kotlin版本是1.2，IDE是Android Studio。\n过时的话就要话就要慎重地看。\nDagger2学起来是真心难受，现有的很多资料都已过世，误人子弟，而且和Kotlin结合在一起，会有很多很多坑和弯路。\n\nCopy-pasting code makes it hard to refactor later on. As more and more developers copy-paste that block, fewer will know what it actually does.\n\n本路线图指明的是：\n从：对Dagger2只懂一点，不熟悉，只会到处复制粘贴。\n到：熟悉Dagger2的使用方法，明白什么时候用interface，什么时候用abstract class，什么时候用@JvmStatic等等，能够看懂生成的代码，能分辨出Dagger2实现的好坏。\n\n\n\n因为Dagger2 + Kotlin有不少坑，建议先用Java操练，再用Kotlin。\n\n\n官方文档 User’s Guide\n Dagger2面向的是Java项目，所以先不涉及Android代码也可以运行。\n 官方文档现在比较友好了，结合其中的代码，并阅读生成的代码，理解Dagger2的原理。试一试什么@Singleton啊，@Named呀。\n\n使用Build =&gt; Make Project生成代码。\n这一步研究生成的代码可以说很重要了。Dagger2的实现并不复杂，但信心++。\n\n\n官方文档 Multibindings\n 官方文档的顺序有问题，所以先跳过Android的部分。\n Multibindings内容比较简单，主要为以后做准备。\n\n官方文档 Subcomponents\n 重头戏来了，Subcomponenets将会是使用dagger-android的核心，必须要理解的内容。\n\n至于后面的Producers，Testing，需要时再看也可以。\n\n\n官方文档 Android\n 这其中最莫名其妙的内容应该是@ContributesAndroidInjector的引入。简单来说它仅仅是简化了Subcomponent的建立过程。看不懂时先忽略，明白了Subcomponent的使用再回来看它。\n 想要具体理解dagger-android的使用，还需要搭配\n\n[HOW-TO] Android Dagger (2.11–2.14) Butterknife (8.7-8.8) MVP (Part 1)\n 非常详细的指南。可以算是Best Practices了。\n\n这个月刚更新的，还热乎，乘早了。\n虽然支持到Dagger2.14，但Dagger2.15、2.16也只是修理修理Bug\n它支持support和无support的版本，还包括对应的kotlin版本。\n\n\n\n\nDagger + Kotlin\n 多坑地带。宝贝有\n Kotlin+Dagger best practices/documentation\n @Named(…) qualifier not working with Firebase or Kotlin\n 比较有用的有：静态@Provides的两种方法、@field:Named的使用等等。\n\n其他\n Dagger 2 Generated Code.粗略地介绍了Dagger2生成的代码。如果在第一步研究够了的话，这里不是什么问题。\n\n\n至此，如果项目中出现了以下情况，都可以认为其不是Best Practices：\n\nAndroid项目中没有使用dagger-android(AndroidInjector等)\n在Activity中引用Application来获得DaggerAppComponent再注入，而不是使用AndroidInjection\n没有使用Scope而是手动管理。\n到处都是@Singleton而没有用@Reusable或其他\n其他的还没想到或见到\n\n测试虽说官方文档中说Dagger2呀，测试很方便，但资料却很少。在逛遍SO和Github后，找到一些不成熟的还算能用的方案。这方面并没有一个Best Practice，哪个符合使用情况用哪个。八仙过海，各显神通了。\n\n使用测试用的TestAppComponent\n  Instrumentation Test时，重写AndroidJunitRunner，在其newApplication中返回一个TestApplication，在TestApplication中注入一个测试用的TestAppComponent。\n\n官方文档中TestAppComponent继承了AppComponent，但在使用dagger-android时，会有一些问题，因此不继承了。TestAppComponent和AppComponent差不多，修改为测试用Module并暴露一些需要的类。\n\n\n新建一个使用TestAppComponent的Flavor\n  参照Blueprints中的Dagger。虽然工程量比较大，但测试起来还算方便。\n\n不使用Dagger2，直接mock\n  参照GithubBrowserSample，同样重写AndroidJunitRunner和newApplication，但在TestApplication中不注入任何依赖。测试时，直接手动mock。\n\n还有各种第三方库，比如DaggerMock\n\n\n\n","categories":["Android"]},{"title":"Docker快速搭建Wordpress + HTTPS","url":"/2018/03/20/docker-wordpress/","content":"虽然最终选择了GithubPages + Hexo，但之前使用Docker搭的Wordpress + HTTPS。搭完后才发现维护起来又累又贵，就把整个流程贴出来留给有缘人吧。\n甩锅申明：出了问题我不知道怎么解决，请问万能的Stackoverflow吧😉\n好处：\n\n方便，命令几乎都是cd, ls和nano/vim。\n快速，不需要LAMP或者LNMP漫长的安装/编译过程。新机器建站和删库跑路都很快。\n干净，不污染其他文件夹，删除网站只需要一条Docker命令。\nhttps，Let’s Encrypt! 不仅是网站，还要加个绿色的小锁。\n\n\n\n坏处：\n\n出了问题不好解决，包括通过命令行修改网站、给网站装个监控什么的等等，都涉及有一定门槛儿的Docker命令。但对于正常地通过Wordpress面板的操作足够了。\n\n准备工作先把域名解析上，最后上小锁时需要。\n新系统来了先\napt updateapt upgrade\n\n老系统没有apt，用apt-get\n安装DockerDocker是将程序和其依赖放在容器中，再进行部署的开源软件……总之很方便就对了。\n在其官网，不同系统有不同的安装教程。\nUbuntuDebianFedoraUbuntu\n中文文档在\nUbuntuDebianFedoraUbuntu\n举例：我的Debian8（注意对内核有要求）是：\napt-get install \\     apt-transport-https \\     ca-certificates \\     curl \\     gnupg2 \\     software-properties-commoncurl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo &quot;$ID&quot;)/gpg | apt-key add -# 可选，查看签名是否添加成功，在输出的内容中应该有下面那行内容。apt-key fingerprint 0EBFCD88# 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88add-apt-repository \\   &quot;deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo &quot;$ID&quot;) \\   $(lsb_release -cs) \\   stable&quot;apt updateapt install docker-ce\n\n安装Docker-compose一次运行多个容器的工具。\n官网有安装指南，中文的似乎没翻译。\n举例：\ncurl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-composedocker-compose --version\n\n安装代理安装之前，先新建一些文件夹，来存放我们网站的内容。\n#/你的目录#    /nginx-files#    /database#    /wordpress#        /core/files#        /wp-content# 命令是：mkdir nginx-filesmkdir databasemkdir wordpresscd wordpressmkdir coremkdir wp-contentcd coremkdir filescd 回你的最上层目录\n\n安装代理需要这么一个Github Repo: Web Proxy using Docker, NGINX and Let’s Encrypt\n它的README有安装教程，但有几个坑。\n\n下载Repo：git clone https://github.com/evertramos/docker-compose-letsencrypt-nginx-proxy-companion.git\n【可选】如果不使用反向代理的话，可以删掉Repo中/conf.d/realip.conf\n【可选】可以修改/conf.d/uploadsize.conf中的client_max_body_size的值，默认是100MB，限制上传文件的最大大小，不够就加大。\n改名，mv .env.sample .env\n修改变量，nano .env，或者用vim。\n需要修改的变量有\nIP：修改为机器的IP \nNGINX_FILES_PATH：修改为刚刚新建的nginx-files文件夹的路径\nUSE_NGINX_CONF_FILES：【可选】去掉变量前的井号。这里是要使用conf.d文件夹下的设置，包括之前第三步上传文件的最大大小。如果不在乎这几个设置也可以不管它（后果就是搭好后上传主题时，2MB就GG）\n\n\n运行./start.sh\n\n安装Wordpress又需要一个Github Repo：Using Wordpress with SSL enabled integrated with NGINX proxy and autorenew LetsEncrypt certificates\n同样有几个坑。\n\n下载：git clone https://github.com/evertramos/wordpress-docker-letsencrypt.git\n\n【可选】新建一个uploads.ini的文件，内容是\n file_uploads = Onmemory_limit = 64Mupload_max_filesize = 64Mpost_max_size = 64Mmax_execution_time = 600\n 这里跟上一步中修改上传文件的最大大小是一致的，要么一起用，要么就不用，下几步的可选也是一样的，不用的话都可以跳过。这里的最大上传文件设置为64MB，不够随便改。\n\n【可选】修改docker-compose.yml，在services - wordpress - volumes下加一行- $&#123;PHP_UPLOAD_CONF&#125;:/usr/local/etc/php/conf.d/uploads.ini\n\n改名，mv .env.sample .env\n\n修改.env\n\nDB_PATH: 修改为刚刚新建的database文件夹的路径\nMYSQL_ROOT_PASSWORD: 挑一个数据库根密码\nMYSQL_DATABASE: 数据库的名字，随便取，习惯上用wordpress\nMYSQL_USER: 数据库用户，随便取，习惯上用wordpress\nMYSQL_PASSWORD: 挑一个数据库密码\nWP_CORE: 修改为刚刚新建的core文件夹的路径\nWP_CONTENT: 修改为刚刚新建的wp-content文件夹的路径\nDOMAINS: 修改为开头就应该解析上的域名\nLETSENCRYPT_EMAIL: 修改为你的邮箱，用于Let’s Encrypt\n【可选】如果执行了2、3步的话，最后加一行PHP_UPLOAD_CONF=/刚刚新建的文件路径/uploads.ini\n\n\n运行docker-compose up -d\n\n\n等个几十秒一分钟，网站就可以使用了，带个https绿色小锁。\n命令与支援\n不带-d直接运行docker-compose up可以查看日志，用于排错。\n在第二个Repo的文件夹中，运行docker-compose down可以停止Wordpress。\ndocker container ls [--all]: 显示所有Container，最后不带--all的仅显示运行中的，带的话还显示已停止的。最后应该一共有5个Container。\ndocker rm [--force] linux_tweet_app: 删除一个Container，带--force强制删除，无视是否运行。\n\n","categories":["Website"]},{"title":"aprildown.xyz将会在未来到期","url":"/2023/08/12/domain-expiration/","content":"惊闻XYZ域名即将涨价，索性决定再续费一两年后放弃该域名。之后继续乖乖地使用无需多虑的Github域名。\n","categories":["Website"]},{"title":"Github Stars整理","url":"/2019/11/24/github-stars/","content":"由于要收藏各种Repo，但有的Repo因为年久失修或其他原因，食之无味弃之可惜，只好丢在这里了。\nGithub的Stars页\n\n\nwbwwb(We Become What We Behold – a minigame about the news!)\nMaterialStyledDialogs(A library that shows a beautiful and customizable Material-based dialog with header. API 11+ required.)\nintellij-jvm-options-explained(Common JVM options used with Intellij and what they do)\nuplift(A playground for elevation on Android)\nGradientView(Create gradient view in Android in the simplest way possible 🌈)\nBottomNavigator(Android Bottom Navigation multiple stack manager)\nBalloon(🎈 A lightweight popup like tooltips, fully customizable with arrow and animations.)\nOnly(💐 An easy way to persist and run code block only as many times as necessary on Android.)\nSwipeSelector(A nicer-looking, more intuitive and highly customizable alternative for radio buttons and dropdowns for Android.)\nSubmarine(🚤 Floating navigation view for listing items dynamically on Android.)\nSystemUiHelper(Helper for dealing with Android System UI visibility)\nChangeDetection(Automatically track websites changes on Android in background.)\nAudioRecorder(Audio Recording Android application)\nInternalAppStore(Manage your own internal Android App Store.)\nadb-enhanced(🔪Swiss-army knife for Android testing and development 🔪 ⛺)\nCyanea(A theme engine for Android)\nbintray-release(A helper for releasing from gradle up to bintray)\nnotify(Simplified notification construction and delivery for Android.)\naesthetic(🔮 A fast, easy to use, dynamic theme engine. Powered by Rx and Kotlin, for Android apps.)\nBottomSheetBuilder(A simple library that creates BottomSheets according to the Material Design specs)\nStateMachine(A Kotlin DSL for finite state machine)\nFlashbar(⚡️A highly customizable, powerful and easy-to-use alerting library for Android.)\ngradle-dependency-graph-generator-plugin(Gradle plugin that generates dependency graphs from your project.)\nHyperion-Android(App Debugging &amp; Inspection Tool for Android)\ndesertplaceholder(Animated placeholder in desert style.)\ndexcount-gradle-plugin(A Gradle plugin to report the number of method references in your APK on every build.)\nstf(Control and manage Android devices from your browser.)\nbeautiful-jekyll(✨ Build a beautiful and simple website in literally minutes.)\nCipher.so(A simple way to encrypt your secure data like passwords into a native .so library.)\nCustomActivityOnCrash(Android library that allows launching a custom activity when your app crashes, instead of showing the hated “Unfortunately, X has stopped” dialog.)\ngradle-play-publisher(GPP is Android’s unofficial release automation Gradle Plugin. It can do anything from building, uploading, and then promoting your App Bundle or APK to publishing app listings and other metadata.)\nAndroid-LocalizationActivity(Let’s make language swithching in your app with easy way)\n","categories":["Notes"]},{"title":"Google I/O 2018 笔记","url":"/2018/05/12/google-io-2018-notes/","content":"把今年I/O的内容参加的差不多了，这里记录一些对我有用的东西。\n\n\nJetpack感觉像是给Development换了个更酷的名字。四块中Architecture中才是最重要的各种Libraries。\n最有亮点的应该是Navigator。在将Activity和Fragment的逻辑分离出来后，单Activity加多Fragment成为了官方推荐的做法，这样让动画也更方便了。\nWorkManager算是造了一个大轮子，使用起来似乎比现有的更方便。把后台运算、服务、Job Scheduler、GCM、FCM等都可以替代了。\nPaging，ListAdapter和Recycler Selection覆盖了更多的列表显示。\nContraintLayoutRelativeLayout都不推荐，要被取代了。而且还引入了关键帧动画，可以说野心很大了。\nArchitecture当初看Android Permormance Pattern的内容还历历在目，现在就说枚举可以用了，内存使用也放开一些手脚，也有了推荐的框架。\n其他\nMaterial Theming和Component给开发和设计带来了更好的指导。\n长文字的显示可以用RecyclerView或者premeasure来处理\n使用夜间主题来省电\nSlice是不是要取代Widget呀，还要观望一下。\n\n","categories":["Android"]},{"title":"灰度显示","url":"/2018/11/04/greyscale/","content":"搜集的一些如何在电子设备上打开灰度显示的设置。\n\n\n\nWindows10\n\n设置搜索“颜色滤镜”，勾选“允许使用快捷键打开或关闭滤镜”，把滤镜设置为“灰度”。使用Windows + Ctrl + C切换灰度。\nflux，最新版(4.84)有灰度设置。\n\n\nAndroid 5.0及以后\n\n开发者设置，从最后开始找“模拟颜色空间”，设置为“全色盲”。\n应用灰度，或在酷安搜索。\n\n\n\n其他的，有缘再添加吧。\n","categories":["What"]},{"title":"Gradle缓存笔记","url":"/2022/03/06/gradle-cache/","content":"来自于：\n\nUnderstanding Different Gradle Caches for Android Projects, part 1.\nUnderstanding Different Gradle Caches for Android Projects, part 2\nUnderstanding Different Gradle Caches for Android Projects, part 3\n\n\n\n[Build]-[Clean Project]和gradlew clean都是仅删除根目录和Module目录下的build文件夹。build文件夹是Gradle自带的、默认的缓存策略。\nBuild Cache（现在默认关闭，通过--build-cache或org.gradle.caching=true打开），使用了默认单项目缓存一样的机制，会把部分缓存保存到~/.gradle/caches/build-cache-*，机器上所有项目可共享。这也就是为什么Dagger偶尔失效时，需要删除系统Gradle缓存的原因。\n\n文中提到R.java，但记得在某个AGP版本中，文件已经变成jar，轻易找不到了。\nkapt的useBuildCache在某个版本中默认开启了。关闭文档。\n\nGradle Deamon默认开启。\n依赖储存在~/.gradle/caches/*中。其中transform-*保存了本地修改后的依赖，非下载内容。\nInvalidate Caches / Restart只清理IDE缓存，不清理上述缓存。\nandroid.enableBuildCache在AGP 7中被弃用。\norg.gradle.unsafe.configuration-cache=true实验中的Configuration Cache，期待正式版。缓存储存在[PROJECT_ROOT]/.gradle/configuration-cache中。\n还有一些各种属性的默认值。\n","categories":["Android"]},{"title":"在Android Studio中引入AAR文件","url":"/2018/08/13/include-aar/","content":"2019年2月10日 更新发现一个更好的方案：不管是自己的项目还是Fork来的项目，直接到Jitpack里找到对应的commit，拉下来直接用。这样就省去了很多体力劳动。而且这个过程并不需要配置Gradle，源码都自带。【完】\n任务很简单，最小程度影响当前项目的前提下，导入一个AAR第三方库。\n要解决的问题在于\n\n按导入.jar的方法导入.aar会失败\n使用Android Studio自带的Improt Module中的导入AAR会创建一个新的Module，而我们只想声明一个依赖\n\n\n\n这么做的优点\nModule该有好处自然有的了\n不需要复杂漫长地发布到JCenter等地方，才能使用依赖\n修改后直接复制粘贴AAR就可使用\n\n缺点也是明显的\n不要求发布，就不适用多人协作的大项目，电脑GG后源代码也会丢失\n不带注释，需要手动选择代码目录，有时候选择还会失效\n修改后复制粘贴AAR才能使用\nAAR的版本被保存在了另一个项目中\nAAR的依赖需要手动添加到项目的依赖中\nAAR定义的Annotation，比如IntDef，需要手动在Proguard -dontwarn\n似乎并不能跨module使用\n\n缺点比优点多可还行\n个人习惯：\n\n把名字改为library名+git commit编号\n另建一个文件夹专门放各种AAR\n把修改的项目丢到Github或GitBucket\n在版本控制中删掉所有AAR\n\n流程1. 一个有正常的Library Module的Android项目新建一个项目，带上需要的Library，或最简单的就是直接clone一个现有的依赖。\n2. 生成AAR文件使用./gradlew assemble或者Android Studio中, 点击Gradle面板/你的library/Tasks/build/assemble\n我在使用中，单纯地运行应用并不一定能生成AAR。\n3. 定位AAR文件在项目/library/build/outputs/aar/中找到生成的AAR文件，给library-release.aar（谁能解释一下它和library-debug.aar除了名字不一样有什么区别？字节数都一样）改个名字，拉出来。\n最好在文件名后加一个tag或版本号，确保以后更新时Sync Gradle可以成功更新代码库。\n4. 把AAR复制到所需项目复制到项目/app/src/main/libs/下，可能需要新建一个libs文件夹（文件名可以随便起）。\n5. 在Gradle中添加目录首先修改项目根目录主build.gradle，在allprojects/repositories(不写classpath的那个区域里)下添加\nflatDir &#123;     dirs &#x27;src/main/libs&#x27;&#125;\n\n注意把libs替换为你那奇思妙想的新名字。\n在Dependencies中引用AAR添加implementation(name:&#39;library-name&#39;, ext:&#39;aar&#39;)\n注意name中不带后缀。\nTa-Da。完成！\n参考:\nHow to Include an External .aar File Using Gradle?\n","categories":["Android"]},{"title":"论如何避免垃圾游戏","url":"/2023/07/06/how-to-avoid-trash-games/","content":"终于打完了Fire Emblem Engage。过程极度痛苦，在此深刻检讨并反省。有剧透。\n\n\n先假定这是一部想要用游戏换钞票的作品。文末讨论另外一种情况。\n这一作算得上垃圾游戏吗？看到一些中文社区对该游戏总体上持有正面评价，因此先论证标题的合理度。\n正如评价一道菜时，不会因为其中有喜欢的材料和佐料，就忽略掉其他不好的味道。考虑到游戏优秀的画面和出色的难度，还有其他方面的灾难，只能说瑜不掩瑕。\n\n\n游戏此时在Metacritic用户评分6.6，可见一些愤怒玩家的极端情绪。\n在IS自家手游Fire Emblem Heroes中，游戏发布的一月，同步发布了一个卡池。而六个月后，终于有一位新角色（不是一个Engage卡池喔）出现了！可惜不出意外地是游戏中最媚宅的那位。\n相比之下，三房发布后，手游中三房的池子接二连三，多到了有些令人厌烦的程度。\n在手游中，为了赚钱，人气高的角色的换皮都快用脚趾头来数了。而Engage迄今为止只有个位数的角色。\n游戏本体的质量已经不会再变了。过了游戏发售的宣发期，Engage在手游中的人气很凄惨。\n错误的开始三房由光荣开发，而Engage是IS自己操刀。因此和Engage相比的是应该是上一作回声，而不是三房。也可以看到游戏继承了回声和IF的很多设定，比如不停刷新且越来越难的大地图遭遇战、虽然有提升但依旧难受的3D转弯手感、一个皇族配两个家臣的偷懒设定、用一个离谱标签来定义某个角色的方法等。相比回声，进步不少；相比三房，一言难尽。\n而对于硬核的战旗玩家则是另一种情况，在文末讨论。\n现在想起来，在观看游戏发售前的预告片时，我曾有过不详的预感。\n二次元 + 低幼向的画风配合亮丽的低多边形的场景，让我不经想起了另外一款风靡全球的手游。这也让我不仅怀疑自己是不是已经和主流游戏玩家群体的审美脱钩了。\n看着那么多小学生和初中生模样的队友谈论着拯救世界和伸张正义，可信度很低。虽然三房中五年后成长为年轻人的学生们年纪也不大，也比Engage中这帮未成年要可信吧。\n似乎自从苍晓之后，火纹主角团的年纪越来越小了。\n游戏的体验剧情这是我心目中火纹系列中最差的剧情。相比之下，IF等作品的剧情只是平淡、无聊、让人犯困，但这一作可以让催生负面情绪，让人只想快进。\n游戏剧情中有着常见的带动情绪的情节，但其呈现方式非常糟糕。对细节的忽略和演出的敷衍，让一个最差只是平淡的故事，变成了让人苦笑的尴尬桥段。\n反派会制造“异形兵”，这和觉醒和回声中“尸兵”类似，虽然解决了敌人哪里来的问题（凭空捏造出来的），但这样的偷懒到头来却催生了更加偷懒的反派刻画。\n整个故事中，完全没有皇城士兵奋勇作战保家卫国的刻画，有的只是几个反派长驱直入，直取各个国家光杆儿司令的桥段儿。而绝大多数反派都会反水，构成了主角团的不小的一部分。真是最大程度地不浪费建模和立绘。\n另外，在IS上一部作品，纸片马力欧折纸国王中，几乎完美的箱庭解谜游戏却有一个离谱的成就和莫名其妙的结局，让人唏嘘不已。剧情的确不是IS的长项。万年不变的王子复仇记哟。\n人物琉尔是第一位在剧情中完全不提变身为龙的龙族。是剧情被砍了吗？\n纹章士的设定虽然让系列老玩家很兴奋，但也决定了老角色无法有新剧情。没有了成长的各位老角色，最后只沦为了辅助战斗和填充对话的工具人。从故事和剧情上来说，纹章士系统也决定了剧情无法有太多波折。\n画面画面和立绘非常精致。但正如世间万物，精致不会长久。\n游戏播片几乎都是站桩对话，且都集中游戏后半段，没有什么大场面。IF还有几段激动人心的播片（龙马的雷神刀记忆犹新），但对于这一作的播片，只恨不能二倍速。\n在主角第一次在预告片中亮相时，我的第一反应是“大饼脸”。也许是新纹谜留下了心里阴影，对类似于大饼脸的造型都很排斥。巧了，马大饼在这一部中也是主角。\n客气地说，Engage的角色建模保持了统一的风格；老实地说，在建模上很偷懒。看起来像是，同样的脸型，移动移动五官，换点配饰就得到了新角色。这也解释了为何都是大饼脸。\n玩法由于建模精度的提升，且游戏会在UI中加载选中角色的3D模型，导致在打开角色界面时，总会等几百毫秒才能看到角色全貌。同时，所有的UI都无法在操作动画结束前进行下一步。这些特点让整个UI非常难用、卡顿。在不断地买卖武器、切换装备和更改配置时，像是玩几百延迟的FPS。\n由于喜欢秒杀反派，所以游戏都开最低难度，于是我也不知道这作战旗有多精妙咯。\n全成就踩坑游戏中的家园仿佛是一帮大学生头脑风暴后，将草稿案甩给了开发团队后得到的系统。数量多、不完善、无深度且意义不明。全成就列表中的条目更像是用Excel直接拖拽得到的数值设计。\n\n收留动物和捡食材只用于料理\n料理结果取决于厨师，不要数值的话可以空气拌饭\n不要数值而选择空气拌饭的话，就没必要收留动物和捡食材\n研磨戒指只服务于成就\n戒指抽卡主要服务于成就。似乎在高难度的特定几章有点用。要刷一万年才能把戒指都抽齐。\n小游戏（飞龙、肌肉锻炼、钓鱼）全皇冠只有好看这么一个奖励\n俯卧撑要根据速度在黄色区域上方按键\n最高难度的仰卧起坐需要三千分，不需要使劲浪费手柄\n其他小游戏多练习几次就能拿皇冠了\n主角和其他角色提升好感的最快方法是疯狂送最便宜的礼物。礼物商店后期解锁。高价格礼物的用处只是为了显得商店不会太空\n小王八需要持续喂养，不然好感会降\n钓鱼池有九个区，特定时间特定区出特定鱼\n最花时间的成就是全支援和联网战斗相关的成就\n联网战斗只是用玩家的数据，操作是电脑控制的\n想要全角色全纹章士满羁绊要刷一万年。奖励是每队组合的不痛不痒的八句台词\n\n如果？如果Engage是一部只服务于高难度战旗小众玩家的作品，那么一切都可以解释地通！\n\n为什么除了战斗都很糟糕？因为目标玩家只战斗。画面和其他系统都算加分项。\n为什么要引入纹章士这种对新玩家不友好的设定？因为目标玩家必玩火纹。\n为什么手游不出新池子？因为手游面向大众玩家。\n为什么买之前没人告诉我这些？因为IS要赚钱。老任可不会因为游戏不好玩而退款。\n为什么IS不怕销量差？估计是因为手游赚太多了。\n\n反思虽然有着等游戏发售后几个月再买游戏的习惯，但由于火纹系列都有在玩，Engage在发布之初就抓紧了我的钱包。另外，由于四月五日是游戏和手游联动奖励的截止日期，让我买之前也没花太多时间认真思考。然而，联动奖励之后在DLC中永久可领取。\n最简单的方案是在游戏发售后几个月后买游戏时，再次调查评分和评测来决定是否购买。\n而更重要的是，要记牢未来的不确定，而自己能做的是只是欣赏当下已有的优秀作品。\n","categories":["Gaming"]},{"title":"Kotlin + JSON 默认参数适配问题","url":"/2018/05/18/kotlin-json/","content":"2018年5月18日更新：Moshi 1.6增加了Codegen的选项，可以取代Kotshi。原方案依旧可行。\n之前用Gson序列化Kotlin的data class一直都没问题，但一天当data class中出现了默认参数时，问题就来了。\n如果JSON中没有对应的Field，按道理Gson应该生成一个使用了默认参数的data class，但它没有，而且会无视Kotlin的不可null，直接生成一个null。\n那换一个支持Kotlin的JSON库呗。这时Moshi就很厉害了，自带一个Kotlin的Adapter，用起来很舒服。但是在最后生成Release版本时，才发现安装包大了600+KB。原因是Moshi对Kotlin的支持使用了Kotlin的Reflection，这个就很占空间，虽然也有Kotlin Relection Lite这个轻量级版本，但目前并不支持。\n所以，我在\n\n\n在Gson的Issue讨论中，还有Moshi的讨论中，找到了Kotshi，问题才最终解决。\nKotlin + Moshi（不带Kotlin插件）+ Kotshi就是最终解决方案。当然AutoValue之类的也可以，不过没深入研究。\nKotshi没有采用一劳永逸的方案，而是让每个Kotlin data class类都加一个annotation，再根据它生成一个adapter，在序列化和反序列化时手动处理。\n不算很方便的方案，但也算比通过Backing field处理来的舒服。\n","categories":["Android"]},{"title":"用于展示的Markdown徽章集合","url":"/2018/04/19/markdown-badges/","content":"大部分勋章使用markdown，SVG的格式。\n\n\nShields.io\n 满足绝大部分需求，可以自定义内容和样式。没时间看剩下的内容的话，学会这么一个就够了。\n 在搜索栏中输入“github”可以找到一些常用的勋章。\n\nhttps://badge.fury.io/\n 输入项目名（需要项目有版本号（Tag）），生成各种格式的版本勋章。\n\nopen-source-badges\n 提供带有爱心的开源勋章，还有Linceses勋章\n\nJitpack\n 如果使用Jitpack发布，可以使用这个链接直接嵌入Jitpack为你设计好的版本勋章。\n [![Release](https://jitpack.io/v/User/Repo.svg)](https://jitpack.io/#User/Repo)\nAwesome Kotlin Badge\n 如果是awesome kotlin，就又有一个很酷的勋章\n [![Awesome Kotlin Badge](https://kotlin.link/awesome-kotlin.svg)](https://github.com/KotlinBy/awesome-kotlin)\n\n \n\nMaven central\n 一个第三方的针对maven central的版本勋章\n\nAndroid Arsenal\n 在项目信息中间一栏的下方，有“Badge”选项，点击右边”Generate”就可以生成一个链接。\n\nEmoji\n 虽然算不上勋章，但可以起到勋章的作用。\n 常见的就是使用:cn::us:表示支持的语言、国家。 可以直接使用Emoji Cheat Sheet中的内容表示。\n\nWeb.svg.min\n 一些常用图标的Vector格式。\n \n\n各种Licenses\n\nCircleci\n\nTravis CI\n\nCodacy\n\nGoogle Play链接\n\nBug me a coffee\n\n其他勋章集合\n Badges\n Markdown License badges\n repo-badges\n\n\n结论\n使用各种服务时，服务商提供了Badge -&gt; 使用它; 没有 -&gt; 2\n\n使用Shields.io自己做一个\n\n\n","categories":["What"]},{"title":"Material Design 笔记","url":"/2018/05/27/md-notes/","content":"不保证全对、可能更新，这玩意儿主要是给自己看的\n2018年5月27日更新：更新了一些无用的笔记2018年5月23日更新：增加了Material Desgin 2字体的可能的可选值\nMaterial Desgin\n\n\nDesignEnvironmentSurfaces各个元素的厚度都是相同的，1dp，白色，自带一个阴影。但可以通过不同elevation和shadows表示高度。\n\nElevation和Shadows: Elevation指的是元素的高度；后者指的是阴影大小。原则是，高度越大，阴影越大。\n\n元素的分辨率应为无限 =&gt; 使用矢量图\n在Surfaces上显示的内容只要不超出边界，厚度为0，随意使用。\n同一时间这能操作一个Surface。多个Surfaces重叠时，使用不同的elevation分别。\nSurface继承于一张纸: \n\n不是气体或液体，不能穿透。可以规则变形（通过折纸）、可以旋转或移动（动画要协调、用于容纳内容或其他目的）\n可以改变透明度、长宽可变、可以分割或合并\n不可以卷角\n可以凭空出现或消失（魔法）\n点击时，向上升起(elevation++, shadows++)迎接点击。\n\nElevation &amp;&amp; Depth所有元素都有elevation，值越大，内容越重要。常见的有：Dialog 24dp, Drawer 16dp, App Bar 4dp, FAB 6dp\n不同情况和布局，元素的elevation可变。比如点击Button 2dp =&gt; 8dp，Fab 6dp =&gt; 12dp。\n为了解决elevation变化时，不同元素的重叠问题，被重叠的元素可以暂时消失（实现起来复杂了，这类行为尽可能减少）。\nElevation也被用作不同Surfaces的分割，也可以使用颜色或不透明度。\n各元素默认elevation\nShadows分为点光源（Key Light）和平行光源（Ambient Light），结合起来使用。\nLayout元素按8dp排列，小元素按4dp。sp默认大小与dp一样，设置中的字体大小会给sp一个倍数。\nColumns, Gutters, Margins：Margins就是左右边边界（手机16dp，平板24dp），Columns是一个个竖块儿（宽度可变)，Gutters是Columns之间的空隙（宽度可变）。\nColumns和Gutters应为一个宽，一个窄。\n常用的Breakpoints就只剩600dp了吧。\n可触摸元素至少是48dp，边界8dp。不可触摸元素至少是24dp，边界8dp。\n行高通常为48dp。\n响应式个人实现思路：\n\nReveal Drawer：知道MaterialDrawer似乎可以直接拿来用，Support Library中的还真不知道\nReveal Options：Custom View吧\nReveal Card：TextView中的叫ell什么的属性\nTransform Drawer to Tab：两套UI和代码？\nTransform List to Grid：换一下LayoutManager\nTransform Overflow Menu：ifRoom的属性\nDevide Drawer：同Reveal Drawer\nDevide Tab to Cards：两套UI和代码？\nReflow List：FlexboxLayout\nReflow Tab to List：两套UI和代码？\nReflow Picker：两套UI和代码？\nExpand Cards：设置最大宽度和Increment\nExpand Dialog：有区别吗？\nPosition Sheet to Overflow Menu：两套UI和代码？\nPosition FAB：两套代码？\n\nNavigation实现？\nColorPrimary Color：出现次数最多的颜色。没有Accent时取代Accent。\n各种文字颜色和透明度的推荐值\nTypography\nTypeface和Font：前者可以看成一种风格，后者是一种具体字体。\nSans Serif和Serif：是两种typeface。Serif译作衬线，比如I，有衬线就是上下有横杠。sans是无的意思，非衬线体，I就一竖杠。\nMonospace：typeface，宽度都一样。表示数字时很有用。\nHandwriting：typeface，手写体，用于Headlines H1 - H6\n\n分为了12个Type Scale。Headline H1 - H6, Subtitle 1 - 2, Body 1 - 2, Button, Caption和Overline\n\nHeadlines：标题。除六个外还可以使用自定义的字体。Serif或sans serif也可以，它们适合小标题。\nSubtitles：副标题。Serif或sans serif也可以。但自定义字体可能会让问题看不清。\nBody：内容体。Serif或sans serif也可以。不用自定义字体。\nCaption &amp;&amp; Overline(文字上方一横线)：极小字体，用于解释图片或标注。Serif或sans serif也可以。不用自定义字体。\nButton：通常都是sans serif + 全大写。也可以serif。和非互动文字混淆时，用户可能意识不到可以点击。不用自定义字体。\n\n每行字数通常为短为20 - 40，中为40 - 60，最多120。\n开发过程中，可以参考Valid values for android:fontFamily and what they map to?中的字体，图省事得用android:textAppearance=&quot;@style/TextAppearance.AppCompat.**&quot;\n更新：在新版本的Material Desgin 2中，似乎可以通过类似?attr/textAppearanceHeadline6或TextAppearance.MaterialComponents.Subtitle2获取相应的字体。\nIconography图标48dp。编辑时放大四倍，按192dp编辑，4dp边缘。方形边长152dp，圆形直径176dp。\nShapeInteractionCommunicationDevelopmentDevelopment Tuturials(Kotlin Codelabs)新玩意：\n\nMaterialButton取代默认Button。使用style=&quot;@style/Widget.MaterialComponents.Button.TextButton&quot;可以移除背景。\n很多元素用MaterialComponents取代AppCompat\nCardView被囊括在design library中，更名为MaterialCardView\n?attr/textAppearanceHeadline6：新的(?)textAppearance，符合Design中的Type Scale\n\n","categories":["Android"]},{"title":"Deprecated 开发历程","url":"/2019/07/07/personal-info/","content":"Deprecated\n\n","categories":["What"]},{"title":"Nexus 5 购入 刷机 升级 笔记","url":"/2022/07/08/nexus5/","content":"在论坛中看到可以入手一台Nexus 5来测试应用，于是开始了折腾之旅。\n\n\n从淘宝或咸鱼花一百左右收一台Nexus 5。注意它是用老版的Android数据线。\n到手是Android 4.4，在升级到Android 5.0.1后，一切正常。于是开始熟练地adb shell pm uninstall --user 0 -k ...卸载起系统应用来。但是在最后卸载Google搜索后，把机器给弄死机了。无奈只好强制恢复出厂设置。\n根据Nexus 刷机步骤，关机状态下长按音量下+电源就可以进入。要先按音量下。\n顺利双清后，发现系统连不上Wifi了。一通失败的操作后，最后决定根据上文链接手动换系统。\n先去 https://developers.google.com/android/images 下载压缩包，然后ADB一通操作。据说直接运行flash-all脚本就可以，但是我总会遇到系统无限重启的问题。\n最后根据Nexus 5刷机无限重启的解决方案，只好手动输入命令：\nfastboot erase cachefastboot erase userdatafastboot erase bootfastboot erase cachefastboot erase recoveryfastboot erase systemfastboot flash bootloader bootloader-hammerhead-hhz20h.imgfastboot reboot-bootloaderfastboot flash radio radio-hammerhead-m8974a-2.0.50.2.30.imgfastboot reboot-bootloaderfastboot flash recovery recovery.imgfastboot flash boot boot.imgfastboot flash system system.imgfastboot flash cache cache.imgfastboot flash userdata userdata.img\n\n另外发现为了解决无法连接Wifi的问题，必须刷到Andorid 4.4，再到手机中手动升级到Andorid 5。\n","categories":["Android"]},{"title":"Material Desgin响应式布局Android实现思路","url":"/2018/06/03/reponsive-patterns/","content":"虽然Google已经放弃了它的Android平板产品，但开发者不会（哭）。\n在Mateiral Design中，有一部分是关于适配手机小屏幕和平板大屏幕的内容。这里是他们的一些实现思路。\n\n\nReveal 1: Drawer\n简单方案：使用MaterialDrawer，内置了MiniDrawer支持。在代码中根据屏幕大小判断并设置。\nMaterialDrawer MiniDrawerActivity和它的Layout XML\n复杂方案：手动实现\n其他方案：等待Google官方支持\nReveal 2: Options\n简单方案：使用HorizontalScrollView、FlexboxLayout、Overflow Menu的话，修改好一些属性后无需担心。\n复杂方案：使用CustomView，手动排列、显示、隐藏\nReveal 3: Dialog\n手动判断，为小屏幕隐藏那些过多的内容。\nTransform 1: Drawer to Tab\n为了适配Tab，就得用ViewPager。\n所以使用ViewPager + Fragments，在手机屏幕下，禁止ViewPager滑动，移除或隐藏TabLayout，使用Drawer进行切换Fragments；平板屏幕下，允许ViewPager滑动，增加或显示TabLayout，移除Drawer，让用户滑动进行Navgiate。\nTransform 2: List to Grid\n使用不同的LayoutManager和ViewHolder(使用泛型Adapter?)\nTransform 3: Overflow Menu\n设置showAsAction为ifRoom或者在代码中根据屏幕设置。\nDevide 1: Drawer\n同Reveal 1: Drawer\nDevide 2: Tab to Cards\n手机屏幕用ViewPager，平板屏幕用两个Fragment。在Activity中判断。\nReflow 1: List to Grid\n同Transform 2: List to Grid\nReflow 2: Tabs to Lists\n更换每个Fragment的LayoutManager。手机屏幕使用ViewPager，平板屏幕使用Static Fragments。\nReflow 3: Time Picker\n使用不同的Layout XML\nExpand 1: Max Size\n使用不同的style设置width和height。\n顶部空白：1. 顶部添加一个空白View，手机屏幕上0dp，平板屏幕上有高度。2. 直接使用不同的paddingTop。\nExpand 2: Dialog\n我不认为这需要修改任何代码。\nPosition 1: Menu\n在代码中使用BottomDialog并显示或隐藏OverflowMenu(修改onCreateOptionsMenu返回值)。\nPosition 2: FAB\n不同的style，设置FAB的anchor。也可以通过代码设置。\n","categories":["Android"]},{"title":"sed 使用笔记","url":"/2024/04/21/sed/","content":"sed\n\n\nhttps://regex-vis.com/\n\n替换oldfile文件中的每行第一个find为replace，保存内容到newfile中\nsed &#39;s/find/replace/&#39; &lt;oldfile &gt;newfile\n\n替换oldfile文件中的每一个&lt;space&gt;find为replace，保存内容到newfile中\nsed &#39;s/ find/replace/g&#39; &lt;oldfile &gt;newfile\n\n替换filename文件中的每一个find为replace\nsed -i &#39;s/find/replace/g&#39; filename\n\n替换filename文件中的包含Replace文字的每一行中的the为THE\nsed -i &#39;/Replace/s/the/THE/g&#39; filename\n\n删除filename文件中的包含Replace文字的每一行\nsed -i &#39;/Replace/d&#39; filename\n\n不使用-i则打印内容\n\n运行多条命令\n\nsed -i &#39;...;...&#39; filename\nsed -i -e &#39;...&#39; -e &#39;...&#39; filename\n\n\n\\/转义/或使用s#find#replace#g, s|find|replace|g, .\n\n打印出包含usr的每一行: sed &#39;/user/p&#39;\n\n删除redacted: sed &quot;s/redacted//g filename\n\n删除空行: sed &quot;/^$/d&quot; filename\n\n\n","categories":["Notes"]},{"title":"使用Splinter模拟网页操作","url":"/2018/04/01/splinter/","content":"之前需要用代码来代替一些繁琐重复的网页操作，自然想到用Python自动化这些工作。\n然后找到了这篇文章。它用了Splinter，一个Selenium的包装。尝试之后发现意外地简单。\n内容大同小异，说明几个坑。\n\n\n我用的是Py3.6和Chrome.\nChrome驱动需要提前在这里下载Chrome的驱动，再把下载到的chromedriver.exe放到Python代码的目录下。就可以使用了。\nexecutable_path = &#123;&#x27;executable_path&#x27;: &#x27;chromedriver.exe&#x27;&#125;browser = Browser(&quot;chrome&quot;, **executable_path)browser.driver.set_window_size(1200, 800)\n\n技巧\nbrowser.driver.execute_script(&quot;window.open(&#39;&#39;);&quot;) 新建Tab\nbrowser.windows.current = browser.windows[0] 切换Tab\nPandas读数据：  def get_dict(name):    my_df = pd.read_csv(name)    titles = my_df[&#x27;Title&#x27;].tolist()    links = my_df[&#x27;Link&#x27;].tolist()    return &#123;titles[i]: links[i] for i in range(0, len(titles))&#125;\n\n用Splinter和Selenium完成一些简单的签到、爬数据还算方便，不需要理会用爬虫时Cookie、异步、认证等问题。\n开头提到的文章中讲的太详细以致于我已无法可说了。\n","categories":["Automation"]},{"title":"两种安慰别人的方式","url":"/2019/07/05/thoughts-comfort/","content":"生活压力大，找人诉苦。别人听完了你的诉苦水，总得说点什么吧。有意思的地方来了。\n\n\n有两种安慰人的方式，对不同的人有不同的效果。快来对号入座儿。\n1. “你过得一点都不惨”“比你过得惨的人多的去了，${列举各种惨状}的人还不过了嘛？”之类的安慰语。\n诉苦主体可以对此两种反应:\n\n“原来我也不算最糟糕的嘛，比我惨多的去了，平衡了平衡了。”\n 起到了正面效果。诉苦主题认清了自己的位置，重拾了生活的希望。\n\n“你是在说我矫揉造作，是个懦夫吗？”\n 起到了负面效果。诉苦主体此时感觉更糟糕了，因为不仅没人能跟他感同身受，而且还被嘲讽、鄙视了。\n\n\n2. “你过得好惨啊”“这也太惨了吧”之类的安慰语，有的人甚至还会笑出来。\n诉苦主体可以对此两种反应:\n\n“我真的是惨，失败的人生！”\n 起到了负面效果。击碎了诉苦主体最后的波纹。\n\n“哈哈，对吧。这就是生活啊！”\n 起到了正面效果。诉苦主题接受了现实，被迫面对生活。跟前一个相比，效果也算比较正面。\n\n\n结论具体要说什么话，还是要对人对事。\n嗯…………我总感觉还有些东西没有挖掘出来，但找不到是哪些。\n","categories":["Thoughts"]},{"title":"我们为什么不相信狼来了中的那个孩子","url":"/2018/12/25/thoughts-cry-wolf/","content":"废话，因为他说的话不靠谱。但是狼真的来的时候，他也没说错呀。\n\n\n这是一个信任成本的问题。如果一个人的信任成本很高，大伙儿就偏向于不相信他。注意是信任成本高，而不是无穷大或者说这个人不能被信任，毕竟不存在一直在撒谎的人。\n所以我们的逻辑成了：\nif 这个人的信任成本高：  不相信他else：  另加讨论\n\n我们不相信他不是因为他有错，而是因为从他口中得到的信息假多真少。我们为了让自己信任一个人的成本维持在一个正常水平，才选择不相信他说的所有内容。\n那我们在微信群中常见的谣言、微博上一些信口开河的大/小V，他们的信任成本高吗？那相信他们的人多吗？那他们知道狼来了的故事吗？那他们明白那个故事吗？\n","categories":["Thoughts"]},{"title":"万恶淫为首，论迹不论心，论心世上无完人","url":"/2022/04/21/thoughts-junzi/","content":"今日网上冲浪，遇到了一句“君子论迹不论心，论心世上少完人”，于是有了本文。\n\n\n当然，“万恶淫为首”中的“淫”在广义上指的是欲望的放纵。\n今天之前曾经在读《苏菲的世界》时，记录了一句印象深刻的话：\n\n我们因此对每一件与性和性器官有感的事情有了一种罪恶感。由于这种罪恶感一直停留在在超我之中，因此很多人——弗洛伊德甚至认为是大多数人——终其一生都对性有一个罪恶感。而根据弗洛伊德的说法，性的欲望和需求事实上人类天性中很自然而且很重要的一部分。就这样，人的一生都充满了欲望与罪恶感之间的冲突。\n\n我自然也不例外，一直深受其扰。\n久而久之，我便萌生了一个念头：我想了什么不重要，重要的是我做了什么。而我迄今还未放浪形骸，于是这件事也就暂告一段落了。\n新的转机但在今天，我看到网友提了一句“君子论迹不论心，论心世上少完人”，惊为天人！\n这种自己的想法与古人的想法，穿越时空然后殊途同归、意外碰撞的感觉太棒了！\n谨慎的我决定找一找这句话的出处。\n出师不利直接在搜索引擎中搜索，除去对这句话本身的讨论外，几乎所有中文资料都指向了一个出处：清朝作家王永彬的作品《围炉夜话》。\n但是，我在找到《围炉夜话》细细查阅后，只发现了这么一句：\n\n常存仁孝心，则天下凡不可为者，皆不忍为，所以孝居百行之先；一起邪恶念，则生平极不欲为者，皆不难为，所以淫是万恶之首。\n\n但这句话明显没有“论迹不论心，论心世上少完人”这个意思呀！\n到这里我明白了，这又是一个中文互联网互相抄袭、大锅乱炖的信息了。\n大海捞针在经历了逐条翻阅搜索记录、失足于内容农场、切换使用引号逐词搜索后，终于功夫不负有心人，发现了线索！\n在知乎的某个回答中提到了：\n\n这幅对联一般在城隍庙门前书写…如沈阳城隍庙…出处已难以考证，张维迎教授在《市场逻辑和强盗逻辑》中提到他在山西榆次县古衙门看到过，南怀瑾先生在书中也提到过“古人云”，亦有书籍提到“上联为道光时甘谷生员张及泉先生撰写”。在天津市社科院研究员温克勤教授的《中国伦理思想简史》中，提到过后两句是后人所填：\n\n过去有个故事：一城隍庙有副对联：“百行孝为先；万恶淫为首”。后来有人在对联下面续加了字句，成为“百行孝为先，论心不论事，论事则天下无孝子；万恶淫为首，论事不论心，论心则举世无完人。”\n\n\n在另一个百度知道回答中，有了更多的线索：\n\n这是梁章钜《楹联丛话》卷四·庙祀中：张南山寄录城隍庙一幅对联中的半句。\n\n《楹联丛话》虽是《围炉夜话》之后成书，但其中有一句：\n\n张南山寄录城隍庙一联云：「百行孝为先，论心不论事，论事贫家无孝子；万恶淫为首，论事不论心，论心终古少完人。」\n\n至此，看来这句话：\n\n百善孝为先，论心不论迹，论迹贫家无孝子；万恶淫为首，论迹不论心，论心世上无完人。\n\n的一半意思的出处已不可靠。内容常见于城隍庙。\n不过这句话却深得我心，不禁感叹文化的博大精深，民间的熟语也都充满了智慧。\n后记中华文化真包容呀，既有“知行合一”，又有“论心不论迹”、“论迹不论心”。\n","categories":["Thoughts"]},{"title":"三个和尚没水喝","url":"/2018/10/30/thoughts-three-monks/","content":"没时间解释了，直接切入正题。\n\n\n发展到二十一世纪，这个现象依然普遍存在 =&gt;\n可以假设这个现象将长时间存在并难以避免或逆转 (=&gt; 激进版：我认为在人类摆脱肉体存在之前做不到) + 我们不能浪费这个寓言故事 =&gt;\n我们要利用这个注定存在现象/事实 + 我们都是广义的利己主义者 =&gt;\n我们要利用它，让它利于我们 =&gt;\n利用需要方法 + 解决问题的方案有两种 =&gt;\n\n正面迎击，解决问题：立下规矩，轮流挑水。\n\n侧面回避，让问题消失\n\n排挤第三个人，让他退出，回到两个人挑水喝的日子。\n\n拉第四个人入伙，配对挑水。\n\n\n\n不解决：那就不喝水喽，喝自己的冰阔落。\n\n\n=&gt; 这些把戏很常见吧，这就对了。\n","categories":["Thoughts"]},{"title":"截至到2020年1月19日三个月内计时机器的统计数据","url":"/2020/01/19/timer-analytics-2020-1-19/","content":"这里做个大概的总结，文中出现的所有排列都分先后，只选取了数据最多的前几名进行展示和说明。\n因为我发现这些数据没啥用，从4.1.0开始将不再统计了。\n\n\n版本国内：七成4.0.0，一七成3.8.0，第三用户量最多的是1.1.1(2.67%)（应该是第一个引入专业版的版本，但我不知道为何有人停留在此版本）和2.1.0(2.08%)（这个也不清楚）。\n谷歌：九七成的4.0.0，0.2%的3.8.0。\nGoogle Play Store的更新真及时呀。\n运行界面下方按钮国内：默认的五个（开始/暂停，下一步，停止，编辑，上一步）霸占前五，剩下的就是更多里的选项，都是百分之一或二。\n谷歌：默认的五个（下一步，开始/暂停，编辑，停止，上一步）霸占前五，其余同上。\n计时器选项（打开此选项并保存的用户中）国内：7%的人选择关闭计时器通知中的读秒，8%的人选择关闭计时器通知。21.5%的人选择了在计时器结束后继续运行一个其他计时器。\n谷歌：3%的人选择关闭计时器通知中的读秒，4%的人选择关闭计时器通知。22.3%的人选择了在计时器结束后继续运行一个其他计时器。\n起始步骤国内：大伙儿喜欢用嘟嘟、朗读、倒数来运行一个5秒左右的步骤来作为计时器的开始。\n谷歌：老外们喜欢用嘟嘟、朗读、倒数来运行一个少则5到10秒，多则2到5分钟的步骤来作为计时器的开始。\n行为一致，时长不同。\n普通步骤国内：大伙儿喜欢用朗读、音乐、倒数来运行一个少则1分钟以内，多则2到10分钟的计时器。1到2分钟的步骤是最少的（百分之四）。\n谷歌：老外们喜欢用朗读、嘟嘟、振动、倒数来运行10秒到5分钟的普通步骤。1到2分钟的步骤是同样最少的。\n通知步骤国内：大伙儿喜欢用振动、音乐、屏幕来运行一个5秒左右的步骤来作为步骤间的提醒。\n谷歌：老外们喜欢用音乐、振动、屏幕来运行一个5秒左右的步骤来作为步骤间的提醒。\n结束步骤国内：大伙儿喜欢用朗读、音乐、振动来运行一个5秒左右的步骤来作为计时器的结束。\n谷歌：老外们喜欢用朗读、音乐、振动来运行一个少则5秒左右，多则2到5分钟的步骤来作为计时器的结束。\n","categories":["Android"]},{"title":"关于计时机器在Google Play渠道引入订阅制云备份的决定","url":"/2020/09/07/timer-cloud-backup/","content":"计时机器在4.6.0开始，在Google Play下载的应用将包含需要订阅后可使用的云备份功能。在酷安下载的应用将不包含此功能。在此进行一些记录和说明。\n\n\nGoogle Play版本和酷安版本区别Google Play版本独占：云备份、未来可能加入到订阅计划中所有服务\n酷安版本独占：开发日志、打赏\n从酷安版本迁移到Google Play版本\n打开应用，打开侧边栏，选择“备份与还原”，选择“导出应用数据”，根据步骤将应用数据导出为一个文件。\n在Google Play搜索“计时机器”并安装。\n打开Google Play下载的应用，打开侧边栏，选择“备份与还原”，选择“导入应用数据”，将第一步导出的文件导入。\n把新应用的系统白名单设置一下，以免应用锁屏后被系统强制关闭。\n如果要使用云备份，且手机不是一直处于魔法上网的环境，请在订阅后将自动打开的自动云备份关闭，然后在需要时手动备份。\n\n原因订阅使用了Google Play的In-app Billing，云备份使用了Firebase，而上述两个服务在中国大陆由于众所周知的原因无法使用。虽然这个问题有一个常见的解决方案：在大陆使用支付宝或微信支付，和Firebase的同类替代（像之前用过的LeanCloud），但由于国内个人支付资格难以获得、域名备案困难繁琐、应用曝光渠道狭窄、应用市场分散混乱等原因，故暂时放弃在中国大陆提供该服务的想法。\n","categories":["Android"]},{"title":"计时机器公告2019-7-6","url":"/2019/07/06/timer-death/","content":"简单版本从计时机器3.8.0起，计时机器应用将从内购模式转为真·免费应用，所有专业版功能会在升级后为所有用户解锁。旧版本的登录、注册和激活将也会在未来几天失效。\n以后的更新随缘，也会更加放飞自我。\n\n\n深情版本想法的萌生这个应用的想法源自于16年跑步锻炼时，按着《爱上跑步的13周》里的计划，发现计时是个问题。当初就用手机自带的闹钟，到时间后按一下音量键，就会自动延时1分钟，以此来记录时间。碰巧当时刚刚接触Android开发，就萌生了写一个专门的应用的想法。于是“循环计时器”就诞生了。一开始还叫“循环闹钟”。\n就这么像无头苍蝇一样维护了一年多吧。当初不会写代码，就到处抄。后来发现AOSP里的闹钟，也就是Android系统自带的时钟（叫DeskClock）是个很好的例子，而且也听信了Dianne Hackborn说的Android搞MVC就可以啦的“谎言”，就几乎把DeskClock里能搬过来的都改一改搬了过来。结果也料到了，代码库一团糟。\n计时机器的诞生同时随着用户的积累和反馈，也发现现有的代码库毫无可扩展性，就萌生了写一个新应用，用上我一路上所有学到的本事的想法。所以“计时机器”（英文名叫TimeR Machine，比时间机器Time Machine多了一个R，多好的名字）就在17年底诞生了。\n计时机器也算自己亲生的，所以特别上心。代码库到今天也很干净，不仅上了MVVM，也用了TDD，测试一大堆。每次发布都要Code Review + 跑测试 + 亲自测试新功能，所以很少出现新版本发布后大面积崩溃/失效的情况。当然也翻车过一次，就是步骤重复那一次(开发日志2019年3月27日)，看来测试也不能涵盖所有使用情况呀。\n计时机器经历了6个月左右的alpha版 + 3个月beta版后，正式版就在18年9九月发布啦。于此同时，循环计时器也正式被替代，凉凉了。\n在18年底添加的专业版。其中的自定义主题费了我不少功夫，这也是我一个很自豪的功能，因为很多其他应用都只能使用预设的主题，而我的可以随便选，这个可费了不少功夫。各位还没试过的快去更新然后试试吧。\n现在的情况计时机器一直都有两个版本，一个GooglePlay发布的，接入了Play的支付，数据保存用的是Firebase；一个是国内（酷安）发布的，数据保存用的是LeanCloud，但因为支付宝、微信支付等不给个人开发者一个方便的渠道，因此没有支付系统，所以各位需要在给我转账后，等我确认，然后手动在数据后台把专业版状态调一下，然后各位再刷新，就有专业版了。很笨的办法，但运行了半年来也很不错。\n因为计时机器是独立开发的，所以我没时间、没精力、没能力去维护一个后台，所以必须使用一个BaaS（包装好的云服务器）。国外我用了杀手级服务Firebase，用到今天一直都很靠谱，也基本不用管。国内我挑了半天，最后选了LeanCloud，虽然跟Firebase相比简陋了很多，但过去跑起来也不错。\n这次事故的直接原因来自于LeanCloud。在六月中下旬之交，LeanCloud停摆了5天，这也就是那几天各位都无法登录/注册的原因。在服务恢复后，LeanCloud就提出了新要求，要求实名认证和备案域名。前者传个身份证就搞定了，后者就要命了。要命的原因我想了很久、找了很久也不知道怎么解释。各位自己搜索 + 意会吧。但结果就是如果搞不定它，LeanCloud很快就不给用了；如果不给用了，登录/注册就都会失效。\n其他BaaS服务商像Bmob等也考虑过，但那样的话不仅需要迁移各位的数据（就是让各位重新登陆/注册一遍），未来也可能面临需要备案域名的风险。\n同时也考虑到维护这个应用的资金基本转不起来、应用推广困难重重等原因，索性不破不立，转免费吧。\n谢谢各位谢谢各位使用计时机器，谢谢各位在应用商店里的打分和评论，谢谢各位早期对我的赞赏，谢谢各位专业版用户的支持！\n一直以来，哪怕看到各位的只有一次支持和鼓励，都让我充满了继续更新下去的决心。再次谢谢各位！\n\n\n以后的更新随缘，也会更加放飞自我。\n\nI’ve seen things you people wouldn’t believe. Attack ships on fire off the shoulder of Orion. I watched C-beams glitter in the dark near the Tannhäuser Gate. All those moments will be lost in time, like tears in rain. Time to die. - Blade Runner\n\n","categories":["Android"]},{"title":"计时机器无法唤醒设备的临时解决方案","url":"/2017/12/10/timer-huawei-solution/","content":"计时机器无法唤醒国产设备的临时解决方案。几乎所有国产手机都需要类似的设置，因为国内厂商的对Android应用后台的态度是，错杀一万也不能放走一个没跟自己打招呼的应用。\n\n\n华为用户：感谢酷安用户@无野 提供的华为设备在锁屏后无法运行的解决方案。我顺便修了一下图。\n\n\n其他用户：最近发现了一个链接ACR is automatically closed on some phones，是个国外应用处理一些应用在国产设备上后台被杀时如何白名单的文章。虽然是英文，但下面有各个设备的链接，里面有一些示范图片，各位可以参考一下。\n","categories":["Android"]},{"title":"计时机器的使用方法","url":"/2018/12/19/timer-machine-usage-zh/","content":"此文章已过时，来这里看最新的使用指南：计时机器的使用指南\n\n\n\n步骤\n 一个步骤代表要在一定时间内完成一件事。一个默认的步骤（新建普通步骤后不进行任何操作）只会安静地计时，然后安静地进入下一步骤或结束。\n 如果想要知道一个步骤结束了，那么就需要在这个步骤添加一个专门提醒的步骤，并给它添加音乐、振动等等提醒效果（行为）。\n 所有步骤的时间、行为、名字等都是可以修改的。\n\n特殊的步骤\n\n提醒步骤：它有一个不同的颜色（默认蓝色）；它会保存上一次编辑后的内容，并在下一添加提醒步骤时显示相同的内容；在这种步骤微调时间时，会退回到上一步并把时间设置为1分钟（设置里可以关闭）。\n\n起始和结束步骤：一个计时器可以有多次循环，那这两个步骤可以用作整个计时器开始和结束的标志，它们只会在整个计时器的开始和结束时各执行一次。另外，使用计划任务来终结一个计时器时，到指定时间，计时器会自动跳到结束步骤。\n\n\n\n\n\n与循环计时器的不同\n 最大的不同就是在计时机器中，需要手动添加提醒步骤，不然是不会得到任何反馈的。\n 另外，循环计时器的提醒时长在应用设置里配置，并且是全局的。但在计时机器中，提醒步骤也是计时器的一部分（一个步骤），它的时长、音乐等等都需要手动设置。\n\n未来的饼计划\n 预计在2.0.0中加入“组”的概念，可以把现有的步骤放到组里，组有各自的名字和循环。到那个时候，我就得画图来解释了。\n\n\n","categories":["Android"]},{"title":"更新，还是不更新，这是个问题","url":"/2022/05/25/update-or-not/","content":"项目依赖想升不敢升，升了怕有坑，到底怎么整？\n\n\n术语依赖 == 第三方库 == Library ≈≈ 某个Github项目\n如果东西没坏，就别修理它升级依赖最糟糕的体验就是，本来没问题，升级升出了问题。\n所以如果没有“想升级”之外更充分的理由，尽量别升级依赖。要升级等最少几个月再升级。\n依赖的源头KISS, Keep it simple, stupid\n从源头上来讲，要尽量减少使用的依赖。\n一些对应用架构影响很大的依赖，比如一些MVI框架、复杂的UI嵌套实现等，一定要慎重考虑依赖的必要性，不然未来积重难返。\n还有一些专用的、不怎么更新的依赖，要么一个版本用到老，要么拷贝到项目中。\n依赖的选择即使是一些作者积极维护、社区反馈热烈、代码质量很高的依赖，也会偶尔出现有坑的版本。更别提那些无人问津、一两个版本就杳无音信的依赖了。在选择前一定要评估评估依赖的维护状态。\n针对一些闭源依赖，有新版本时一定要等几个月再尝试。\n依赖的管理个人用ben-manes/gradle-versions-plugin来检测需要升级的依赖，和dropbox/dependency-guard来保证升级后的依赖版本（排查出依赖的依赖的升级）。\n依赖的更新有新版本时一定要等一两个月再尝试，无论大小。\n小更新大部分依赖更新只需修改版本号，这样在发现问题回退版本时很容易。\n大更新对于有着Breaking Changes或需要大幅修改项目库的依赖更新，要特别小心。在升级前一定要规划好来避免意外，比如专门开一个Git Branch、进行专门的测试等，以免升级时发现太复杂而放弃，或升级后发现旧版本更适合自己。\n虽然一些依赖的大版本更新有着兼容，但也要小心。比如Paging3虽然兼容旧版API，但行为却有些许变化。\n新项目因为会进行详尽的测试，这里当然要使用最新稳定版的依赖。\n老项目为了项目稳定，尽量不升级依赖，或者只升级那些确定很稳定的依赖。\n其他的更新印象最深刻的要属某次升级了某个开源应用，结果在我的设备上有Bug。作者修了一个月，但这期间等不及只好删掉应用装旧版本，数据全没啦！\n教训就是，如果某次更新是无法回退的，且更新失败的代价是难以接受的，那么如果它没坏，就别修理它！\n","categories":["Android"]},{"title":"Android文字转语音(TTS)引擎","url":"/2019/03/11/tts/","content":"位于【设置】-【无障碍】-【文字转语音(TTS)输出】。在这里可以配置引擎。一些应用会使用这个引擎进行文字阅读。但因为国内设备的特殊情况，想要让这个玩意儿阅读中文，还是需要一些设置的。\n\n\n背景这个设置是系统自带。这个功能不仅仅用于盲人使用设备时，将屏幕上的文字阅读出来，更广泛的用途是，语音播报内容，比如导航、天气预报等。这个功能的登场次数不算多，但我见过不少。\n几乎所有Android设备会自带一个Pico TTS。\n\nPico TTS: AOSP自带的TTS，支持的语言只有英德西法意。\n\n它不支持中文，加上国内多数厂商对这块儿并不怎么重视，导致了TTS这个功能在国内基本是荒废的。但Android留出接口，可以安装一些第三方支持中文的引擎来让Android阅读中文。\n有的国产系统后台管理严格，导致TTS无法启动运行，这种情况下TTS就已经凉了\n特殊情况国内一些导航应用导航时使用的方法，并不是使用这个引擎，而是另起炉灶，用的自己的方法或购买第三方的SDK。\n引擎Google文字转语音在Google自家的设备上取代了Pico TTS，支持地球上绝大多数语言，基本是首选。在酷安和Google Play或各大应用市场都可以找到。\n它默认会联网获取语音，但可能出现因网络状况而读不出来的情况，所以需要提前下载好语音包。但即使下好了语音包，有时也会读不出来 ㄟ( ▔, ▔ )ㄏ\n讯飞语记是讯飞的一个单独应用。安装后就会添加一个引擎。可以自定义的内容不少。虽然声音不如谷歌娘好听。\n小爱 TTS似乎只有在小米应用商店有下载：http://app.mi.com/details?id=com.xiaomi.mibrain.speech\n没有试过，但应用信息\n\n软件大小:20.86 M 版本号：1.1.1 更新时间：2018-08-02\n\n怕是不靠谱。\n还有呢？信息太少了，一个能打的都找不到了。\n","categories":["Android"]},{"title":"个人使用的VSCode配置","url":"/2025/02/01/vscode-settings/","content":"手动同步VSCode设置。\n\n\n&#123;    &quot;workbench.colorTheme&quot;: &quot;Monokai&quot;,    &quot;security.workspace.trust.untrustedFiles&quot;: &quot;open&quot;,    &quot;editor.fontSize&quot;: 20,    &quot;editor.cursorBlinking&quot;: &quot;solid&quot;,    &quot;editor.formatOnSave&quot;: true    &quot;editor.lineNumbers&quot;: &quot;off&quot;,    &quot;window.commandCenter&quot;: false,    &quot;git.openRepositoryInParentFolders&quot;: &quot;always&quot;,    &quot;editor.unicodeHighlight.nonBasicASCII&quot;: false,    &quot;editor.stickyScroll.enabled&quot;: false,    &quot;workbench.startupEditor&quot;: &quot;none&quot;,    &quot;editor.unicodeHighlight.ambiguousCharacters&quot;: false,    &quot;workbench.editor.enablePreview&quot;: false,&#125;\n\n扩展：\n\nAPKLab\nIntelliJ IDEA Keybindings\nmarkdownlint\nSubword Navigation\n\n","categories":["Android"]},{"title":"个人常用的视频下载及处理命令整理","url":"/2023/11/23/youtube-dl-commands/","content":"RT\n\n\n下载最佳视频+音频yt-dlp -S ext\n\nhttps://github.com/yt-dlp/yt-dlp/issues/3398\n合成视频加音频yt-dlp -Fyt-dlp -f 641+140 \n\nhttps://www.reddit.com/r/youtubedl/comments/qfsuxu/ytdlp_download_and_merge_multiple_format/\n裁剪音频ffmpeg -ss 1:00 -to 2:00 -i input.mp3 output.mp3\n\nhttps://stackoverflow.com/questions/46508055/using-ffmpeg-to-cut-audio-from-to-position\n下载视频的音频yt-dlp --extract-audio --audio-format mp3 \n\nhttps://askubuntu.com/a/178991\n下载视频列表的音频yt-dlp --extract-audio --audio-format mp3 -o &quot;%(title)s.%(ext)s&quot; \n\nhttps://askubuntu.com/a/564571\n转换视频文件夹为音频文件夹for %i in (*.mp4) do ffmpeg -i &quot;%i&quot; &quot;%~ni.mp3&quot;\n\nhttps://stackoverflow.com/a/56244203/5507158\n","categories":["Notes"]},{"title":"计时机器开发日志","url":"/2017/12/10/timer-devLog/","content":"Google Play Store or 在酷安下载APK\n\n\n2021年10月19日应用开源了 https://github.com/timer-machine/timer-machine-android\n2021年9月12日下一版本将会是6.0：\n\n增加了一些新功能、新提醒方式、新设置等。\n应用将不再支持Android 5，最低支持将会是Android 6。\n出于缩小版本差别的考虑，移除了国内版本的开发日志和赞赏选项。\n出于Google Play付款的一些问题，应用内购将对未购买用户关闭。已购买内容不受影响。\n\n最近也在进行一些开源的准备。具体开源时间应该在会在6.0发布之后，今年底到明年初。\n同时，本开发日志也就不更新了啦，以后的问题和规划就放到Github Issues区。\n2021年8月22日开源的意外出现了！因为懒工作量太大了，还是慢慢来吧。\n2021年8月10日因为遇到了种种困难，我正在考虑开源本应用。不出意外的话，年底前开源。\n2021年7月8日5.7.0的Google Play测试版已发。正如之前所提，现在的更新内容都算比较细枝末节。\nJetpack Compose快要出了，因此现在积压的各种界面相关的修改和优化都变成了“等Jetpack Compose出了后，再重写吧”。\n2021年4月24日一直以来都在酷安上回复评论，但最近酷安的开屏广告越来越烦，所以懒得开酷安了。有需求的各位请善用应用内的“帮助与反馈”-“反馈”来发邮件联系。\n2021年4月18日因为Android上的闹钟机制（计划任务所依赖的接口）实在不靠谱，在不同厂商的系统上有的能有、有的不能用，而且Android 12又得继续和系统API斗智斗勇，因此暂时不打算为计划任务增加新功能，只进行Bug修复。\n2021年3月16日从前段时间Flutter 2.0发布开始，由于馋Flutter不仅覆盖移动端，还是覆盖Web和桌面端，所以最近一直都看一些Flutter的内容。感觉就是，我要转方向了。。\n虽然缝合怪Dart难写又难用、各平台特性难以利用、配套工具少得可怜、继承了Google代码的拆东墙坏西墙的特性等等，Flutter还是不错的。\n2021年2月8日各位！突然发现这个项目的代码成屎山了！上一次遇到类似的情况，我决定另起炉灶，于是有了计时机器。不过这次，我打算慢慢优化，所以接下来的更新虽然代码改了不少，但日志会乏善可陈。\n2021年2月3日今年的大年三十没有新版本了。要说可以增加或优化的地方，有很多，但我决定细水长流慢慢来。另外，我也在计划一些其他的项目。\n2020年11月30日5.2已发。迁移到了Firebase，统计似乎可以正常用，崩溃似乎偶尔可以用。而今天才发现AppCenter十一月初活了过来，或许未来可以混用。\n想要加的功能还很多，一步一步来吧。\n2020年10月31日5.0前几天已发，几天下来一切正常。应用的大更新告一段落。\n5.1将会更新：可互动的使用教程、更详细的白名单指南。再之后的更新就是一些小修小补了。\n如果AppCenter在年底前无法恢复正常，我将会在应用中统一使用Firebase，因为虽然Firebase的主服务被屏蔽，但开发者圈子中一直有它的统计和崩溃服务还能用的流言，索性死马当活马医了。\n2020年10月16日下个版本是5.0，主要是计时器合集（就是之前提到的文件夹）功能。基本已完成，接下来就是测试，各种测试了。\n未来的5.1的计划是换一套新的使用教程，现在的还是不够简单明了；在订阅计划中增加一些无关痛痒的小功能。\n2020年10月7日文件夹功能比预想中快了很多，就作为十一月的更新吧。\n2020年9月27日我有三点要发表：\nAndroid 11虽然Android 11已经出了，但我决定过段时间，到年底或明年年初，等待配套的AppCompat稳定了再适配，或者计时机器在11上出了问题再适配也不晚，吧。\n新版本新版本加了一些小功能，预计十一期间可以放出。之后就要正式开始文件夹功能了。\n国内版统计问题计时机器在Fabric被Google Firebase收购后，出于Firebase可能国内连不上的缘故，就切换到微软的AppCenter进行崩溃统计，可是最近发现，AppCenter最近在国内也无法访问了。如果这个情况无法得到解决的话，计时机器的国内版可能要裸奔了，这样我将无法看到并解决任何国内版的应用问题。\n国内的替代品？我能找到的都是流氓服务，相比之下宁愿裸奔。\n2020年9月7日关于计时机器在Google Play渠道引入订阅制云备份的决定\n2020年8月27日云备份一直在测试，各种小错误不断。\n另外，文件夹功能已经在做了，这里是仅有的一张设计图：\n\n\n2020年7月27日应用数据云端备份和保存的功能终于完成了基础部分，都拖了一个月了，不过距离最终完成还需要一段时间。\n除了代码，我还需要处理UI、文案、服务器等等。像是前段时间写了个小应用，代码半天搞定，图标却活活憋了三天，而且最后看起来也很一般。ㄟ( ▔, ▔ )ㄏ\n2020年7月24日最近买了一个电子闹钟，因为根据我个人对Andorid的使用体验，加上几年来的Android开发经验，觉得Andorid手机里的闹钟实在难以被信任。听着电子闹钟发出的刺耳铃声，我再一次感受到了现代科技的伟大。\n之所以提这个，是因为计时机器的计划任务使用了和手机闹钟同样的实现方式，所以在使用前自行测试，并做好不少系统上可能失效的准备。\n2020年7月1日下一版本是小修小补的小版本，之后是云端备份，将会以Google Play渠道独占的每年订阅制的形式登场。\n想了几天的UI都不满意，最后发现还是直接抄一个别人的好看(。﹏。)\n2020年6月14日最近在做运行记录的图表显示，又是饼状图又是柱状图的，真好（复）看（杂）呀！\n还要给数据处理写测试 (。_。)\n2020年5月17日4.4.0将会加一些小功能，然后接下来计划是四个大工程：多语言、更详细的运行记录展示、数据云端备份、文件夹（包括排序）。因为文件夹是最繁琐的，所以放在最后。其他三个看心情和时间逐步推进。\n2020年5月16日关于不做无限循环功能的决定：一个5分钟的步骤，循环1000次就有83小时，循环最大20亿（2147483647）。此外，如果循环不够还可以设置计时器结束后，启动自己，这样可以做到无限循环。而无限循环的功能不仅会榨干手机电量，还会导致运行记录无法被统计。综上所述，此功能暂不考虑。\n2020年5月12日现在计划任务只能设置一次、一周的某几天或每隔几天。考虑到闹钟在短时间内一直触发会导致应用达到系统最大限制，进而导致闹钟失效，因此决定不添加每隔几小时和更小时间尺度的循环模式。考虑到复杂的循环需求数不胜数（设置在多个时刻运行、根据不同日子进行不同循环等），这里还是建议使用Tasker、Automate等应用。\n2020年5月7日新版本一般会在Google Play的beta测试中放一个礼拜再放正式版出来，想尝新的可以点页面顶端的Google Play链接去参加。\n2020年4月21日设计真是痛点。最近寻思着在编辑页面显示计时器总时间，死活整不出一个又漂亮又方便的方案😂\n2020年3月14日嘿嘿！最近发现同为流程控制应用，Automate比Tasker好用且漂亮多了。它们都支持计时机器的插件。\n2020年1月19日截至到2020年1月19日三个月内计时机器的统计数据\n2020年1月18日如果未来增加任何涉及联网的服务（比如同步等），打算都用Firebase，这意味着它们只会在Google Play渠道上线，而且绝大多数情况下需要魔法。Google Play和国内（酷安）两个渠道用的不同包名，所以可以同时装，数据迁移也只需要导出然后导入。两个渠道现在的不同仅在于包名和国内可以看到开发日志。\n2019年11月4日自动夜间模式的确有问题，这个东西实现起来比我想象地要复杂。\n2019年11月2日重新试了一下，自动夜间模式没问题呀。。那马上就发4.0.0。\n2019年10月28日GooglePlay渠道上架了4.0.0的beta版，但自动夜间模式似乎有点问题，有时间了就修。\n2019年10月20日我，再一次，误删掉了我自己的应用数据。。。该做联网同步了。。\n幸运的是，我在另一台测试上找到了遗留的备份文件，舒服了！\n2019年10月14日下个版本4.0.0有一个长长长长长的测试列表，我这几天慢慢测一下。测完了先会丢到GooglePlay的beta测试里，之后才能正式上线。\n2019年9月11日嘿嘿，摸了。。主要是Android 10的夜间主题不好弄，逻辑有点乱，容我整一整。\n2019年9月4日既然Android 10出了，那就适配一下再出4.0.0吧。\n2019年8月31日各位，新版本4.0.0近期发布，能赶得上Andorid 10的话就顺便适配一下。因为是取消专业版后的第一个版本,而且最近也在一直重构代码库，所以新功能不多。\n另外，在2018年10月21日曾提到的内存泄露中，其中一个泄露被证实是Android相关SDK的问题，于是我在汇报为这个问题贡献了一个百分百重现的Demo。然后前段时间收到一份邮件说要感谢我为AS 3.5质量提升做出的贡献，本来以为只是个像捐款签个名之类普通的感谢，但最近3.5发布后，在发布日志页，发现我的用户名出现在了仅有的几十个人之中。。受宠若惊 ====&gt; https://developer.android.com/studio/releases#3-5-community-contributors 名字是DeweyReed。\n2019年8月25日XP用户要小心了，Xposed可能会导致应用的通知无法显示，进而导致崩溃。我现在还没有找到能从应用代码层面解决这个问题的办法。\n另外，今天看了一下后台统计，发现朗读居然是最受欢迎的行为之一。本来以为TTS在国内系统都阉割地差不多了，但意外的有很多人用。\n2019年8月14日下个版本是4.0.0，修修过去一个月成吨的的Bug、清理清理专业版的遗产、加几个小功能。更新时间未知，所以现在这里给大伙儿拜个早年啦!\n2019年7月18日在计时器运行在后台播放音乐时，大伙儿遇到过音乐播放突然暂停的情况吗？正常情况下，计时器的各种行为会临时暂停音乐播放，行为结束后就恢复音乐播放，但最近遇到过好几次暂停后就不恢复、没有行为也会暂停的情况。如果各位也遇到了，请通过反馈/邮件告诉我（虽然我不知道该怎么解决。。。\n2019年7月12日下次更新的时间说不好，哪天Bug积累的差不多了就更新。\n今天看某up主的视频提到了一个名词：自嗨式开发。这不就是我一开始的更新思路吗233。但后来变好了一些，会根据用户的呼声和关键的体验进行更新，但还是很容易陷入自嗨的境地。\n2019年7月8日服务器已经停掉了。都给我升级到最新版。\n2019年7月6日在今晚放出的3.8.0，将取消专业版。具体的解释在这里：https://github.com/DeweyReed/site/blob/master/source/_posts/timer-death.md\n2019年7月3日这个美好的世界，每一天都充满了希望 (✿◕‿◕✿)\n\n很抱歉，您的应用未通过审核，原因是：\n\n详情如下：\n应用设计较为粗糙，应用整体质量未达到小米应用商店收录标准，请丰富应用功能、提高应用质量后再上传\n\n\n2019年7月1日最近新功能的开发先停一停，我需要：为Android Q适配、试着把应用上架到更多的应用商店、清理一下代码库为4.0做准备。\n2019年6月29日如果不能用LeanCloud，那么其实AppCenter也可能被搞（更不用提它的Auth和Data还在Preview中），要不打游击？把现有的账号注册体系，换成激活码体系，然后打一枪换一个地方。头大。。\n2019年6月26日LeanCloud又送来一个坏消息：未来需要一个备过案的域名作为API接口。这个就有点强人所难了，个人域名备案流程很复杂、很多样、很混乱、坑很深，这趟浑水我是真的不想趟。但各位的数据又不能丢掉，我需要想个办法。\n2019年6月22日3.7.0发布了，有不少新功能，也修复了LeanCloud的问题。没法登陆、注册的现在必须更新了。\n另外，刚刚手贱，在测试应用的时候，把我自己用的应用的数据给清了。。心疼我的运行记录啊！！！为此我要加一个数据自动备份的功能，不过这咋下手呢？\n2019年6月20日今天的LeanCloud（各位的数据都保存的他们的服务器上）的域名出问题了，意味着登录、注册、激活等等都会停摆。只能等它们那边修了。根据它们的博客似乎是被有关部门安排了。。\n另外，GooglePlay的版本是接入了GooglePlay的支付渠道的，出现类似问题的几率低得多。不想受此类苦而且有本事的，可以迁移到那边。但注意两边账号是不共通的，所以专业版的问题给我发邮件就可以，不需要各位花第二份钱。\n还有，我已经在思考把数据迁移到AppCenter了。\n我会在明天或后天发一个新版本，按他们官网提供的临时解决方式的搞一搞。\n2019年6月15日下个版本的新功能：微调时间的第二个主按钮，应用内的使用手册。\n2019年6月14日新的测试功能，时间标签，基本能用。但无论是微调一下时间或者使用了挂起行为，都会让时间出问题，未来几个版本慢慢改。\n2019年6月12日正在做六个可选的时间表盘：当前计时器已用时间、已用时间占计时器总时间的百分比、计时器总剩余时间、总剩余时间占计时器总时间的百分比、步骤的预计结束时间、计时器的预计结束时间。\n这六个时间的计算都涉及到当前计时器的已用时间，但现在有个问题，我没法精确地算出它。。\n2019年6月10日诸事不顺，回来更新了。\n接下来的更新计划，首先要更新一下应用内的使用指导，因为还是有不少新用户不会用；添加一些计时器示例；显示当前计时器已用时间、剩余时间和预计完成时间（UI怎么设计是个问题，越来越挤了）。\n2019年6月4日最近新功能加的有点多，失去了灵魂，要歇一歇，找找方向。\n接下来的更新计划，首先是3.5.1修修Bug（但似乎没什么大问题），同时更新一下应用介绍、截图和使用指南。然后我要去学一些另外的东西，回来后再决定下一步吧。\n2019年5月31日3.5.0会有了新的测试中的“通知”行为，也修了一些Bug。然后我要去学ASO了，所以下个版本是3.5.1，继续修Bug。\n2019年5月23日过半和倒数新版本就发，因为步子有点大，放到了实验室里，需要到设置里手动打开。另外因为时间问题，通知下下个版本再加。3.4.0已经进入测试阶段了，预计周末能放出吧。\n2019年5月21日倒计时需要+1s。。现在情况时，比如5秒钟的计时器，显示的内容是“4，3，2，1，0”，每个持续一秒。但这个样子并不合适，尤其是最后一个0，它虽然代表时间已经结束，但实际上在看到它后，再过一秒，计时器才算结束。所以想让它显示“5，4，3，2，1”，但这样又有个问题，看不到0了，因为最后一个1会在一秒后，直接跳转到下一步骤，比如直接从1跳到10。这可咋整啊。\n2019年5月17日接下来的更新计划，三个新行为（名字还没想好）：半路（在步骤中途朗读内容）、倒数（在步骤最后数秒）、通知（在步骤开始时显示一个通知，试着适配手环）。另外，这么多行为，添加时就会显示一个很长的对话框，寻思着把它们分两列显示，但这我需要得从头写一个。还有，音乐选择器得更新了，一方面是因为它需要更多的功能，另一方面是为了适配Android Q。\n2019年5月6日今天或明天放出一个版本修修Bug，然后就要肝一年一度的画饼大会Google IO啦。\n2019年5月3日Fabric要凉凉后，我就迁移到了微软的AppCenter。当初的AppCenter只有一些简单的功能，崩溃、统计、推送、云端编译……今天的AppCenter-SDK-Android有了认证和数据。虽然文档还找不到，但是不是意味着AppCenter要进军Baas啦，这样的话，我在考虑将之前保存在LeanCloud的数据，迁移到AppCenter啦。\n2019年4月29日3.3.0的Code Review结束啦，测试完就可以找小白鼠啦。另外新的使用手册和应用介绍也快完成了。\n2019年4月25日3.3.0将有的内容：设置来电时是否暂停计时器的设置选项、运行记录将包含开启时间、更好的悬浮窗界面、修理Bug。因为最近在研究前端的内容，还要更新使用手册，估计下个礼拜才能发布。\n2019年4月24日在Android O及以后的系统上，通过计划任务或Tasker停止计时器时，可能会出现程序未响应的问题。因为Android的规矩是，我要在启动服务后5秒后，必须显示一个通知，否则程序未响应。但是，既然是停止计时器，5秒内计时器已经都停止了，所以在5秒时服务已经关闭了，哪来的通知？结果就未响应了。这可咋整啊？\n2019年4月21日花了一礼拜恶补了很多前端的知识。相比只有十年的Android，发展了几十年的前端可真是遍地开花。现在到了各种框架的阶段，看得我头疼。\n2019年4月15日白名单呀白名单，至少给个“锁屏清理”的绿灯吧。要用Tasker的话，可能还需要个“被唤醒”的绿灯。不然计时器跑着跑着没响儿了，得多难受。然后你也可以再给个差评，让我陪你一块儿难受。\n3.2.0重做了底层链接计时器的逻辑，测试过程中一切顺利。就看各位先更新的小白鼠的使用体验了。\n2019年4月13日突然想加个Dropbox, Google Drive, OneDrive的云备份，这可是个大坑。\n2019年4月11日3.2.0的新功能将会有：挂起行为可以正向计时，朗读行为可以自定义内容并可以朗读当前循环次数，嘟嘟行为的暂停其他背景音选项。有Bug的话，3.2.1将只会修修Bug。然后我又要岔出去学点新的东西了。\n2019年4月9日Android在对话框里弹出个软键盘怎么就怎么难？\n2019年4月2日为了支持正向计时和解决昨天提到的问题，现在要重做整个计时器链接的逻辑。初步定在3.2.0。\n2019年4月1日嗯。。之前2019年3月21日提到的问题，终于重现了一次。这个问题会造成两种崩溃，都是涉及运行多个计时器时，通过通知终止所有计时器（或许还有其他情况？），造成一些情况下应用崩溃。修起来比较棘手，只能从底层重构链接计时器的整个逻辑。找不到现成的轮子，只有自己来了。\n2019年3月31日3.1.0会有两个专业版的功能：设置一个计时器结束后自动启动下一个的设置，Tasker支持。\n2019年3月27日3.0.0 有个大Bug，争取今天中午能发出安装包。暂时把酷安应用下架了避免没更新的各位更新。虽然好像找不到重新上架的按钮了。。。有条件升级的都给我升级。\n2019年3月21日看到几个莫名其妙、理论上不可能发生但的确发生了的崩溃，一直都没头绪。它是关于停止所有计时器的，反正停止所有计时器和直接崩溃的效果都差不多，我就先搜集一下相关信息，未来几个版本再想办法解决。\n2019年3月15日一直狂按下一步，会有极小几率崩溃，原因不明，估计是在快速显示新步骤和隐藏旧步骤时，RecyclerView处理不过来了。因此才有的双击步骤序号快速跳转的功能呀。\n2019年3月14日重构差不多了。清理清理就上马3.0，虽然并没有什么特别激动人心的新功能。新功能留到3.1吧。\n2019年3月13日重构代码就跟捅了马蜂窝一样，这个比喻真形象。现在已经有了16个Module了。。\n2019年3月8日问：为什么这个应用无论怎么改，UI都透露着一股贫穷和简陋？\n2019年2月13日发现了一些Bug：在有任意对话框打开的情况下，旋转屏幕，很大几率崩溃。不过不急着修，大伙儿又不会没事儿转着手机玩。另外Android传数据是真的繁琐。\n2019年2月12日APK逐渐膨胀快到4MB了，东西越加越多是这个样子的。\n2019年2月11日2.1.0已经在测试了。之后还是规矩，清理清理代码，需要的话出个2.1.1修Bug。然后我要岔出去搞搞应用介绍、应用截图和造一些其他轮子。\n2019年2月9日一个有意思的现象：开始/暂停按钮显示的是它要执行的动作（运行时显示暂停图标，暂停时显示运行图标），但锁定按钮显示的是当前状态（锁定时显示锁定图标，解锁时显示解锁图标）。\n2019年2月8日\n打算再加一个快速修改计时器步骤的功能就可以出2.1.0啦。\n\n本来计划添加一个可以选99小时或更长时间的选择器的，但这种情况呀，最好还是手动设一个系统闹钟或一个计划任务，因为设置那么长的一个步骤会很费电。因此99小时选择器的计划延后。\n\n很多手机在使用计划任务时，要想在手机重启后让计划任务继续生效，是需要在系统设置进行单独设置的。\n\n\n2019年2月6日我们已经尽力了.jpg\n因为UI设计和大量数据的显示本来就不怎么配合，加上又不怎么会UI设计，结果只能注重实用性，而减小UI的权重。\n2019年2月4日在Dribbble找了很多设计图，但只能说对UI优化有了个大概预想。不过在改完UI后，我估计还得优化一下内存，总感觉应用是不是吃得太多了？希望是错觉。\n我决定今天争取发一个2.0.1修一下当前的Bug。\n2019年2月3日接下来的计划：如果2.0.0有严重的Bug，就会有2.0.1来专门修理它们。如果没有，下个版本会是2.1.0，主要更新有美化UI和快速设置当前步骤和循环（居然现在才加这个功能），也会重做一下应用介绍和截图。\n另外，激活专业版的各位记得把用户名附上呀，不能我只能等各位的邮件啦。下个版本给那几个字**加粗放大**。\n2019年2月1日要什么beta版，再测一测就上正式版。大不了打补丁嘛。\n已知Bug：\n\n运行N(N &gt; 1)个计时器，在其中一个嘟嘟时，每次嘟嘟音会响N次。。涉及到对嘟嘟音的重新设置，下个版本修复。\n\n2019年1月24日内容做的差不多了。接下来的任务是1. 测试。因为改动太大，需要把整个应用都舔一遍。2. 引用了两个还在alpha和beta的第三方库，担心不稳定造成崩溃。3. 组的UI显示还是不怎么满意，但不知道怎么改进。\n2019年1月18日如果创建很多个计时器（3个及以上吧），都打开，然后点击总管通知的开始暂停，这时总管通知就更新不过来了，原因是Android限制了一个应用一秒内可以更新通知的次数（据说是10次）。而在开始暂停时，每个计时器的通知都得更新名称和按钮选项。这个问题理论上无法彻底解决。能缓解问题的方法是把一些计时器的通知显示关掉。。。\n2019年1月14日2.0.0还差几个小feature需要做，UI也需要提升一下。但最后的测试估计会很费劲且费时。\n但接下来的版本已经有畅想了。2.0.1将会修理Bug。2.1.0将会加三个新功能：不需要进入编辑界面就可以快速编辑的功能、计时器排序（这个还不知道怎么做）、设置毫秒级的步骤时长。此外还会努力优化一下UI。\n2019年1月12日现在的步骤编辑布局，一大串儿行为，选择打开哪个。我寻思着可以改成，默认什么都没有，加个可以选择添加哪个行为的按钮。这个样子就干净多了。\n发布前，我得写篇很详细的使用说明。\n另外，放弃设计了，能跑起来就不错了。Keyline对齐就已经胜利了。\n嗯。现在组的实现差不多完成了，该收拾收拾其他东西了。\n2019年1月11日在编辑界面，加入组之后，拖拽就变得很复杂。尤其是把一个步骤拖进组里或拖出组外。为了省事，新版本里打算不做这个功能了。需要的可以通过删除+新建来实现调整步骤的效果。\n2019年1月9日新的组里多了一个限制：一个计时器步骤大于了2万，或一个组里的步骤大于了10万，计时器运行界面的步骤显示可能会出现错误。如果有哪位超人不够的话，跟我说，我再改改。\n2019年1月6日比预料的快但也更磨人。编辑界面凑活能用了，但是丑，很过分地丑。跑了一圈Dribbble也莫得灵感。\n2019年1月5日我要放弃组中组的功能开发了。一方面因为这有点过于复杂，不仅仅是数据层面（如何保存一个可以在子树中循环的多叉树的状态？），还有界面层面（编辑时，组就需要一个单独页面；运行时，将会比文件树视图还要复杂）。\n所以2.0.0的变动将会有:\n\n在现有四种步骤类型的基础上，新增一个“组”步骤类型。组里可以放多个步骤，并可以有自己的循环。但组里不能嵌套另外的组。\n数据导入导出的格式升级为.tmd2，将不会兼容之前的版本。需要的可以在升级到2.0.0之后，重新导出一次数据。\n\n在2.0.1会有一些UI上的优化。\n2019年1月4日数据层的工作完成了。比想象中的快了不少。接下来就是UI层。头疼，不知道怎么塞进新的“组”的概念。\n2018年12月31日比想象中的复杂。现在的方法是把计时器的状态（在哪一步骤运行中）保存到一个整数里，是把计时器“捋平”后再记录。为了适应更复杂的结构，原来的方法就显得太臃肿了。现在得想个更好的办法，这可就不好弄了。有没有现成的轮子啊啊啊。\n过了一会后\n重做计时驱动层吧，现在计时器们也有跟Android一样的lifecycle啦。\n2018年12月30日2.0.0在做了，主要任务就是一个特殊步骤：组。组有自己的名字和循环，组里也可以放步骤。\n然后这玩意儿现在成了多叉树，这可就复杂了。。为了记录当前步骤，就要一个迭代遍历多叉树的操作，头大。\n另外的问题是UI，我该怎么显示一个多叉树的步骤视图和它的编辑页面？初步构想是先不支持“组里组”的这种结构（这样复杂的任务可能分成两个计时器更好)，这样UI就可以简化为步骤+带标题的步骤。\n2018年12月25日1.1.1差不多了，主要是修修补补。该准备2.0.0了，虽然连规划还没开始。\n2018年12月23日做好了，但是好丑啊啊啊。。等未来的版本再用吧。\n2018年12月20日打算重做一下运行时所有步骤的那个控件，为了解决前面提到的Bug，应该做起来比较简单吧。。\n2018年12月15日APK爆炸了。。最大的到了5.1MB。不行，我得想想办法，争取限制在4MB里。之所以是4MB，估计和当时Instnat App最大只能4MB有关，虽然现在10MB了，但心里的那条线已经画好了。\n过了一会\n啊，回炉重做吧。\n2018年12月14日发现一个Bug：如果创建很多步骤，7、8个吧，然后疯狂点下一步，很快就会崩溃。暂时解决不了，可能的话会在1.1.1里重写一下控件。\n2018年12月13日1.1.0，有一些新功能和一个高级付费版，来维持开发。\n1.1.1，修理Bug，引入Material Design 2。\n2.0.0，引入组的概念，可以把步骤放到组里，组有单独的名字和循环。\n2018年12月2日十五分钟内的多个计划任务就会失效，这也就是为什么奥利奥上循环计时器不能用的原因。\n1.0.6还没出，我已经在畅想2.0.0怎么做了。。\n2018年11月29日最近其实加了不少新功能，但在新版本里其实都把入口隐藏了，因为最近一直在加东西，有点迷茫。\n2018年11月21日有个Bug：加1分钟后，计时条会失效。因为加1分钟是临时的，所以计时条找不到当前步骤的总时间。那这可怎么解决哩？\n2018年11月20日用了evernote的android-job来实现计划任务了，虽然底层都差不多，但总比自己造轮子好。不过最近我的手机闹钟都不响了，其他第三方应用设置的闹钟靠谱才怪哩。\n这次的发布不怎么顺利啊，发现了不少Bug。\n2018年11月15日打算加一个每秒播放提示音的步骤行为，但好肝啊。\n2018年11月12日开发者吃狗粮体验：别用自己喜欢的音乐作为步骤音乐，会把它听毁掉的。可以考虑用手机自带的提示音或者朗读步骤名称。\n2018年11月11日代码难产啦。倒不是没有要做的东西，相反，要做的太多了。\n过了一会\n有位哥们儿反馈了一个默认铃声无法停止循环的Bug，试了一下，没什么头绪，好像是Android的Bug吧，我再试一试。 真凶抓到了，.ogg自带无限循环，换成.mp3就好啦。\n2018年11月7日如果一切顺利的话，跑完测试就可以放出1.0.4了。新版本主要对UI进行了不少优化，还为下一步做了不少铺垫。\n什么？APK大小破3MB了？\n2018年10月31日代码又难产了。。。\n发现居然循环计时器在有的奥利奥设备上居然能运行，这究竟是手机厂商的宽容大度还是谷歌的过于严格？\n2018年10月28日接下来要做的工程都很复杂呀。。\n过了一会。\n什么？支持平板？谷歌爸爸的平板都停产绝版了。。如果以后闲到无事可做，我可能会考虑适配一下平板。。\n2018年10月25日1.0.3丢去测试了，不出大问题今天出。修改了计划任务的实现，不知道会不会影响到正常使用。。这之后又要重构了，这次重构UI，新功能的添加搁置一段时间。\n2018年10月23日我估计还得再来几天，因为现在IDE都坏掉了。\n2018年10月22日修了一整天内存泄露。。\n2018年10月21日研究了一会OCR，回来鼓捣计时机器啦。估计这个月能更新一下下。\n过了一会儿：\n以前LeakCanary一直在报告有内存泄漏，但因为之前很多次都是Android系统的泄露，所以一直都忽视了。今天稍微用了一会发现泄露的通知怎么挤爆了。。。我才发现应用的内存泄露有点严重，现在正在修理中。。都怪Android系统。\n2018年10月16日最近在造一个动态主题的轮子，真正地在造轮子。。\n2018年10月7日有用户提醒我PIP没做，因为PIP比悬浮窗简单，就顺手做了一下，却发现在暗色主题下，显示不出来？？？会不会又发现了Android的坑啦。\n2018年10月3日Bug越测试越多可还行。整个应用败絮其中，只能缝缝补补才能过日子的样子。\n2018年10月2日加了一波小功能，测试过了就放出1.0.2，然后我要去试着写一个悬浮窗 + OCR的应用原型，其中用到的悬浮窗也算为计时机器的下一步打基础了。\n2018年10月1日有些设置该放到工具箱里呢，还是设置里呢？我要想一想。\n2018年9月28日之前提过循环计时器是系统闹钟机制，计时机器是前台服务机制，所以一直想着把闹钟机制的功能移植到计时机器中。但现在突然想到闹钟机制只能在棒棒糖、棉花糖和牛轧糖上运行啊，对奥利奥及以后根本不起作用，同时新设备也越来越多。这么看来，闹钟机制的添加冒着支持旧设备 + 可能失效的危险，这么想就懒得添加闹钟机制了。\n什么，循环计时器不灵了？可以用计时机器呀。什么，怕前台服务费电？可以用循环计时器呀。什么，循环计时器功能不够多？可以用计时机器呀。\n不过，还没人跟我抱怨过应用费电的问题，估计是杞人忧天了。\n2018年9月25日虽然在主题、导入导出上遇到一些问题，但成功解决了。可喜可贺。\n接下来？清理一下代码库，向AndroidX迁移，然后可能要考虑悬浮窗和付费功能了。付费功能不好做啊。\n2018年9月18日在思考数据导出的问题，文件格式叫TimeR Machine Data，后缀可以简称.tmd。\n2018年9月14日主题搞定，造了一个大轮子，下一步先收拾收拾、整理整理任务，定一些计划。\n2018年9月5日1.0.0差不多了，处理处理文案之类的工作就要放粗来啦。\n2018年8月30日最近在造一些轮子，完了之后就着手给计时机器修理漏洞、添加使用指导之类的东西，准备1.0。\n1.0之后打算先全面支持一下Android派，然后再想办法增加新功能、新界面和更多的自定义属性。\n2018年8月18日0.3.3发布了，对通知和多计时器进行了大量改动，可能出现不少问题，也会在最近陆续修复。漏洞修光光后，就发布到正式版1.0.0，然后又是新增更多功能。\n2018年8月17日在思考要不要加些付费功能，Google那边就很简单。国内的话，考虑到用户量不多，最可行的还是依赖一个后端存储信息 + 手动确认。\n2018年8月13日commit过千了。\n为了庆祝，我想实现一个功能，首先在任何运行的时候，至少有一个通知。然后当有一个计时器时，只显示一个通知；两个及以上时，显示多个计时通知 + 一个总管通知。这个逻辑 + 每个计时器都有可能不显示通知 + 任何计时器都会在任何时候开始和结束，就诞生了一个炒鸡复杂的管理机制。这个复杂的通知管理，有五个状态，任何计时器开始都会让状态切换。挖了一个好大的坑呀。(ノへ￣、)\n2018年8月12日最近代码洁癖犯了，处理了很多第三方Library。要么重写，要么优化。\n2018年7月30日最近想用一个方便的RecyclerView，找遍了Arsenal和Github都找不到一个顺手的。顺便试了一下Flutter，的确很舒服，虽说Dart不熟练，但开发过程挺舒服，只可惜没什么想写的应用。\n2018年7月21日在确保现有功能不出问题的前提下，就要发布1.0.0了，然后又是一大波新功能的添加。\n2018年7月11日加了几个新功能。我估计新功能稳定后就可以发布1.0.0版本了，毕竟Beta也半年多了。\n2018年7月2日0.3.1修复了一个在一些设备上无法选择音乐的Bug。但在Moto G4 Play上会出现Native Crash，莫名其妙，能不能解决随缘吧。\n2018年6月29日正在准备0.3.0的发布，新内容不多，但算是给新内容的添加打好了基础。\n但现在有很多很多Bug得修理。\n2018年6月28日考虑关闭通知时间提醒的功能，在手机上更新通知并算不上多么好的体验和实践。\n2018年5月23日重构基本完成了。等加点新功能在放出新版本吧，打算撸个好看点儿的UI。\n2018年5月6日最近在重构整个应用，导致Bug攒了一大堆。。\n2018年4月24日手痒又想重构了。重构==新功能暂时加不了，旧功能各种出问题+以后会爽到。\n2018年4月13日2017年12月18日 那天的日志中提到的问题又重现了。应用被冻结，不是被杀，而是被执行暂停。只有在屏幕再次打开时，应用才会继续执行下一步。\n这是一个跟国内厂商斗智斗勇的故事。计时器既然需要精确地计时，就要让CPU一直运行，这一点用WakeLock很容易解决。但这样阿猫阿狗都可以让CPU一直运行，不久流氓应用遍地了吗？于是各厂商就增加了应用冻结（或其他名字）的功能，如果应用让CPU一直运行，但又没有做什么实质性的工作，就会冻结它，不是杀了它，是暂停它。这样屏幕一打开，应用又可以继续工作了。\n把应用添加到各个厂商手机中的白名单、保护应用、后台执行之类设置中，可以一定程度解决问题。至少我在测试中这么做，清空后台后，原本3分钟就被冻结的应用，现在3分钟、5分钟、10分钟也没问题了。\n我在思考通过一些机制让应用正常工作。\n2018年4月12日本来打算今天发布0.2.0了，但决定给计时器执行实现加一些测试，过几天再发布吧。\n2018年4月6日重构数据层。下个版本可能要丢数据了。。。因为忘了给Model加Proguard。。\n2018年4月4日又要开始爆肝更新了。任务出奇的多啊，数据层也打算重构一下。Beta测试放飞自我，更新之后丢一些数据也是很正常的。\n2018年4月3日最近在充电，学各种东西，也在新功能开发各种库。\n2018年3月24日最近只修了一些Bug。重新搭了一下博客，研究了一会儿自动化脚本。。\n2018年3月12日正在重构代码库。改一改就要跑一遍测试确保不会大崩坏。不过这Gradle Building + 测试可要了命了，跑一遍测试就等几分钟。。都能摸出鲸鱼了。\n2018年3月8日昨天发布了0.1.2。内容有步骤颜色、朗读步骤名称、电子表显示。接下来要清理一下代码库为下一步更多自定义功能做准备了。\n似乎支持手环需要各个厂商的API，拿不到就支持不了了。\n2018年3月3日把朗读步骤名称做好了，也做了一些控件。文字转语音还是得用户自己想办法装一个能用的引擎并下载语音数据。\n2018年2月25日要加朗读步骤名称的行为了。在系统设置里配置好文字转语音（TextToSpeech，TTS）后，用起来还算方便，但国内各系统肯定各有各的阉割。\n2018年2月23日第二个Beta版本发布，解决了不知道计时器是否已经开始或结束的问题。接下来就要处理棘手的界面问题了。\n2018年2月18日现阶段主要在研究增强后的步骤选项，有点复杂，焦头烂额。\n2018年2月14日Beta阶段的任务就很多了。比如增强后的步骤选项（自定义的提醒步骤、只运行一次的启动和结束步骤）、更理想更多的计时器详细页面、朗读步骤名称。。。\n最近刚刚重写了选取时间的控件。\n2018年2月8日可以进入Beta测试了。虽然有很多小细节可以改进，还有几个重要功能需要加入，但核心功能已经基本齐备了。\n2018年2月7日计时器流水线工作解决的差不多了，但发现计划任务在Android O上失效的问题，应该和最新的后台限制有关，暂时解决不了。Beta阶段试一试第三方Library。\n2018年2月5日发现现有的计时器的流水线工作存在一些小Bug，比如不停地暂停、+1分钟、前进、后退……就有可能把计数器玩儿坏。我得专门再次重构一下这块，年前发布不了不过年。\n2018年2月4日试着向下兼容KitKat，但会出现multiDex与lifecycle无法兼容导致崩溃的迷之Bug。或许在使用Proguard后可以继续在KitKat上使用，但Debug起来就很费事。找不到解决方案前可能无法支持Android 4.4了。\n2018年2月2日增加了夜间主题和介绍页。\n2018年1月27日0.0.5修复了无法正常保存的问题\n2018年1月26日想解决一个问题：在通知栏右侧显示一个类似于系统闹钟的小图标，提示未来有计划任务。研究了一下，那个小图标似乎是全系统的唯一且共享的。这意味着，如果手机上既有闹钟也有计划任务，两个就重叠了，只能看到一个，其实这也起不到原先的目的了。那就先不加入这个功能了，给系统让路。\n2018年1月25日\n发现计划任务的重复设置可能有些Bug，一次性的似乎没问题。\n发布了0.0.4。更新有：临时为计时器增加一分钟；钦定的紫蓝主题色；增加帮助和相关页面；修复了计划任务的Bug。\n在加入一些小功能、跑一些测试、确保程序正常运行后，就可以进入Beta测试了。\n\n2018年1月24日增加了帮助与反馈。\n在考虑需不需要增加一个单独的计时器启动和结束步骤。不然计时器启动或结束了都不知道。加入的话，需要加一个步骤还是多个步骤，是使用专门的Field保存，还是整合到已有的Steps中？\n2018年1月22日\n在支持多主题（皮肤）的过程中遇到诸多困难，放弃了。可能会在加入夜间模式，但自定义颜色的设置可能要放在很久以后了。\n研究了一下其他应用的多主题原理。Todoist使用预定颜色，通过recreate() Activity实现。Telegram似乎是吧所有用到的Paint, Drawable等等都罗列在一个三千行的Theme类中，通过直接修改颜色来实现（看呆了)。都不是很理想的方法，最后可能使用前者。\n先给计时机器钦定了紫蓝的主题色。\n\n2018年1月14日0.0.3发布。现在可以新建计划任务了：按预定时间开启或关闭一个计时器，一次性的或者按星期几重复。\n安装新版本前要写手动卸载旧版本（既然是Alpha测试，数据库结构改动就随心所欲放飞自我了）。\n2018年1月12日初步完成了计划任务的功能。可以像定闹钟一样设置，什么时候开启或停止一个计时器。\n理想情况下，这是可以按预期工作的。但Android系统上，所有跟闹钟搭上边的应用都面临一个无法按时触发的问题。\n一方面，系统为了优化电池性能而优化（推迟）闹钟触发时间。这一点可以调用在Android 6.0及以后的setExactWhileIde（似乎叫这个）来最大程度绕过，但4.4-5.1只有setExact，4.3及以前只有set了。效果当然是依次递减了。\n另一方面，也是最担心也最没办法的。国内各厂商自定义的各个系统，为了应对国内众多流氓应用，会在清理应用后台时，把我设定的计划任务的闹钟也给清理掉，结果自然是没法触发。如果用户清理了最近使用的应用话，这个情况就会发生。\n补充：Android O的后台限制也会极大影响能否触发。\n2018年1月10日Alpha 0.0.2更新了，主要加入了一些无法打开的正常开发的功能选项，也修复了很多计时器方面的问题。别的不能保证，但不删除旧版就直接安装，肯定崩溃。\n2018年1月9日\n决定暂时停止对Android 5.0(API Level 21)以下的支持，兼容老版本过于浪费精力和时间。在正式版发布后再考虑兼容老版本的问题。\n\n真是谜一般的Bug，在8.1上使用Ringtone就播放无声音，非得使用MediaPlayer才可以。\n\n\n2018年1月4日计时器的定时开启和关闭和闹钟的设置差不多，但由于国内各厂商的设置，设置的这些闹钟不一定能唤醒。\n2017年12月29日由于疏忽，导致当前的测试版本在Android O(8.0, API Level 26)及以上无法创建Notification Channel，也就是会无法通知渠道。下个版本修复。\n2017年12月26日计划在正式版发布前加入定时启动和停止的功能。多计时器的查看功能整合在计时器列表中。\n2017年12月18日\n最担心的事情发生了，Foreground Service无法准时唤醒手机，又得找黑科技解决。FML\n\n似乎用WakeLock解决了，这意味了必须用ForegroundService + WakeLock == 一直保持CPU唤醒状态 == 消耗更多的电量。\n\n不过我为什么不设计一个结合两个应用优点的应用呢，既可以使用AlarmManager省电但稍有不准，也可以使用ForegroundService + WakeLock耗电但准时提醒？当然是能力不够啦。或许TimerMachine做的差不多后，可以在考虑添加AlramManager的实现方式。\n\n\n2017年12月14日\n\n\n应用比较\nCycle Timer\nTimer Machine\n\n\n\n实现原理\n系统闹钟(AlarmManager.setExact…)\n前台服务(Foreground Service)\n\n\n准确度\n少数特定手机、少数特定情况可能失效\n非常准确\n\n\n可能的失效原因\n权限、系统限制一定时间内的唤醒次数\n权限、内存及其不够时服务被杀\n\n\n可自定义内容\n名称、循环、节点及其名称、是否振动、提醒音乐\n名称、循环、每个节点的名称音乐振动唤醒屏幕\n\n\n耗电\n系统分配唤醒时间，影响小\n需保持计时器一直运行，影响大\n\n\n生命周期\n维护尾声\n正在开发\n\n\n2017年12月11日提醒方式将会有音乐、振动、弹出屏幕、朗读节点名称。各自的自定义会陆续加入。\n2017年12月10日循环计时器+计时机器的开发日志。\n之所以打算放弃维护循环计时器，重新开发新的计时机器，是因为前者是第一个正式上架的应用，用的还是MVC，代码库很乱，数据库储存格式更乱，\n考虑到更多新功能的加入，决定写一个技术更前卫，使用更灵活的计时器。\n","categories":["Android"]}]